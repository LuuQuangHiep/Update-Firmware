
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007518  080201a0  080201a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080276b8  080276b8  000086b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080279a4  080279a4  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080279a4  080279a4  000089a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080279ac  080279ac  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080279ac  080279ac  000089ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080279b0  080279b0  000089b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080279b4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b94  20000060  08027a14  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bf4  08027a14  00009bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013029  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a7  00000000  00000000  0001c0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0001f260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c95  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b30  00000000  00000000  00020f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a82  00000000  00000000  00024a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b42  00000000  00000000  00037517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8059  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c1c  00000000  00000000  000c809c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201a0 <__do_global_dtors_aux>:
 80201a0:	b510      	push	{r4, lr}
 80201a2:	4c05      	ldr	r4, [pc, #20]	@ (80201b8 <__do_global_dtors_aux+0x18>)
 80201a4:	7823      	ldrb	r3, [r4, #0]
 80201a6:	b933      	cbnz	r3, 80201b6 <__do_global_dtors_aux+0x16>
 80201a8:	4b04      	ldr	r3, [pc, #16]	@ (80201bc <__do_global_dtors_aux+0x1c>)
 80201aa:	b113      	cbz	r3, 80201b2 <__do_global_dtors_aux+0x12>
 80201ac:	4804      	ldr	r0, [pc, #16]	@ (80201c0 <__do_global_dtors_aux+0x20>)
 80201ae:	f3af 8000 	nop.w
 80201b2:	2301      	movs	r3, #1
 80201b4:	7023      	strb	r3, [r4, #0]
 80201b6:	bd10      	pop	{r4, pc}
 80201b8:	20000060 	.word	0x20000060
 80201bc:	00000000 	.word	0x00000000
 80201c0:	080276a0 	.word	0x080276a0

080201c4 <frame_dummy>:
 80201c4:	b508      	push	{r3, lr}
 80201c6:	4b03      	ldr	r3, [pc, #12]	@ (80201d4 <frame_dummy+0x10>)
 80201c8:	b11b      	cbz	r3, 80201d2 <frame_dummy+0xe>
 80201ca:	4903      	ldr	r1, [pc, #12]	@ (80201d8 <frame_dummy+0x14>)
 80201cc:	4803      	ldr	r0, [pc, #12]	@ (80201dc <frame_dummy+0x18>)
 80201ce:	f3af 8000 	nop.w
 80201d2:	bd08      	pop	{r3, pc}
 80201d4:	00000000 	.word	0x00000000
 80201d8:	20000064 	.word	0x20000064
 80201dc:	080276a0 	.word	0x080276a0

080201e0 <strlen>:
 80201e0:	4603      	mov	r3, r0
 80201e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201e6:	2a00      	cmp	r2, #0
 80201e8:	d1fb      	bne.n	80201e2 <strlen+0x2>
 80201ea:	1a18      	subs	r0, r3, r0
 80201ec:	3801      	subs	r0, #1
 80201ee:	4770      	bx	lr

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b96a 	b.w	802057c <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	460c      	mov	r4, r1
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	d14e      	bne.n	802036a <__udivmoddi4+0xaa>
 80202cc:	4694      	mov	ip, r2
 80202ce:	458c      	cmp	ip, r1
 80202d0:	4686      	mov	lr, r0
 80202d2:	fab2 f282 	clz	r2, r2
 80202d6:	d962      	bls.n	802039e <__udivmoddi4+0xde>
 80202d8:	b14a      	cbz	r2, 80202ee <__udivmoddi4+0x2e>
 80202da:	f1c2 0320 	rsb	r3, r2, #32
 80202de:	4091      	lsls	r1, r2
 80202e0:	fa20 f303 	lsr.w	r3, r0, r3
 80202e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80202e8:	4319      	orrs	r1, r3
 80202ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80202ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80202f2:	fa1f f68c 	uxth.w	r6, ip
 80202f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80202fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80202fe:	fb07 1114 	mls	r1, r7, r4, r1
 8020302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020306:	fb04 f106 	mul.w	r1, r4, r6
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f104 30ff 	add.w	r0, r4, #4294967295
 8020316:	f080 8112 	bcs.w	802053e <__udivmoddi4+0x27e>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 810f 	bls.w	802053e <__udivmoddi4+0x27e>
 8020320:	3c02      	subs	r4, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a59      	subs	r1, r3, r1
 8020326:	fa1f f38e 	uxth.w	r3, lr
 802032a:	fbb1 f0f7 	udiv	r0, r1, r7
 802032e:	fb07 1110 	mls	r1, r7, r0, r1
 8020332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020336:	fb00 f606 	mul.w	r6, r0, r6
 802033a:	429e      	cmp	r6, r3
 802033c:	d90a      	bls.n	8020354 <__udivmoddi4+0x94>
 802033e:	eb1c 0303 	adds.w	r3, ip, r3
 8020342:	f100 31ff 	add.w	r1, r0, #4294967295
 8020346:	f080 80fc 	bcs.w	8020542 <__udivmoddi4+0x282>
 802034a:	429e      	cmp	r6, r3
 802034c:	f240 80f9 	bls.w	8020542 <__udivmoddi4+0x282>
 8020350:	4463      	add	r3, ip
 8020352:	3802      	subs	r0, #2
 8020354:	1b9b      	subs	r3, r3, r6
 8020356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 802035a:	2100      	movs	r1, #0
 802035c:	b11d      	cbz	r5, 8020366 <__udivmoddi4+0xa6>
 802035e:	40d3      	lsrs	r3, r2
 8020360:	2200      	movs	r2, #0
 8020362:	e9c5 3200 	strd	r3, r2, [r5]
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d905      	bls.n	802037a <__udivmoddi4+0xba>
 802036e:	b10d      	cbz	r5, 8020374 <__udivmoddi4+0xb4>
 8020370:	e9c5 0100 	strd	r0, r1, [r5]
 8020374:	2100      	movs	r1, #0
 8020376:	4608      	mov	r0, r1
 8020378:	e7f5      	b.n	8020366 <__udivmoddi4+0xa6>
 802037a:	fab3 f183 	clz	r1, r3
 802037e:	2900      	cmp	r1, #0
 8020380:	d146      	bne.n	8020410 <__udivmoddi4+0x150>
 8020382:	42a3      	cmp	r3, r4
 8020384:	d302      	bcc.n	802038c <__udivmoddi4+0xcc>
 8020386:	4290      	cmp	r0, r2
 8020388:	f0c0 80f0 	bcc.w	802056c <__udivmoddi4+0x2ac>
 802038c:	1a86      	subs	r6, r0, r2
 802038e:	eb64 0303 	sbc.w	r3, r4, r3
 8020392:	2001      	movs	r0, #1
 8020394:	2d00      	cmp	r5, #0
 8020396:	d0e6      	beq.n	8020366 <__udivmoddi4+0xa6>
 8020398:	e9c5 6300 	strd	r6, r3, [r5]
 802039c:	e7e3      	b.n	8020366 <__udivmoddi4+0xa6>
 802039e:	2a00      	cmp	r2, #0
 80203a0:	f040 8090 	bne.w	80204c4 <__udivmoddi4+0x204>
 80203a4:	eba1 040c 	sub.w	r4, r1, ip
 80203a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203ac:	fa1f f78c 	uxth.w	r7, ip
 80203b0:	2101      	movs	r1, #1
 80203b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80203b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80203ba:	fb08 4416 	mls	r4, r8, r6, r4
 80203be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80203c2:	fb07 f006 	mul.w	r0, r7, r6
 80203c6:	4298      	cmp	r0, r3
 80203c8:	d908      	bls.n	80203dc <__udivmoddi4+0x11c>
 80203ca:	eb1c 0303 	adds.w	r3, ip, r3
 80203ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80203d2:	d202      	bcs.n	80203da <__udivmoddi4+0x11a>
 80203d4:	4298      	cmp	r0, r3
 80203d6:	f200 80cd 	bhi.w	8020574 <__udivmoddi4+0x2b4>
 80203da:	4626      	mov	r6, r4
 80203dc:	1a1c      	subs	r4, r3, r0
 80203de:	fa1f f38e 	uxth.w	r3, lr
 80203e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80203e6:	fb08 4410 	mls	r4, r8, r0, r4
 80203ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80203ee:	fb00 f707 	mul.w	r7, r0, r7
 80203f2:	429f      	cmp	r7, r3
 80203f4:	d908      	bls.n	8020408 <__udivmoddi4+0x148>
 80203f6:	eb1c 0303 	adds.w	r3, ip, r3
 80203fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80203fe:	d202      	bcs.n	8020406 <__udivmoddi4+0x146>
 8020400:	429f      	cmp	r7, r3
 8020402:	f200 80b0 	bhi.w	8020566 <__udivmoddi4+0x2a6>
 8020406:	4620      	mov	r0, r4
 8020408:	1bdb      	subs	r3, r3, r7
 802040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802040e:	e7a5      	b.n	802035c <__udivmoddi4+0x9c>
 8020410:	f1c1 0620 	rsb	r6, r1, #32
 8020414:	408b      	lsls	r3, r1
 8020416:	fa22 f706 	lsr.w	r7, r2, r6
 802041a:	431f      	orrs	r7, r3
 802041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8020420:	fa04 f301 	lsl.w	r3, r4, r1
 8020424:	ea43 030c 	orr.w	r3, r3, ip
 8020428:	40f4      	lsrs	r4, r6
 802042a:	fa00 f801 	lsl.w	r8, r0, r1
 802042e:	0c38      	lsrs	r0, r7, #16
 8020430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8020434:	fbb4 fef0 	udiv	lr, r4, r0
 8020438:	fa1f fc87 	uxth.w	ip, r7
 802043c:	fb00 441e 	mls	r4, r0, lr, r4
 8020440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8020444:	fb0e f90c 	mul.w	r9, lr, ip
 8020448:	45a1      	cmp	r9, r4
 802044a:	fa02 f201 	lsl.w	r2, r2, r1
 802044e:	d90a      	bls.n	8020466 <__udivmoddi4+0x1a6>
 8020450:	193c      	adds	r4, r7, r4
 8020452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020456:	f080 8084 	bcs.w	8020562 <__udivmoddi4+0x2a2>
 802045a:	45a1      	cmp	r9, r4
 802045c:	f240 8081 	bls.w	8020562 <__udivmoddi4+0x2a2>
 8020460:	f1ae 0e02 	sub.w	lr, lr, #2
 8020464:	443c      	add	r4, r7
 8020466:	eba4 0409 	sub.w	r4, r4, r9
 802046a:	fa1f f983 	uxth.w	r9, r3
 802046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8020472:	fb00 4413 	mls	r4, r0, r3, r4
 8020476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 802047a:	fb03 fc0c 	mul.w	ip, r3, ip
 802047e:	45a4      	cmp	ip, r4
 8020480:	d907      	bls.n	8020492 <__udivmoddi4+0x1d2>
 8020482:	193c      	adds	r4, r7, r4
 8020484:	f103 30ff 	add.w	r0, r3, #4294967295
 8020488:	d267      	bcs.n	802055a <__udivmoddi4+0x29a>
 802048a:	45a4      	cmp	ip, r4
 802048c:	d965      	bls.n	802055a <__udivmoddi4+0x29a>
 802048e:	3b02      	subs	r3, #2
 8020490:	443c      	add	r4, r7
 8020492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8020496:	fba0 9302 	umull	r9, r3, r0, r2
 802049a:	eba4 040c 	sub.w	r4, r4, ip
 802049e:	429c      	cmp	r4, r3
 80204a0:	46ce      	mov	lr, r9
 80204a2:	469c      	mov	ip, r3
 80204a4:	d351      	bcc.n	802054a <__udivmoddi4+0x28a>
 80204a6:	d04e      	beq.n	8020546 <__udivmoddi4+0x286>
 80204a8:	b155      	cbz	r5, 80204c0 <__udivmoddi4+0x200>
 80204aa:	ebb8 030e 	subs.w	r3, r8, lr
 80204ae:	eb64 040c 	sbc.w	r4, r4, ip
 80204b2:	fa04 f606 	lsl.w	r6, r4, r6
 80204b6:	40cb      	lsrs	r3, r1
 80204b8:	431e      	orrs	r6, r3
 80204ba:	40cc      	lsrs	r4, r1
 80204bc:	e9c5 6400 	strd	r6, r4, [r5]
 80204c0:	2100      	movs	r1, #0
 80204c2:	e750      	b.n	8020366 <__udivmoddi4+0xa6>
 80204c4:	f1c2 0320 	rsb	r3, r2, #32
 80204c8:	fa20 f103 	lsr.w	r1, r0, r3
 80204cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80204d0:	fa24 f303 	lsr.w	r3, r4, r3
 80204d4:	4094      	lsls	r4, r2
 80204d6:	430c      	orrs	r4, r1
 80204d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80204dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80204e0:	fa1f f78c 	uxth.w	r7, ip
 80204e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80204e8:	fb08 3110 	mls	r1, r8, r0, r3
 80204ec:	0c23      	lsrs	r3, r4, #16
 80204ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80204f2:	fb00 f107 	mul.w	r1, r0, r7
 80204f6:	4299      	cmp	r1, r3
 80204f8:	d908      	bls.n	802050c <__udivmoddi4+0x24c>
 80204fa:	eb1c 0303 	adds.w	r3, ip, r3
 80204fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8020502:	d22c      	bcs.n	802055e <__udivmoddi4+0x29e>
 8020504:	4299      	cmp	r1, r3
 8020506:	d92a      	bls.n	802055e <__udivmoddi4+0x29e>
 8020508:	3802      	subs	r0, #2
 802050a:	4463      	add	r3, ip
 802050c:	1a5b      	subs	r3, r3, r1
 802050e:	b2a4      	uxth	r4, r4
 8020510:	fbb3 f1f8 	udiv	r1, r3, r8
 8020514:	fb08 3311 	mls	r3, r8, r1, r3
 8020518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 802051c:	fb01 f307 	mul.w	r3, r1, r7
 8020520:	42a3      	cmp	r3, r4
 8020522:	d908      	bls.n	8020536 <__udivmoddi4+0x276>
 8020524:	eb1c 0404 	adds.w	r4, ip, r4
 8020528:	f101 36ff 	add.w	r6, r1, #4294967295
 802052c:	d213      	bcs.n	8020556 <__udivmoddi4+0x296>
 802052e:	42a3      	cmp	r3, r4
 8020530:	d911      	bls.n	8020556 <__udivmoddi4+0x296>
 8020532:	3902      	subs	r1, #2
 8020534:	4464      	add	r4, ip
 8020536:	1ae4      	subs	r4, r4, r3
 8020538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802053c:	e739      	b.n	80203b2 <__udivmoddi4+0xf2>
 802053e:	4604      	mov	r4, r0
 8020540:	e6f0      	b.n	8020324 <__udivmoddi4+0x64>
 8020542:	4608      	mov	r0, r1
 8020544:	e706      	b.n	8020354 <__udivmoddi4+0x94>
 8020546:	45c8      	cmp	r8, r9
 8020548:	d2ae      	bcs.n	80204a8 <__udivmoddi4+0x1e8>
 802054a:	ebb9 0e02 	subs.w	lr, r9, r2
 802054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8020552:	3801      	subs	r0, #1
 8020554:	e7a8      	b.n	80204a8 <__udivmoddi4+0x1e8>
 8020556:	4631      	mov	r1, r6
 8020558:	e7ed      	b.n	8020536 <__udivmoddi4+0x276>
 802055a:	4603      	mov	r3, r0
 802055c:	e799      	b.n	8020492 <__udivmoddi4+0x1d2>
 802055e:	4630      	mov	r0, r6
 8020560:	e7d4      	b.n	802050c <__udivmoddi4+0x24c>
 8020562:	46d6      	mov	lr, sl
 8020564:	e77f      	b.n	8020466 <__udivmoddi4+0x1a6>
 8020566:	4463      	add	r3, ip
 8020568:	3802      	subs	r0, #2
 802056a:	e74d      	b.n	8020408 <__udivmoddi4+0x148>
 802056c:	4606      	mov	r6, r0
 802056e:	4623      	mov	r3, r4
 8020570:	4608      	mov	r0, r1
 8020572:	e70f      	b.n	8020394 <__udivmoddi4+0xd4>
 8020574:	3e02      	subs	r6, #2
 8020576:	4463      	add	r3, ip
 8020578:	e730      	b.n	80203dc <__udivmoddi4+0x11c>
 802057a:	bf00      	nop

0802057c <__aeabi_idiv0>:
 802057c:	4770      	bx	lr
 802057e:	bf00      	nop

08020580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020580:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8020584:	b088      	sub	sp, #32
 8020586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	SCB->VTOR=FLASH_BASE|0x20000;
 8020588:	4b2c      	ldr	r3, [pc, #176]	@ (802063c <main+0xbc>)
 802058a:	4a2d      	ldr	r2, [pc, #180]	@ (8020640 <main+0xc0>)
 802058c:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802058e:	f000 fc95 	bl	8020ebc <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_FLASH_Unlock();
 8020592:	f001 fa65 	bl	8021a60 <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef sector3 = {
 8020596:	4b2b      	ldr	r3, [pc, #172]	@ (8020644 <main+0xc4>)
 8020598:	1d3c      	adds	r4, r7, #4
 802059a:	461d      	mov	r5, r3
 802059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80205a0:	682b      	ldr	r3, [r5, #0]
 80205a2:	6023      	str	r3, [r4, #0]
  				 .Banks = FLASH_BANK_1,
  				 .Sector = FLASH_SECTOR_3,
  				 .NbSectors = 1,
  				 .VoltageRange = FLASH_VOLTAGE_RANGE_1,
  		 };
  		 uint32_t* sector_err = 0;
 80205a4:	2300      	movs	r3, #0
 80205a6:	603b      	str	r3, [r7, #0]
  		 HAL_FLASHEx_Erase(&sector3, &sector_err);
 80205a8:	463a      	mov	r2, r7
 80205aa:	1d3b      	adds	r3, r7, #4
 80205ac:	4611      	mov	r1, r2
 80205ae:	4618      	mov	r0, r3
 80205b0:	f001 fbb8 	bl	8021d24 <HAL_FLASHEx_Erase>
  		 char* fw_new = (char*)"veryfied";
 80205b4:	4b24      	ldr	r3, [pc, #144]	@ (8020648 <main+0xc8>)
 80205b6:	61bb      	str	r3, [r7, #24]
  		 for(int i = 0; i < sizeof(fw_new); i++)
 80205b8:	2300      	movs	r3, #0
 80205ba:	61fb      	str	r3, [r7, #28]
 80205bc:	e015      	b.n	80205ea <main+0x6a>
  		 {
  			 HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x0800C000 +i, fw_new[i]);
 80205be:	69fb      	ldr	r3, [r7, #28]
 80205c0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80205c4:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 80205c8:	4619      	mov	r1, r3
 80205ca:	69fb      	ldr	r3, [r7, #28]
 80205cc:	69ba      	ldr	r2, [r7, #24]
 80205ce:	4413      	add	r3, r2
 80205d0:	781b      	ldrb	r3, [r3, #0]
 80205d2:	b2db      	uxtb	r3, r3
 80205d4:	2200      	movs	r2, #0
 80205d6:	4698      	mov	r8, r3
 80205d8:	4691      	mov	r9, r2
 80205da:	4642      	mov	r2, r8
 80205dc:	464b      	mov	r3, r9
 80205de:	2000      	movs	r0, #0
 80205e0:	f001 f9ea 	bl	80219b8 <HAL_FLASH_Program>
  		 for(int i = 0; i < sizeof(fw_new); i++)
 80205e4:	69fb      	ldr	r3, [r7, #28]
 80205e6:	3301      	adds	r3, #1
 80205e8:	61fb      	str	r3, [r7, #28]
 80205ea:	69fb      	ldr	r3, [r7, #28]
 80205ec:	2b03      	cmp	r3, #3
 80205ee:	d9e6      	bls.n	80205be <main+0x3e>
  		 }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80205f0:	f000 f83e 	bl	8020670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205f4:	f000 f8e4 	bl	80207c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80205f8:	f000 f8c2 	bl	8020780 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80205fc:	f000 f896 	bl	802072c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8020600:	f003 f96c 	bl	80238dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(blinkled01, NULL, &task1_attributes);
 8020604:	4a11      	ldr	r2, [pc, #68]	@ (802064c <main+0xcc>)
 8020606:	2100      	movs	r1, #0
 8020608:	4811      	ldr	r0, [pc, #68]	@ (8020650 <main+0xd0>)
 802060a:	f003 f9b1 	bl	8023970 <osThreadNew>
 802060e:	4603      	mov	r3, r0
 8020610:	4a10      	ldr	r2, [pc, #64]	@ (8020654 <main+0xd4>)
 8020612:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(blinkled02, NULL, &task2_attributes);
 8020614:	4a10      	ldr	r2, [pc, #64]	@ (8020658 <main+0xd8>)
 8020616:	2100      	movs	r1, #0
 8020618:	4810      	ldr	r0, [pc, #64]	@ (802065c <main+0xdc>)
 802061a:	f003 f9a9 	bl	8023970 <osThreadNew>
 802061e:	4603      	mov	r3, r0
 8020620:	4a0f      	ldr	r2, [pc, #60]	@ (8020660 <main+0xe0>)
 8020622:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(UART, NULL, &task3_attributes);
 8020624:	4a0f      	ldr	r2, [pc, #60]	@ (8020664 <main+0xe4>)
 8020626:	2100      	movs	r1, #0
 8020628:	480f      	ldr	r0, [pc, #60]	@ (8020668 <main+0xe8>)
 802062a:	f003 f9a1 	bl	8023970 <osThreadNew>
 802062e:	4603      	mov	r3, r0
 8020630:	4a0e      	ldr	r2, [pc, #56]	@ (802066c <main+0xec>)
 8020632:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8020634:	f003 f976 	bl	8023924 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8020638:	bf00      	nop
 802063a:	e7fd      	b.n	8020638 <main+0xb8>
 802063c:	e000ed00 	.word	0xe000ed00
 8020640:	08020000 	.word	0x08020000
 8020644:	080276dc 	.word	0x080276dc
 8020648:	080276d0 	.word	0x080276d0
 802064c:	080277c8 	.word	0x080277c8
 8020650:	08020849 	.word	0x08020849
 8020654:	20000124 	.word	0x20000124
 8020658:	080277ec 	.word	0x080277ec
 802065c:	08020881 	.word	0x08020881
 8020660:	20000128 	.word	0x20000128
 8020664:	08027810 	.word	0x08027810
 8020668:	080208d9 	.word	0x080208d9
 802066c:	2000012c 	.word	0x2000012c

08020670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020670:	b580      	push	{r7, lr}
 8020672:	b094      	sub	sp, #80	@ 0x50
 8020674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020676:	f107 0320 	add.w	r3, r7, #32
 802067a:	2230      	movs	r2, #48	@ 0x30
 802067c:	2100      	movs	r1, #0
 802067e:	4618      	mov	r0, r3
 8020680:	f005 ffac 	bl	80265dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020684:	f107 030c 	add.w	r3, r7, #12
 8020688:	2200      	movs	r2, #0
 802068a:	601a      	str	r2, [r3, #0]
 802068c:	605a      	str	r2, [r3, #4]
 802068e:	609a      	str	r2, [r3, #8]
 8020690:	60da      	str	r2, [r3, #12]
 8020692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020694:	2300      	movs	r3, #0
 8020696:	60bb      	str	r3, [r7, #8]
 8020698:	4b22      	ldr	r3, [pc, #136]	@ (8020724 <SystemClock_Config+0xb4>)
 802069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802069c:	4a21      	ldr	r2, [pc, #132]	@ (8020724 <SystemClock_Config+0xb4>)
 802069e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80206a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80206a4:	4b1f      	ldr	r3, [pc, #124]	@ (8020724 <SystemClock_Config+0xb4>)
 80206a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80206a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80206ac:	60bb      	str	r3, [r7, #8]
 80206ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80206b0:	2300      	movs	r3, #0
 80206b2:	607b      	str	r3, [r7, #4]
 80206b4:	4b1c      	ldr	r3, [pc, #112]	@ (8020728 <SystemClock_Config+0xb8>)
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	4a1b      	ldr	r2, [pc, #108]	@ (8020728 <SystemClock_Config+0xb8>)
 80206ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80206be:	6013      	str	r3, [r2, #0]
 80206c0:	4b19      	ldr	r3, [pc, #100]	@ (8020728 <SystemClock_Config+0xb8>)
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80206c8:	607b      	str	r3, [r7, #4]
 80206ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80206cc:	2302      	movs	r3, #2
 80206ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80206d0:	2301      	movs	r3, #1
 80206d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80206d4:	2310      	movs	r3, #16
 80206d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80206d8:	2300      	movs	r3, #0
 80206da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80206dc:	f107 0320 	add.w	r3, r7, #32
 80206e0:	4618      	mov	r0, r3
 80206e2:	f001 fddf 	bl	80222a4 <HAL_RCC_OscConfig>
 80206e6:	4603      	mov	r3, r0
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d001      	beq.n	80206f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80206ec:	f000 fa96 	bl	8020c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80206f0:	230f      	movs	r3, #15
 80206f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80206f4:	2300      	movs	r3, #0
 80206f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80206f8:	2300      	movs	r3, #0
 80206fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80206fc:	2300      	movs	r3, #0
 80206fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020700:	2300      	movs	r3, #0
 8020702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8020704:	f107 030c 	add.w	r3, r7, #12
 8020708:	2100      	movs	r1, #0
 802070a:	4618      	mov	r0, r3
 802070c:	f002 f842 	bl	8022794 <HAL_RCC_ClockConfig>
 8020710:	4603      	mov	r3, r0
 8020712:	2b00      	cmp	r3, #0
 8020714:	d001      	beq.n	802071a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8020716:	f000 fa81 	bl	8020c1c <Error_Handler>
  }
}
 802071a:	bf00      	nop
 802071c:	3750      	adds	r7, #80	@ 0x50
 802071e:	46bd      	mov	sp, r7
 8020720:	bd80      	pop	{r7, pc}
 8020722:	bf00      	nop
 8020724:	40023800 	.word	0x40023800
 8020728:	40007000 	.word	0x40007000

0802072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 802072c:	b580      	push	{r7, lr}
 802072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8020730:	4b11      	ldr	r3, [pc, #68]	@ (8020778 <MX_USART2_UART_Init+0x4c>)
 8020732:	4a12      	ldr	r2, [pc, #72]	@ (802077c <MX_USART2_UART_Init+0x50>)
 8020734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8020736:	4b10      	ldr	r3, [pc, #64]	@ (8020778 <MX_USART2_UART_Init+0x4c>)
 8020738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 802073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802073e:	4b0e      	ldr	r3, [pc, #56]	@ (8020778 <MX_USART2_UART_Init+0x4c>)
 8020740:	2200      	movs	r2, #0
 8020742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8020744:	4b0c      	ldr	r3, [pc, #48]	@ (8020778 <MX_USART2_UART_Init+0x4c>)
 8020746:	2200      	movs	r2, #0
 8020748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802074a:	4b0b      	ldr	r3, [pc, #44]	@ (8020778 <MX_USART2_UART_Init+0x4c>)
 802074c:	2200      	movs	r2, #0
 802074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8020750:	4b09      	ldr	r3, [pc, #36]	@ (8020778 <MX_USART2_UART_Init+0x4c>)
 8020752:	220c      	movs	r2, #12
 8020754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020756:	4b08      	ldr	r3, [pc, #32]	@ (8020778 <MX_USART2_UART_Init+0x4c>)
 8020758:	2200      	movs	r2, #0
 802075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802075c:	4b06      	ldr	r3, [pc, #24]	@ (8020778 <MX_USART2_UART_Init+0x4c>)
 802075e:	2200      	movs	r2, #0
 8020760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8020762:	4805      	ldr	r0, [pc, #20]	@ (8020778 <MX_USART2_UART_Init+0x4c>)
 8020764:	f002 f9f6 	bl	8022b54 <HAL_UART_Init>
 8020768:	4603      	mov	r3, r0
 802076a:	2b00      	cmp	r3, #0
 802076c:	d001      	beq.n	8020772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 802076e:	f000 fa55 	bl	8020c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8020772:	bf00      	nop
 8020774:	bd80      	pop	{r7, pc}
 8020776:	bf00      	nop
 8020778:	2000007c 	.word	0x2000007c
 802077c:	40004400 	.word	0x40004400

08020780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8020780:	b580      	push	{r7, lr}
 8020782:	b082      	sub	sp, #8
 8020784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020786:	2300      	movs	r3, #0
 8020788:	607b      	str	r3, [r7, #4]
 802078a:	4b0c      	ldr	r3, [pc, #48]	@ (80207bc <MX_DMA_Init+0x3c>)
 802078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802078e:	4a0b      	ldr	r2, [pc, #44]	@ (80207bc <MX_DMA_Init+0x3c>)
 8020790:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8020794:	6313      	str	r3, [r2, #48]	@ 0x30
 8020796:	4b09      	ldr	r3, [pc, #36]	@ (80207bc <MX_DMA_Init+0x3c>)
 8020798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802079a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 802079e:	607b      	str	r3, [r7, #4]
 80207a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80207a2:	2200      	movs	r2, #0
 80207a4:	2105      	movs	r1, #5
 80207a6:	2010      	movs	r0, #16
 80207a8:	f000 fceb 	bl	8021182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80207ac:	2010      	movs	r0, #16
 80207ae:	f000 fd04 	bl	80211ba <HAL_NVIC_EnableIRQ>

}
 80207b2:	bf00      	nop
 80207b4:	3708      	adds	r7, #8
 80207b6:	46bd      	mov	sp, r7
 80207b8:	bd80      	pop	{r7, pc}
 80207ba:	bf00      	nop
 80207bc:	40023800 	.word	0x40023800

080207c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80207c0:	b580      	push	{r7, lr}
 80207c2:	b088      	sub	sp, #32
 80207c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80207c6:	f107 030c 	add.w	r3, r7, #12
 80207ca:	2200      	movs	r2, #0
 80207cc:	601a      	str	r2, [r3, #0]
 80207ce:	605a      	str	r2, [r3, #4]
 80207d0:	609a      	str	r2, [r3, #8]
 80207d2:	60da      	str	r2, [r3, #12]
 80207d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80207d6:	2300      	movs	r3, #0
 80207d8:	60bb      	str	r3, [r7, #8]
 80207da:	4b19      	ldr	r3, [pc, #100]	@ (8020840 <MX_GPIO_Init+0x80>)
 80207dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80207de:	4a18      	ldr	r2, [pc, #96]	@ (8020840 <MX_GPIO_Init+0x80>)
 80207e0:	f043 0301 	orr.w	r3, r3, #1
 80207e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80207e6:	4b16      	ldr	r3, [pc, #88]	@ (8020840 <MX_GPIO_Init+0x80>)
 80207e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80207ea:	f003 0301 	and.w	r3, r3, #1
 80207ee:	60bb      	str	r3, [r7, #8]
 80207f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80207f2:	2300      	movs	r3, #0
 80207f4:	607b      	str	r3, [r7, #4]
 80207f6:	4b12      	ldr	r3, [pc, #72]	@ (8020840 <MX_GPIO_Init+0x80>)
 80207f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80207fa:	4a11      	ldr	r2, [pc, #68]	@ (8020840 <MX_GPIO_Init+0x80>)
 80207fc:	f043 0308 	orr.w	r3, r3, #8
 8020800:	6313      	str	r3, [r2, #48]	@ 0x30
 8020802:	4b0f      	ldr	r3, [pc, #60]	@ (8020840 <MX_GPIO_Init+0x80>)
 8020804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020806:	f003 0308 	and.w	r3, r3, #8
 802080a:	607b      	str	r3, [r7, #4]
 802080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 802080e:	2200      	movs	r2, #0
 8020810:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8020814:	480b      	ldr	r0, [pc, #44]	@ (8020844 <MX_GPIO_Init+0x84>)
 8020816:	f001 fd2b 	bl	8022270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 802081a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 802081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020820:	2301      	movs	r3, #1
 8020822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020824:	2300      	movs	r3, #0
 8020826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020828:	2300      	movs	r3, #0
 802082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802082c:	f107 030c 	add.w	r3, r7, #12
 8020830:	4619      	mov	r1, r3
 8020832:	4804      	ldr	r0, [pc, #16]	@ (8020844 <MX_GPIO_Init+0x84>)
 8020834:	f001 fb98 	bl	8021f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8020838:	bf00      	nop
 802083a:	3720      	adds	r7, #32
 802083c:	46bd      	mov	sp, r7
 802083e:	bd80      	pop	{r7, pc}
 8020840:	40023800 	.word	0x40023800
 8020844:	40020c00 	.word	0x40020c00

08020848 <blinkled01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blinkled01 */
void blinkled01(void *argument)
{
 8020848:	b580      	push	{r7, lr}
 802084a:	b082      	sub	sp, #8
 802084c:	af00      	add	r7, sp, #0
 802084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8020850:	2201      	movs	r2, #1
 8020852:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8020856:	4809      	ldr	r0, [pc, #36]	@ (802087c <blinkled01+0x34>)
 8020858:	f001 fd0a 	bl	8022270 <HAL_GPIO_WritePin>
    osDelay(1000);
 802085c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8020860:	f003 f918 	bl	8023a94 <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8020864:	2200      	movs	r2, #0
 8020866:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 802086a:	4804      	ldr	r0, [pc, #16]	@ (802087c <blinkled01+0x34>)
 802086c:	f001 fd00 	bl	8022270 <HAL_GPIO_WritePin>
    osDelay(1000);
 8020870:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8020874:	f003 f90e 	bl	8023a94 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8020878:	bf00      	nop
 802087a:	e7e9      	b.n	8020850 <blinkled01+0x8>
 802087c:	40020c00 	.word	0x40020c00

08020880 <blinkled02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinkled02 */
void blinkled02(void *argument)
{
 8020880:	b580      	push	{r7, lr}
 8020882:	b082      	sub	sp, #8
 8020884:	af00      	add	r7, sp, #0
 8020886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkled02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8020888:	2201      	movs	r2, #1
 802088a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 802088e:	4809      	ldr	r0, [pc, #36]	@ (80208b4 <blinkled02+0x34>)
 8020890:	f001 fcee 	bl	8022270 <HAL_GPIO_WritePin>
	    osDelay(2000);
 8020894:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8020898:	f003 f8fc 	bl	8023a94 <osDelay>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 802089c:	2200      	movs	r2, #0
 802089e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80208a2:	4804      	ldr	r0, [pc, #16]	@ (80208b4 <blinkled02+0x34>)
 80208a4:	f001 fce4 	bl	8022270 <HAL_GPIO_WritePin>
	    osDelay(2000);
 80208a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80208ac:	f003 f8f2 	bl	8023a94 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80208b0:	bf00      	nop
 80208b2:	e7e9      	b.n	8020888 <blinkled02+0x8>
 80208b4:	40020c00 	.word	0x40020c00

080208b8 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN Header_UART */
int fw_recv_done = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80208b8:	b480      	push	{r7}
 80208ba:	b083      	sub	sp, #12
 80208bc:	af00      	add	r7, sp, #0
 80208be:	6078      	str	r0, [r7, #4]
	fw_recv_done = 1;
 80208c0:	4b04      	ldr	r3, [pc, #16]	@ (80208d4 <HAL_UART_RxCpltCallback+0x1c>)
 80208c2:	2201      	movs	r2, #1
 80208c4:	601a      	str	r2, [r3, #0]
}
 80208c6:	bf00      	nop
 80208c8:	370c      	adds	r7, #12
 80208ca:	46bd      	mov	sp, r7
 80208cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208d0:	4770      	bx	lr
 80208d2:	bf00      	nop
 80208d4:	20000130 	.word	0x20000130

080208d8 <UART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART */
void UART(void *argument)
{
 80208d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80208dc:	b0c4      	sub	sp, #272	@ 0x110
 80208de:	af00      	add	r7, sp, #0
 80208e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80208e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80208e8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN UART */
  /* Infinite loop */
	uint8_t* msg = (uint8_t*)"PROGRAM V21 \r\n";
 80208ea:	4bbc      	ldr	r3, [pc, #752]	@ (8020bdc <UART+0x304>)
 80208ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t* recv_buff[32] = {0};
 80208f0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80208f4:	2280      	movs	r2, #128	@ 0x80
 80208f6:	2100      	movs	r1, #0
 80208f8:	4618      	mov	r0, r3
 80208fa:	f005 fe6f 	bl	80265dc <memset>
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), HAL_MAX_DELAY);
 80208fe:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8020902:	f7ff fc6d 	bl	80201e0 <strlen>
 8020906:	4603      	mov	r3, r0
 8020908:	b29a      	uxth	r2, r3
 802090a:	f04f 33ff 	mov.w	r3, #4294967295
 802090e:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8020912:	48b3      	ldr	r0, [pc, #716]	@ (8020be0 <UART+0x308>)
 8020914:	f002 f96e 	bl	8022bf4 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart2, recv_buff, sizeof(recv_buff));
 8020918:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 802091c:	2280      	movs	r2, #128	@ 0x80
 802091e:	4619      	mov	r1, r3
 8020920:	48af      	ldr	r0, [pc, #700]	@ (8020be0 <UART+0x308>)
 8020922:	f002 f9f2 	bl	8022d0a <HAL_UART_Receive_DMA>

  for(;;)
  {
	  if(strstr((char*)recv_buff,"\r\n") != 0)
 8020926:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 802092a:	49ae      	ldr	r1, [pc, #696]	@ (8020be4 <UART+0x30c>)
 802092c:	4618      	mov	r0, r3
 802092e:	f005 fe5d 	bl	80265ec <strstr>
 8020932:	4603      	mov	r3, r0
 8020934:	2b00      	cmp	r3, #0
 8020936:	f000 814d 	beq.w	8020bd4 <UART+0x2fc>
	  {
		 HAL_UART_DMAStop(&huart2);
 802093a:	48a9      	ldr	r0, [pc, #676]	@ (8020be0 <UART+0x308>)
 802093c:	f002 fa0a 	bl	8022d54 <HAL_UART_DMAStop>
		 if(strstr((char*)recv_buff,"\r\n")!=0)
 8020940:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8020944:	49a7      	ldr	r1, [pc, #668]	@ (8020be4 <UART+0x30c>)
 8020946:	4618      	mov	r0, r3
 8020948:	f005 fe50 	bl	80265ec <strstr>
 802094c:	4603      	mov	r3, r0
 802094e:	2b00      	cmp	r3, #0
 8020950:	f000 8140 	beq.w	8020bd4 <UART+0x2fc>
		 {
			 if(strstr(recv_buff,"update")!=0)
 8020954:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8020958:	49a3      	ldr	r1, [pc, #652]	@ (8020be8 <UART+0x310>)
 802095a:	4618      	mov	r0, r3
 802095c:	f005 fe46 	bl	80265ec <strstr>
 8020960:	4603      	mov	r3, r0
 8020962:	2b00      	cmp	r3, #0
 8020964:	f000 8118 	beq.w	8020b98 <UART+0x2c0>
			 {
				 int new_fw_size = 0;
 8020968:	2300      	movs	r3, #0
 802096a:	673b      	str	r3, [r7, #112]	@ 0x70
				 sscanf(recv_buff,"update =%d",&new_fw_size);
 802096c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020970:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8020974:	499d      	ldr	r1, [pc, #628]	@ (8020bec <UART+0x314>)
 8020976:	4618      	mov	r0, r3
 8020978:	f005 fe04 	bl	8026584 <siscanf>
				 char msg_1[32] = {0};
 802097c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8020980:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8020984:	2200      	movs	r2, #0
 8020986:	601a      	str	r2, [r3, #0]
 8020988:	3304      	adds	r3, #4
 802098a:	2200      	movs	r2, #0
 802098c:	601a      	str	r2, [r3, #0]
 802098e:	605a      	str	r2, [r3, #4]
 8020990:	609a      	str	r2, [r3, #8]
 8020992:	60da      	str	r2, [r3, #12]
 8020994:	611a      	str	r2, [r3, #16]
 8020996:	615a      	str	r2, [r3, #20]
 8020998:	619a      	str	r2, [r3, #24]
				 sprintf(msg_1,"Plese send %d byte data:\r\n" , new_fw_size);
 802099a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 802099c:	f107 0310 	add.w	r3, r7, #16
 80209a0:	4993      	ldr	r1, [pc, #588]	@ (8020bf0 <UART+0x318>)
 80209a2:	4618      	mov	r0, r3
 80209a4:	f005 fdce 	bl	8026544 <siprintf>
				 msg = (uint8_t*)msg_1;
 80209a8:	f107 0310 	add.w	r3, r7, #16
 80209ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
				 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), HAL_MAX_DELAY);
 80209b0:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80209b4:	f7ff fc14 	bl	80201e0 <strlen>
 80209b8:	4603      	mov	r3, r0
 80209ba:	b29a      	uxth	r2, r3
 80209bc:	f04f 33ff 	mov.w	r3, #4294967295
 80209c0:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 80209c4:	4886      	ldr	r0, [pc, #536]	@ (8020be0 <UART+0x308>)
 80209c6:	f002 f915 	bl	8022bf4 <HAL_UART_Transmit>
				 uint8_t* new_fw = (uint8_t*)malloc(new_fw_size);
 80209ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80209cc:	4618      	mov	r0, r3
 80209ce:	f005 fd03 	bl	80263d8 <malloc>
 80209d2:	4603      	mov	r3, r0
 80209d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
				 HAL_UART_Receive_DMA(&huart2, new_fw, new_fw_size);
 80209d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80209da:	b29b      	uxth	r3, r3
 80209dc:	461a      	mov	r2, r3
 80209de:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 80209e2:	487f      	ldr	r0, [pc, #508]	@ (8020be0 <UART+0x308>)
 80209e4:	f002 f991 	bl	8022d0a <HAL_UART_Receive_DMA>
				 while(fw_recv_done != 1)
 80209e8:	e002      	b.n	80209f0 <UART+0x118>
					 {
						 osDelay(1);
 80209ea:	2001      	movs	r0, #1
 80209ec:	f003 f852 	bl	8023a94 <osDelay>
				 while(fw_recv_done != 1)
 80209f0:	4b80      	ldr	r3, [pc, #512]	@ (8020bf4 <UART+0x31c>)
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	2b01      	cmp	r3, #1
 80209f6:	d1f8      	bne.n	80209ea <UART+0x112>

					 }
				 HAL_FLASH_Unlock();
 80209f8:	f001 f832 	bl	8021a60 <HAL_FLASH_Unlock>
				 FLASH_EraseInitTypeDef sector6 = {
 80209fc:	4b7e      	ldr	r3, [pc, #504]	@ (8020bf8 <UART+0x320>)
 80209fe:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8020a02:	461d      	mov	r5, r3
 8020a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020a08:	682b      	ldr	r3, [r5, #0]
 8020a0a:	6023      	str	r3, [r4, #0]
						 .Banks = FLASH_BANK_1,
						 .Sector = FLASH_SECTOR_6,
						 .NbSectors = 1,
						 .VoltageRange = FLASH_VOLTAGE_RANGE_1,
				 };
				 uint32_t* sector_err = 0;
 8020a0c:	2300      	movs	r3, #0
 8020a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
				 HAL_FLASHEx_Erase(&sector6, &sector_err);
 8020a10:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8020a14:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8020a18:	4611      	mov	r1, r2
 8020a1a:	4618      	mov	r0, r3
 8020a1c:	f001 f982 	bl	8021d24 <HAL_FLASHEx_Erase>
				 for(int i = 0; i < new_fw_size; i++)
 8020a20:	2300      	movs	r3, #0
 8020a22:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8020a26:	e01a      	b.n	8020a5e <UART+0x186>
				 {
					 HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08040000 +i, new_fw[i]);
 8020a28:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8020a2c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8020a30:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8020a34:	4619      	mov	r1, r3
 8020a36:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8020a3a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8020a3e:	4413      	add	r3, r2
 8020a40:	781b      	ldrb	r3, [r3, #0]
 8020a42:	b2db      	uxtb	r3, r3
 8020a44:	2200      	movs	r2, #0
 8020a46:	4698      	mov	r8, r3
 8020a48:	4691      	mov	r9, r2
 8020a4a:	4642      	mov	r2, r8
 8020a4c:	464b      	mov	r3, r9
 8020a4e:	2000      	movs	r0, #0
 8020a50:	f000 ffb2 	bl	80219b8 <HAL_FLASH_Program>
				 for(int i = 0; i < new_fw_size; i++)
 8020a54:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8020a58:	3301      	adds	r3, #1
 8020a5a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8020a5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020a60:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8020a64:	429a      	cmp	r2, r3
 8020a66:	dbdf      	blt.n	8020a28 <UART+0x150>
				 }
				 msg = (uint8_t*)"Dowload new success\r\n";
 8020a68:	4b64      	ldr	r3, [pc, #400]	@ (8020bfc <UART+0x324>)
 8020a6a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
				 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), HAL_MAX_DELAY);
 8020a6e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8020a72:	f7ff fbb5 	bl	80201e0 <strlen>
 8020a76:	4603      	mov	r3, r0
 8020a78:	b29a      	uxth	r2, r3
 8020a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8020a7e:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8020a82:	4857      	ldr	r0, [pc, #348]	@ (8020be0 <UART+0x308>)
 8020a84:	f002 f8b6 	bl	8022bf4 <HAL_UART_Transmit>
				 FLASH_EraseInitTypeDef sector7 = {
 8020a88:	4b5d      	ldr	r3, [pc, #372]	@ (8020c00 <UART+0x328>)
 8020a8a:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8020a8e:	461d      	mov	r5, r3
 8020a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020a94:	682b      	ldr	r3, [r5, #0]
 8020a96:	6023      	str	r3, [r4, #0]
								 .Banks = FLASH_BANK_1,
								 .Sector = FLASH_SECTOR_7,
								 .NbSectors = 1,
								 .VoltageRange = FLASH_VOLTAGE_RANGE_1,
						 };
						 HAL_FLASHEx_Erase(&sector7, &sector_err);
 8020a98:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8020a9c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8020aa0:	4611      	mov	r1, r2
 8020aa2:	4618      	mov	r0, r3
 8020aa4:	f001 f93e 	bl	8021d24 <HAL_FLASHEx_Erase>
						 char* old_fw = (char*)0x08020000;
 8020aa8:	4b56      	ldr	r3, [pc, #344]	@ (8020c04 <UART+0x32c>)
 8020aaa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
						 for(int i = 0; i < 131072; i++)
 8020aae:	2300      	movs	r3, #0
 8020ab0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8020ab4:	e01a      	b.n	8020aec <UART+0x214>
						 {
							 HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08060000 +i, old_fw[i]);
 8020ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8020aba:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8020abe:	f503 23c0 	add.w	r3, r3, #393216	@ 0x60000
 8020ac2:	4619      	mov	r1, r3
 8020ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8020ac8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8020acc:	4413      	add	r3, r2
 8020ace:	781b      	ldrb	r3, [r3, #0]
 8020ad0:	b2db      	uxtb	r3, r3
 8020ad2:	2200      	movs	r2, #0
 8020ad4:	469a      	mov	sl, r3
 8020ad6:	4693      	mov	fp, r2
 8020ad8:	4652      	mov	r2, sl
 8020ada:	465b      	mov	r3, fp
 8020adc:	2000      	movs	r0, #0
 8020ade:	f000 ff6b 	bl	80219b8 <HAL_FLASH_Program>
						 for(int i = 0; i < 131072; i++)
 8020ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8020ae6:	3301      	adds	r3, #1
 8020ae8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8020aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8020af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020af4:	dbdf      	blt.n	8020ab6 <UART+0x1de>
						 }
						 msg = (uint8_t*)"Backup...\r\n";
 8020af6:	4b44      	ldr	r3, [pc, #272]	@ (8020c08 <UART+0x330>)
 8020af8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
						 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), HAL_MAX_DELAY);
 8020afc:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8020b00:	f7ff fb6e 	bl	80201e0 <strlen>
 8020b04:	4603      	mov	r3, r0
 8020b06:	b29a      	uxth	r2, r3
 8020b08:	f04f 33ff 	mov.w	r3, #4294967295
 8020b0c:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8020b10:	4833      	ldr	r0, [pc, #204]	@ (8020be0 <UART+0x308>)
 8020b12:	f002 f86f 	bl	8022bf4 <HAL_UART_Transmit>
						FLASH_EraseInitTypeDef sector3 = {
 8020b16:	4b3d      	ldr	r3, [pc, #244]	@ (8020c0c <UART+0x334>)
 8020b18:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8020b1c:	461d      	mov	r5, r3
 8020b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020b22:	682b      	ldr	r3, [r5, #0]
 8020b24:	6023      	str	r3, [r4, #0]
										 .Banks = FLASH_BANK_1,
										 .Sector = FLASH_SECTOR_3,
										 .NbSectors = 1,
										 .VoltageRange = FLASH_VOLTAGE_RANGE_1,
								 };
								 HAL_FLASHEx_Erase(&sector3, &sector_err);
 8020b26:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8020b2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8020b2e:	4611      	mov	r1, r2
 8020b30:	4618      	mov	r0, r3
 8020b32:	f001 f8f7 	bl	8021d24 <HAL_FLASHEx_Erase>
								 char* new_interrup = (char*)"new_fw";
 8020b36:	4b36      	ldr	r3, [pc, #216]	@ (8020c10 <UART+0x338>)
 8020b38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
								 for(int i = 0; i < strlen(new_interrup); i++)
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8020b42:	e01a      	b.n	8020b7a <UART+0x2a2>
								 {
									 HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x0800C000 +i, new_interrup[i]);
 8020b44:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8020b48:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8020b4c:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8020b50:	4619      	mov	r1, r3
 8020b52:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8020b56:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8020b5a:	4413      	add	r3, r2
 8020b5c:	781b      	ldrb	r3, [r3, #0]
 8020b5e:	b2db      	uxtb	r3, r3
 8020b60:	2200      	movs	r2, #0
 8020b62:	603b      	str	r3, [r7, #0]
 8020b64:	607a      	str	r2, [r7, #4]
 8020b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020b6a:	2000      	movs	r0, #0
 8020b6c:	f000 ff24 	bl	80219b8 <HAL_FLASH_Program>
								 for(int i = 0; i < strlen(new_interrup); i++)
 8020b70:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8020b74:	3301      	adds	r3, #1
 8020b76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8020b7a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8020b7e:	f7ff fb2f 	bl	80201e0 <strlen>
 8020b82:	4602      	mov	r2, r0
 8020b84:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8020b88:	429a      	cmp	r2, r3
 8020b8a:	d8db      	bhi.n	8020b44 <UART+0x26c>
								 }
								 msg = (uint8_t*)"Done!\r\n";
 8020b8c:	4b21      	ldr	r3, [pc, #132]	@ (8020c14 <UART+0x33c>)
 8020b8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
				 				 HAL_NVIC_SystemReset();
 8020b92:	f000 fb20 	bl	80211d6 <HAL_NVIC_SystemReset>
 8020b96:	e002      	b.n	8020b9e <UART+0x2c6>

			  }else {
				  msg = (uint8_t*)"Command not found\r\n";
 8020b98:	4b1f      	ldr	r3, [pc, #124]	@ (8020c18 <UART+0x340>)
 8020b9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			  }
			  HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), HAL_MAX_DELAY);
 8020b9e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8020ba2:	f7ff fb1d 	bl	80201e0 <strlen>
 8020ba6:	4603      	mov	r3, r0
 8020ba8:	b29a      	uxth	r2, r3
 8020baa:	f04f 33ff 	mov.w	r3, #4294967295
 8020bae:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8020bb2:	480b      	ldr	r0, [pc, #44]	@ (8020be0 <UART+0x308>)
 8020bb4:	f002 f81e 	bl	8022bf4 <HAL_UART_Transmit>
			  memset(recv_buff, 0 , sizeof(recv_buff));
 8020bb8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8020bbc:	2280      	movs	r2, #128	@ 0x80
 8020bbe:	2100      	movs	r1, #0
 8020bc0:	4618      	mov	r0, r3
 8020bc2:	f005 fd0b 	bl	80265dc <memset>
			  HAL_UART_Receive_DMA(&huart2, recv_buff, sizeof(recv_buff));
 8020bc6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8020bca:	2280      	movs	r2, #128	@ 0x80
 8020bcc:	4619      	mov	r1, r3
 8020bce:	4804      	ldr	r0, [pc, #16]	@ (8020be0 <UART+0x308>)
 8020bd0:	f002 f89b 	bl	8022d0a <HAL_UART_Receive_DMA>
			  }
	  }
    osDelay(1);
 8020bd4:	2001      	movs	r0, #1
 8020bd6:	f002 ff5d 	bl	8023a94 <osDelay>
	  if(strstr((char*)recv_buff,"\r\n") != 0)
 8020bda:	e6a4      	b.n	8020926 <UART+0x4e>
 8020bdc:	080276f0 	.word	0x080276f0
 8020be0:	2000007c 	.word	0x2000007c
 8020be4:	08027700 	.word	0x08027700
 8020be8:	08027704 	.word	0x08027704
 8020bec:	0802770c 	.word	0x0802770c
 8020bf0:	08027718 	.word	0x08027718
 8020bf4:	20000130 	.word	0x20000130
 8020bf8:	0802777c 	.word	0x0802777c
 8020bfc:	08027734 	.word	0x08027734
 8020c00:	08027790 	.word	0x08027790
 8020c04:	08020000 	.word	0x08020000
 8020c08:	0802774c 	.word	0x0802774c
 8020c0c:	080276dc 	.word	0x080276dc
 8020c10:	08027758 	.word	0x08027758
 8020c14:	08027760 	.word	0x08027760
 8020c18:	08027768 	.word	0x08027768

08020c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020c1c:	b480      	push	{r7}
 8020c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020c20:	b672      	cpsid	i
}
 8020c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020c24:	bf00      	nop
 8020c26:	e7fd      	b.n	8020c24 <Error_Handler+0x8>

08020c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020c28:	b580      	push	{r7, lr}
 8020c2a:	b082      	sub	sp, #8
 8020c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020c2e:	2300      	movs	r3, #0
 8020c30:	607b      	str	r3, [r7, #4]
 8020c32:	4b12      	ldr	r3, [pc, #72]	@ (8020c7c <HAL_MspInit+0x54>)
 8020c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020c36:	4a11      	ldr	r2, [pc, #68]	@ (8020c7c <HAL_MspInit+0x54>)
 8020c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8020c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8020c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8020c7c <HAL_MspInit+0x54>)
 8020c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8020c46:	607b      	str	r3, [r7, #4]
 8020c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020c4a:	2300      	movs	r3, #0
 8020c4c:	603b      	str	r3, [r7, #0]
 8020c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8020c7c <HAL_MspInit+0x54>)
 8020c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020c52:	4a0a      	ldr	r2, [pc, #40]	@ (8020c7c <HAL_MspInit+0x54>)
 8020c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8020c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8020c5a:	4b08      	ldr	r3, [pc, #32]	@ (8020c7c <HAL_MspInit+0x54>)
 8020c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020c62:	603b      	str	r3, [r7, #0]
 8020c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8020c66:	2200      	movs	r2, #0
 8020c68:	210f      	movs	r1, #15
 8020c6a:	f06f 0001 	mvn.w	r0, #1
 8020c6e:	f000 fa88 	bl	8021182 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020c72:	bf00      	nop
 8020c74:	3708      	adds	r7, #8
 8020c76:	46bd      	mov	sp, r7
 8020c78:	bd80      	pop	{r7, pc}
 8020c7a:	bf00      	nop
 8020c7c:	40023800 	.word	0x40023800

08020c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8020c80:	b580      	push	{r7, lr}
 8020c82:	b08a      	sub	sp, #40	@ 0x28
 8020c84:	af00      	add	r7, sp, #0
 8020c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c88:	f107 0314 	add.w	r3, r7, #20
 8020c8c:	2200      	movs	r2, #0
 8020c8e:	601a      	str	r2, [r3, #0]
 8020c90:	605a      	str	r2, [r3, #4]
 8020c92:	609a      	str	r2, [r3, #8]
 8020c94:	60da      	str	r2, [r3, #12]
 8020c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	4a30      	ldr	r2, [pc, #192]	@ (8020d60 <HAL_UART_MspInit+0xe0>)
 8020c9e:	4293      	cmp	r3, r2
 8020ca0:	d159      	bne.n	8020d56 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8020ca2:	2300      	movs	r3, #0
 8020ca4:	613b      	str	r3, [r7, #16]
 8020ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8020d64 <HAL_UART_MspInit+0xe4>)
 8020ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020caa:	4a2e      	ldr	r2, [pc, #184]	@ (8020d64 <HAL_UART_MspInit+0xe4>)
 8020cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8020cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8020d64 <HAL_UART_MspInit+0xe4>)
 8020cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020cba:	613b      	str	r3, [r7, #16]
 8020cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020cbe:	2300      	movs	r3, #0
 8020cc0:	60fb      	str	r3, [r7, #12]
 8020cc2:	4b28      	ldr	r3, [pc, #160]	@ (8020d64 <HAL_UART_MspInit+0xe4>)
 8020cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020cc6:	4a27      	ldr	r2, [pc, #156]	@ (8020d64 <HAL_UART_MspInit+0xe4>)
 8020cc8:	f043 0301 	orr.w	r3, r3, #1
 8020ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8020cce:	4b25      	ldr	r3, [pc, #148]	@ (8020d64 <HAL_UART_MspInit+0xe4>)
 8020cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020cd2:	f003 0301 	and.w	r3, r3, #1
 8020cd6:	60fb      	str	r3, [r7, #12]
 8020cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8020cda:	230c      	movs	r3, #12
 8020cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020cde:	2302      	movs	r3, #2
 8020ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ce2:	2300      	movs	r3, #0
 8020ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020ce6:	2303      	movs	r3, #3
 8020ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8020cea:	2307      	movs	r3, #7
 8020cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020cee:	f107 0314 	add.w	r3, r7, #20
 8020cf2:	4619      	mov	r1, r3
 8020cf4:	481c      	ldr	r0, [pc, #112]	@ (8020d68 <HAL_UART_MspInit+0xe8>)
 8020cf6:	f001 f937 	bl	8021f68 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8020cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8020d70 <HAL_UART_MspInit+0xf0>)
 8020cfe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8020d00:	4b1a      	ldr	r3, [pc, #104]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d02:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8020d06:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8020d08:	4b18      	ldr	r3, [pc, #96]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d0a:	2200      	movs	r2, #0
 8020d0c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8020d0e:	4b17      	ldr	r3, [pc, #92]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d10:	2200      	movs	r2, #0
 8020d12:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8020d14:	4b15      	ldr	r3, [pc, #84]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8020d1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8020d1c:	4b13      	ldr	r3, [pc, #76]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d1e:	2200      	movs	r2, #0
 8020d20:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8020d22:	4b12      	ldr	r3, [pc, #72]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d24:	2200      	movs	r2, #0
 8020d26:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8020d28:	4b10      	ldr	r3, [pc, #64]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d2a:	2200      	movs	r2, #0
 8020d2c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8020d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d30:	2200      	movs	r2, #0
 8020d32:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8020d34:	4b0d      	ldr	r3, [pc, #52]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d36:	2200      	movs	r2, #0
 8020d38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8020d3a:	480c      	ldr	r0, [pc, #48]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d3c:	f000 fa5c 	bl	80211f8 <HAL_DMA_Init>
 8020d40:	4603      	mov	r3, r0
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d001      	beq.n	8020d4a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8020d46:	f7ff ff69 	bl	8020c1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	4a07      	ldr	r2, [pc, #28]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8020d50:	4a06      	ldr	r2, [pc, #24]	@ (8020d6c <HAL_UART_MspInit+0xec>)
 8020d52:	687b      	ldr	r3, [r7, #4]
 8020d54:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8020d56:	bf00      	nop
 8020d58:	3728      	adds	r7, #40	@ 0x28
 8020d5a:	46bd      	mov	sp, r7
 8020d5c:	bd80      	pop	{r7, pc}
 8020d5e:	bf00      	nop
 8020d60:	40004400 	.word	0x40004400
 8020d64:	40023800 	.word	0x40023800
 8020d68:	40020000 	.word	0x40020000
 8020d6c:	200000c4 	.word	0x200000c4
 8020d70:	40026088 	.word	0x40026088

08020d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020d74:	b480      	push	{r7}
 8020d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8020d78:	bf00      	nop
 8020d7a:	e7fd      	b.n	8020d78 <NMI_Handler+0x4>

08020d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020d7c:	b480      	push	{r7}
 8020d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020d80:	bf00      	nop
 8020d82:	e7fd      	b.n	8020d80 <HardFault_Handler+0x4>

08020d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020d84:	b480      	push	{r7}
 8020d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020d88:	bf00      	nop
 8020d8a:	e7fd      	b.n	8020d88 <MemManage_Handler+0x4>

08020d8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020d8c:	b480      	push	{r7}
 8020d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020d90:	bf00      	nop
 8020d92:	e7fd      	b.n	8020d90 <BusFault_Handler+0x4>

08020d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020d94:	b480      	push	{r7}
 8020d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020d98:	bf00      	nop
 8020d9a:	e7fd      	b.n	8020d98 <UsageFault_Handler+0x4>

08020d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020d9c:	b480      	push	{r7}
 8020d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020da0:	bf00      	nop
 8020da2:	46bd      	mov	sp, r7
 8020da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020da8:	4770      	bx	lr

08020daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020daa:	b580      	push	{r7, lr}
 8020dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020dae:	f000 f8d7 	bl	8020f60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8020db2:	f004 fa97 	bl	80252e4 <xTaskGetSchedulerState>
 8020db6:	4603      	mov	r3, r0
 8020db8:	2b01      	cmp	r3, #1
 8020dba:	d001      	beq.n	8020dc0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8020dbc:	f005 f88c 	bl	8025ed8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020dc0:	bf00      	nop
 8020dc2:	bd80      	pop	{r7, pc}

08020dc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8020dc4:	b580      	push	{r7, lr}
 8020dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8020dc8:	4802      	ldr	r0, [pc, #8]	@ (8020dd4 <DMA1_Stream5_IRQHandler+0x10>)
 8020dca:	f000 fb8b 	bl	80214e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8020dce:	bf00      	nop
 8020dd0:	bd80      	pop	{r7, pc}
 8020dd2:	bf00      	nop
 8020dd4:	200000c4 	.word	0x200000c4

08020dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020dd8:	b580      	push	{r7, lr}
 8020dda:	b086      	sub	sp, #24
 8020ddc:	af00      	add	r7, sp, #0
 8020dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020de0:	4a14      	ldr	r2, [pc, #80]	@ (8020e34 <_sbrk+0x5c>)
 8020de2:	4b15      	ldr	r3, [pc, #84]	@ (8020e38 <_sbrk+0x60>)
 8020de4:	1ad3      	subs	r3, r2, r3
 8020de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8020de8:	697b      	ldr	r3, [r7, #20]
 8020dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020dec:	4b13      	ldr	r3, [pc, #76]	@ (8020e3c <_sbrk+0x64>)
 8020dee:	681b      	ldr	r3, [r3, #0]
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d102      	bne.n	8020dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020df4:	4b11      	ldr	r3, [pc, #68]	@ (8020e3c <_sbrk+0x64>)
 8020df6:	4a12      	ldr	r2, [pc, #72]	@ (8020e40 <_sbrk+0x68>)
 8020df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8020dfa:	4b10      	ldr	r3, [pc, #64]	@ (8020e3c <_sbrk+0x64>)
 8020dfc:	681a      	ldr	r2, [r3, #0]
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	4413      	add	r3, r2
 8020e02:	693a      	ldr	r2, [r7, #16]
 8020e04:	429a      	cmp	r2, r3
 8020e06:	d207      	bcs.n	8020e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8020e08:	f005 fc16 	bl	8026638 <__errno>
 8020e0c:	4603      	mov	r3, r0
 8020e0e:	220c      	movs	r2, #12
 8020e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020e12:	f04f 33ff 	mov.w	r3, #4294967295
 8020e16:	e009      	b.n	8020e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8020e18:	4b08      	ldr	r3, [pc, #32]	@ (8020e3c <_sbrk+0x64>)
 8020e1a:	681b      	ldr	r3, [r3, #0]
 8020e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020e1e:	4b07      	ldr	r3, [pc, #28]	@ (8020e3c <_sbrk+0x64>)
 8020e20:	681a      	ldr	r2, [r3, #0]
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	4413      	add	r3, r2
 8020e26:	4a05      	ldr	r2, [pc, #20]	@ (8020e3c <_sbrk+0x64>)
 8020e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8020e2a:	68fb      	ldr	r3, [r7, #12]
}
 8020e2c:	4618      	mov	r0, r3
 8020e2e:	3718      	adds	r7, #24
 8020e30:	46bd      	mov	sp, r7
 8020e32:	bd80      	pop	{r7, pc}
 8020e34:	20020000 	.word	0x20020000
 8020e38:	00000400 	.word	0x00000400
 8020e3c:	20000134 	.word	0x20000134
 8020e40:	20004bf8 	.word	0x20004bf8

08020e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020e44:	b480      	push	{r7}
 8020e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020e48:	4b06      	ldr	r3, [pc, #24]	@ (8020e64 <SystemInit+0x20>)
 8020e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020e4e:	4a05      	ldr	r2, [pc, #20]	@ (8020e64 <SystemInit+0x20>)
 8020e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8020e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020e58:	bf00      	nop
 8020e5a:	46bd      	mov	sp, r7
 8020e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e60:	4770      	bx	lr
 8020e62:	bf00      	nop
 8020e64:	e000ed00 	.word	0xe000ed00

08020e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8020e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8020ea0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8020e6c:	f7ff ffea 	bl	8020e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8020e70:	480c      	ldr	r0, [pc, #48]	@ (8020ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8020e72:	490d      	ldr	r1, [pc, #52]	@ (8020ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8020e74:	4a0d      	ldr	r2, [pc, #52]	@ (8020eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8020e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020e78:	e002      	b.n	8020e80 <LoopCopyDataInit>

08020e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020e7e:	3304      	adds	r3, #4

08020e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020e84:	d3f9      	bcc.n	8020e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020e86:	4a0a      	ldr	r2, [pc, #40]	@ (8020eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8020e88:	4c0a      	ldr	r4, [pc, #40]	@ (8020eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8020e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020e8c:	e001      	b.n	8020e92 <LoopFillZerobss>

08020e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020e90:	3204      	adds	r2, #4

08020e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020e94:	d3fb      	bcc.n	8020e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8020e96:	f005 fbd5 	bl	8026644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020e9a:	f7ff fb71 	bl	8020580 <main>
  bx  lr    
 8020e9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8020ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8020ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020ea8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8020eac:	080279b4 	.word	0x080279b4
  ldr r2, =_sbss
 8020eb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8020eb4:	20004bf4 	.word	0x20004bf4

08020eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020eb8:	e7fe      	b.n	8020eb8 <ADC_IRQHandler>
	...

08020ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020ebc:	b580      	push	{r7, lr}
 8020ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8020ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8020efc <HAL_Init+0x40>)
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8020efc <HAL_Init+0x40>)
 8020ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8020ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8020efc <HAL_Init+0x40>)
 8020ece:	681b      	ldr	r3, [r3, #0]
 8020ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8020efc <HAL_Init+0x40>)
 8020ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8020ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020ed8:	4b08      	ldr	r3, [pc, #32]	@ (8020efc <HAL_Init+0x40>)
 8020eda:	681b      	ldr	r3, [r3, #0]
 8020edc:	4a07      	ldr	r2, [pc, #28]	@ (8020efc <HAL_Init+0x40>)
 8020ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020ee4:	2003      	movs	r0, #3
 8020ee6:	f000 f941 	bl	802116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8020eea:	200f      	movs	r0, #15
 8020eec:	f000 f808 	bl	8020f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8020ef0:	f7ff fe9a 	bl	8020c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020ef4:	2300      	movs	r3, #0
}
 8020ef6:	4618      	mov	r0, r3
 8020ef8:	bd80      	pop	{r7, pc}
 8020efa:	bf00      	nop
 8020efc:	40023c00 	.word	0x40023c00

08020f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020f00:	b580      	push	{r7, lr}
 8020f02:	b082      	sub	sp, #8
 8020f04:	af00      	add	r7, sp, #0
 8020f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020f08:	4b12      	ldr	r3, [pc, #72]	@ (8020f54 <HAL_InitTick+0x54>)
 8020f0a:	681a      	ldr	r2, [r3, #0]
 8020f0c:	4b12      	ldr	r3, [pc, #72]	@ (8020f58 <HAL_InitTick+0x58>)
 8020f0e:	781b      	ldrb	r3, [r3, #0]
 8020f10:	4619      	mov	r1, r3
 8020f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8020f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8020f1e:	4618      	mov	r0, r3
 8020f20:	f000 f95d 	bl	80211de <HAL_SYSTICK_Config>
 8020f24:	4603      	mov	r3, r0
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	d001      	beq.n	8020f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020f2a:	2301      	movs	r3, #1
 8020f2c:	e00e      	b.n	8020f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	2b0f      	cmp	r3, #15
 8020f32:	d80a      	bhi.n	8020f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020f34:	2200      	movs	r2, #0
 8020f36:	6879      	ldr	r1, [r7, #4]
 8020f38:	f04f 30ff 	mov.w	r0, #4294967295
 8020f3c:	f000 f921 	bl	8021182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020f40:	4a06      	ldr	r2, [pc, #24]	@ (8020f5c <HAL_InitTick+0x5c>)
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020f46:	2300      	movs	r3, #0
 8020f48:	e000      	b.n	8020f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020f4a:	2301      	movs	r3, #1
}
 8020f4c:	4618      	mov	r0, r3
 8020f4e:	3708      	adds	r7, #8
 8020f50:	46bd      	mov	sp, r7
 8020f52:	bd80      	pop	{r7, pc}
 8020f54:	20000000 	.word	0x20000000
 8020f58:	20000008 	.word	0x20000008
 8020f5c:	20000004 	.word	0x20000004

08020f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020f60:	b480      	push	{r7}
 8020f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020f64:	4b06      	ldr	r3, [pc, #24]	@ (8020f80 <HAL_IncTick+0x20>)
 8020f66:	781b      	ldrb	r3, [r3, #0]
 8020f68:	461a      	mov	r2, r3
 8020f6a:	4b06      	ldr	r3, [pc, #24]	@ (8020f84 <HAL_IncTick+0x24>)
 8020f6c:	681b      	ldr	r3, [r3, #0]
 8020f6e:	4413      	add	r3, r2
 8020f70:	4a04      	ldr	r2, [pc, #16]	@ (8020f84 <HAL_IncTick+0x24>)
 8020f72:	6013      	str	r3, [r2, #0]
}
 8020f74:	bf00      	nop
 8020f76:	46bd      	mov	sp, r7
 8020f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f7c:	4770      	bx	lr
 8020f7e:	bf00      	nop
 8020f80:	20000008 	.word	0x20000008
 8020f84:	20000138 	.word	0x20000138

08020f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020f88:	b480      	push	{r7}
 8020f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8020f8c:	4b03      	ldr	r3, [pc, #12]	@ (8020f9c <HAL_GetTick+0x14>)
 8020f8e:	681b      	ldr	r3, [r3, #0]
}
 8020f90:	4618      	mov	r0, r3
 8020f92:	46bd      	mov	sp, r7
 8020f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f98:	4770      	bx	lr
 8020f9a:	bf00      	nop
 8020f9c:	20000138 	.word	0x20000138

08020fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020fa0:	b480      	push	{r7}
 8020fa2:	b085      	sub	sp, #20
 8020fa4:	af00      	add	r7, sp, #0
 8020fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020fa8:	687b      	ldr	r3, [r7, #4]
 8020faa:	f003 0307 	and.w	r3, r3, #7
 8020fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8020fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8020fb2:	68db      	ldr	r3, [r3, #12]
 8020fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020fb6:	68ba      	ldr	r2, [r7, #8]
 8020fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8020fbc:	4013      	ands	r3, r2
 8020fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020fc0:	68fb      	ldr	r3, [r7, #12]
 8020fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020fc4:	68bb      	ldr	r3, [r7, #8]
 8020fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8020fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020fd2:	4a04      	ldr	r2, [pc, #16]	@ (8020fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8020fd4:	68bb      	ldr	r3, [r7, #8]
 8020fd6:	60d3      	str	r3, [r2, #12]
}
 8020fd8:	bf00      	nop
 8020fda:	3714      	adds	r7, #20
 8020fdc:	46bd      	mov	sp, r7
 8020fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fe2:	4770      	bx	lr
 8020fe4:	e000ed00 	.word	0xe000ed00

08020fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020fe8:	b480      	push	{r7}
 8020fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020fec:	4b04      	ldr	r3, [pc, #16]	@ (8021000 <__NVIC_GetPriorityGrouping+0x18>)
 8020fee:	68db      	ldr	r3, [r3, #12]
 8020ff0:	0a1b      	lsrs	r3, r3, #8
 8020ff2:	f003 0307 	and.w	r3, r3, #7
}
 8020ff6:	4618      	mov	r0, r3
 8020ff8:	46bd      	mov	sp, r7
 8020ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ffe:	4770      	bx	lr
 8021000:	e000ed00 	.word	0xe000ed00

08021004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8021004:	b480      	push	{r7}
 8021006:	b083      	sub	sp, #12
 8021008:	af00      	add	r7, sp, #0
 802100a:	4603      	mov	r3, r0
 802100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021012:	2b00      	cmp	r3, #0
 8021014:	db0b      	blt.n	802102e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021016:	79fb      	ldrb	r3, [r7, #7]
 8021018:	f003 021f 	and.w	r2, r3, #31
 802101c:	4907      	ldr	r1, [pc, #28]	@ (802103c <__NVIC_EnableIRQ+0x38>)
 802101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021022:	095b      	lsrs	r3, r3, #5
 8021024:	2001      	movs	r0, #1
 8021026:	fa00 f202 	lsl.w	r2, r0, r2
 802102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802102e:	bf00      	nop
 8021030:	370c      	adds	r7, #12
 8021032:	46bd      	mov	sp, r7
 8021034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021038:	4770      	bx	lr
 802103a:	bf00      	nop
 802103c:	e000e100 	.word	0xe000e100

08021040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8021040:	b480      	push	{r7}
 8021042:	b083      	sub	sp, #12
 8021044:	af00      	add	r7, sp, #0
 8021046:	4603      	mov	r3, r0
 8021048:	6039      	str	r1, [r7, #0]
 802104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021050:	2b00      	cmp	r3, #0
 8021052:	db0a      	blt.n	802106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021054:	683b      	ldr	r3, [r7, #0]
 8021056:	b2da      	uxtb	r2, r3
 8021058:	490c      	ldr	r1, [pc, #48]	@ (802108c <__NVIC_SetPriority+0x4c>)
 802105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802105e:	0112      	lsls	r2, r2, #4
 8021060:	b2d2      	uxtb	r2, r2
 8021062:	440b      	add	r3, r1
 8021064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8021068:	e00a      	b.n	8021080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802106a:	683b      	ldr	r3, [r7, #0]
 802106c:	b2da      	uxtb	r2, r3
 802106e:	4908      	ldr	r1, [pc, #32]	@ (8021090 <__NVIC_SetPriority+0x50>)
 8021070:	79fb      	ldrb	r3, [r7, #7]
 8021072:	f003 030f 	and.w	r3, r3, #15
 8021076:	3b04      	subs	r3, #4
 8021078:	0112      	lsls	r2, r2, #4
 802107a:	b2d2      	uxtb	r2, r2
 802107c:	440b      	add	r3, r1
 802107e:	761a      	strb	r2, [r3, #24]
}
 8021080:	bf00      	nop
 8021082:	370c      	adds	r7, #12
 8021084:	46bd      	mov	sp, r7
 8021086:	f85d 7b04 	ldr.w	r7, [sp], #4
 802108a:	4770      	bx	lr
 802108c:	e000e100 	.word	0xe000e100
 8021090:	e000ed00 	.word	0xe000ed00

08021094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8021094:	b480      	push	{r7}
 8021096:	b089      	sub	sp, #36	@ 0x24
 8021098:	af00      	add	r7, sp, #0
 802109a:	60f8      	str	r0, [r7, #12]
 802109c:	60b9      	str	r1, [r7, #8]
 802109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80210a0:	68fb      	ldr	r3, [r7, #12]
 80210a2:	f003 0307 	and.w	r3, r3, #7
 80210a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80210a8:	69fb      	ldr	r3, [r7, #28]
 80210aa:	f1c3 0307 	rsb	r3, r3, #7
 80210ae:	2b04      	cmp	r3, #4
 80210b0:	bf28      	it	cs
 80210b2:	2304      	movcs	r3, #4
 80210b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80210b6:	69fb      	ldr	r3, [r7, #28]
 80210b8:	3304      	adds	r3, #4
 80210ba:	2b06      	cmp	r3, #6
 80210bc:	d902      	bls.n	80210c4 <NVIC_EncodePriority+0x30>
 80210be:	69fb      	ldr	r3, [r7, #28]
 80210c0:	3b03      	subs	r3, #3
 80210c2:	e000      	b.n	80210c6 <NVIC_EncodePriority+0x32>
 80210c4:	2300      	movs	r3, #0
 80210c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80210c8:	f04f 32ff 	mov.w	r2, #4294967295
 80210cc:	69bb      	ldr	r3, [r7, #24]
 80210ce:	fa02 f303 	lsl.w	r3, r2, r3
 80210d2:	43da      	mvns	r2, r3
 80210d4:	68bb      	ldr	r3, [r7, #8]
 80210d6:	401a      	ands	r2, r3
 80210d8:	697b      	ldr	r3, [r7, #20]
 80210da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80210dc:	f04f 31ff 	mov.w	r1, #4294967295
 80210e0:	697b      	ldr	r3, [r7, #20]
 80210e2:	fa01 f303 	lsl.w	r3, r1, r3
 80210e6:	43d9      	mvns	r1, r3
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80210ec:	4313      	orrs	r3, r2
         );
}
 80210ee:	4618      	mov	r0, r3
 80210f0:	3724      	adds	r7, #36	@ 0x24
 80210f2:	46bd      	mov	sp, r7
 80210f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210f8:	4770      	bx	lr
	...

080210fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80210fc:	b480      	push	{r7}
 80210fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8021100:	f3bf 8f4f 	dsb	sy
}
 8021104:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8021106:	4b06      	ldr	r3, [pc, #24]	@ (8021120 <__NVIC_SystemReset+0x24>)
 8021108:	68db      	ldr	r3, [r3, #12]
 802110a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802110e:	4904      	ldr	r1, [pc, #16]	@ (8021120 <__NVIC_SystemReset+0x24>)
 8021110:	4b04      	ldr	r3, [pc, #16]	@ (8021124 <__NVIC_SystemReset+0x28>)
 8021112:	4313      	orrs	r3, r2
 8021114:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8021116:	f3bf 8f4f 	dsb	sy
}
 802111a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 802111c:	bf00      	nop
 802111e:	e7fd      	b.n	802111c <__NVIC_SystemReset+0x20>
 8021120:	e000ed00 	.word	0xe000ed00
 8021124:	05fa0004 	.word	0x05fa0004

08021128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8021128:	b580      	push	{r7, lr}
 802112a:	b082      	sub	sp, #8
 802112c:	af00      	add	r7, sp, #0
 802112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8021130:	687b      	ldr	r3, [r7, #4]
 8021132:	3b01      	subs	r3, #1
 8021134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8021138:	d301      	bcc.n	802113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802113a:	2301      	movs	r3, #1
 802113c:	e00f      	b.n	802115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802113e:	4a0a      	ldr	r2, [pc, #40]	@ (8021168 <SysTick_Config+0x40>)
 8021140:	687b      	ldr	r3, [r7, #4]
 8021142:	3b01      	subs	r3, #1
 8021144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8021146:	210f      	movs	r1, #15
 8021148:	f04f 30ff 	mov.w	r0, #4294967295
 802114c:	f7ff ff78 	bl	8021040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021150:	4b05      	ldr	r3, [pc, #20]	@ (8021168 <SysTick_Config+0x40>)
 8021152:	2200      	movs	r2, #0
 8021154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8021156:	4b04      	ldr	r3, [pc, #16]	@ (8021168 <SysTick_Config+0x40>)
 8021158:	2207      	movs	r2, #7
 802115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802115c:	2300      	movs	r3, #0
}
 802115e:	4618      	mov	r0, r3
 8021160:	3708      	adds	r7, #8
 8021162:	46bd      	mov	sp, r7
 8021164:	bd80      	pop	{r7, pc}
 8021166:	bf00      	nop
 8021168:	e000e010 	.word	0xe000e010

0802116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802116c:	b580      	push	{r7, lr}
 802116e:	b082      	sub	sp, #8
 8021170:	af00      	add	r7, sp, #0
 8021172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021174:	6878      	ldr	r0, [r7, #4]
 8021176:	f7ff ff13 	bl	8020fa0 <__NVIC_SetPriorityGrouping>
}
 802117a:	bf00      	nop
 802117c:	3708      	adds	r7, #8
 802117e:	46bd      	mov	sp, r7
 8021180:	bd80      	pop	{r7, pc}

08021182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8021182:	b580      	push	{r7, lr}
 8021184:	b086      	sub	sp, #24
 8021186:	af00      	add	r7, sp, #0
 8021188:	4603      	mov	r3, r0
 802118a:	60b9      	str	r1, [r7, #8]
 802118c:	607a      	str	r2, [r7, #4]
 802118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8021190:	2300      	movs	r3, #0
 8021192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8021194:	f7ff ff28 	bl	8020fe8 <__NVIC_GetPriorityGrouping>
 8021198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802119a:	687a      	ldr	r2, [r7, #4]
 802119c:	68b9      	ldr	r1, [r7, #8]
 802119e:	6978      	ldr	r0, [r7, #20]
 80211a0:	f7ff ff78 	bl	8021094 <NVIC_EncodePriority>
 80211a4:	4602      	mov	r2, r0
 80211a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80211aa:	4611      	mov	r1, r2
 80211ac:	4618      	mov	r0, r3
 80211ae:	f7ff ff47 	bl	8021040 <__NVIC_SetPriority>
}
 80211b2:	bf00      	nop
 80211b4:	3718      	adds	r7, #24
 80211b6:	46bd      	mov	sp, r7
 80211b8:	bd80      	pop	{r7, pc}

080211ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80211ba:	b580      	push	{r7, lr}
 80211bc:	b082      	sub	sp, #8
 80211be:	af00      	add	r7, sp, #0
 80211c0:	4603      	mov	r3, r0
 80211c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80211c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80211c8:	4618      	mov	r0, r3
 80211ca:	f7ff ff1b 	bl	8021004 <__NVIC_EnableIRQ>
}
 80211ce:	bf00      	nop
 80211d0:	3708      	adds	r7, #8
 80211d2:	46bd      	mov	sp, r7
 80211d4:	bd80      	pop	{r7, pc}

080211d6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80211d6:	b580      	push	{r7, lr}
 80211d8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80211da:	f7ff ff8f 	bl	80210fc <__NVIC_SystemReset>

080211de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80211de:	b580      	push	{r7, lr}
 80211e0:	b082      	sub	sp, #8
 80211e2:	af00      	add	r7, sp, #0
 80211e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80211e6:	6878      	ldr	r0, [r7, #4]
 80211e8:	f7ff ff9e 	bl	8021128 <SysTick_Config>
 80211ec:	4603      	mov	r3, r0
}
 80211ee:	4618      	mov	r0, r3
 80211f0:	3708      	adds	r7, #8
 80211f2:	46bd      	mov	sp, r7
 80211f4:	bd80      	pop	{r7, pc}
	...

080211f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80211f8:	b580      	push	{r7, lr}
 80211fa:	b086      	sub	sp, #24
 80211fc:	af00      	add	r7, sp, #0
 80211fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8021200:	2300      	movs	r3, #0
 8021202:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8021204:	f7ff fec0 	bl	8020f88 <HAL_GetTick>
 8021208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	2b00      	cmp	r3, #0
 802120e:	d101      	bne.n	8021214 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8021210:	2301      	movs	r3, #1
 8021212:	e099      	b.n	8021348 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8021214:	687b      	ldr	r3, [r7, #4]
 8021216:	2202      	movs	r2, #2
 8021218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802121c:	687b      	ldr	r3, [r7, #4]
 802121e:	2200      	movs	r2, #0
 8021220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	681b      	ldr	r3, [r3, #0]
 8021228:	681a      	ldr	r2, [r3, #0]
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	681b      	ldr	r3, [r3, #0]
 802122e:	f022 0201 	bic.w	r2, r2, #1
 8021232:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8021234:	e00f      	b.n	8021256 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8021236:	f7ff fea7 	bl	8020f88 <HAL_GetTick>
 802123a:	4602      	mov	r2, r0
 802123c:	693b      	ldr	r3, [r7, #16]
 802123e:	1ad3      	subs	r3, r2, r3
 8021240:	2b05      	cmp	r3, #5
 8021242:	d908      	bls.n	8021256 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	2220      	movs	r2, #32
 8021248:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	2203      	movs	r2, #3
 802124e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8021252:	2303      	movs	r3, #3
 8021254:	e078      	b.n	8021348 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	681b      	ldr	r3, [r3, #0]
 802125a:	681b      	ldr	r3, [r3, #0]
 802125c:	f003 0301 	and.w	r3, r3, #1
 8021260:	2b00      	cmp	r3, #0
 8021262:	d1e8      	bne.n	8021236 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8021264:	687b      	ldr	r3, [r7, #4]
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	681b      	ldr	r3, [r3, #0]
 802126a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802126c:	697a      	ldr	r2, [r7, #20]
 802126e:	4b38      	ldr	r3, [pc, #224]	@ (8021350 <HAL_DMA_Init+0x158>)
 8021270:	4013      	ands	r3, r2
 8021272:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	685a      	ldr	r2, [r3, #4]
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	689b      	ldr	r3, [r3, #8]
 802127c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8021282:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	691b      	ldr	r3, [r3, #16]
 8021288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802128a:	687b      	ldr	r3, [r7, #4]
 802128c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802128e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	699b      	ldr	r3, [r3, #24]
 8021294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8021296:	687b      	ldr	r3, [r7, #4]
 8021298:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802129a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	6a1b      	ldr	r3, [r3, #32]
 80212a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80212a2:	697a      	ldr	r2, [r7, #20]
 80212a4:	4313      	orrs	r3, r2
 80212a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80212ac:	2b04      	cmp	r3, #4
 80212ae:	d107      	bne.n	80212c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80212b8:	4313      	orrs	r3, r2
 80212ba:	697a      	ldr	r2, [r7, #20]
 80212bc:	4313      	orrs	r3, r2
 80212be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	681b      	ldr	r3, [r3, #0]
 80212c4:	697a      	ldr	r2, [r7, #20]
 80212c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	681b      	ldr	r3, [r3, #0]
 80212cc:	695b      	ldr	r3, [r3, #20]
 80212ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80212d0:	697b      	ldr	r3, [r7, #20]
 80212d2:	f023 0307 	bic.w	r3, r3, #7
 80212d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80212d8:	687b      	ldr	r3, [r7, #4]
 80212da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80212dc:	697a      	ldr	r2, [r7, #20]
 80212de:	4313      	orrs	r3, r2
 80212e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80212e6:	2b04      	cmp	r3, #4
 80212e8:	d117      	bne.n	802131a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80212ee:	697a      	ldr	r2, [r7, #20]
 80212f0:	4313      	orrs	r3, r2
 80212f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80212f4:	687b      	ldr	r3, [r7, #4]
 80212f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	d00e      	beq.n	802131a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80212fc:	6878      	ldr	r0, [r7, #4]
 80212fe:	f000 fadf 	bl	80218c0 <DMA_CheckFifoParam>
 8021302:	4603      	mov	r3, r0
 8021304:	2b00      	cmp	r3, #0
 8021306:	d008      	beq.n	802131a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	2240      	movs	r2, #64	@ 0x40
 802130c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802130e:	687b      	ldr	r3, [r7, #4]
 8021310:	2201      	movs	r2, #1
 8021312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8021316:	2301      	movs	r3, #1
 8021318:	e016      	b.n	8021348 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	697a      	ldr	r2, [r7, #20]
 8021320:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8021322:	6878      	ldr	r0, [r7, #4]
 8021324:	f000 fa96 	bl	8021854 <DMA_CalcBaseAndBitshift>
 8021328:	4603      	mov	r3, r0
 802132a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802132c:	687b      	ldr	r3, [r7, #4]
 802132e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8021330:	223f      	movs	r2, #63	@ 0x3f
 8021332:	409a      	lsls	r2, r3
 8021334:	68fb      	ldr	r3, [r7, #12]
 8021336:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8021338:	687b      	ldr	r3, [r7, #4]
 802133a:	2200      	movs	r2, #0
 802133c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802133e:	687b      	ldr	r3, [r7, #4]
 8021340:	2201      	movs	r2, #1
 8021342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8021346:	2300      	movs	r3, #0
}
 8021348:	4618      	mov	r0, r3
 802134a:	3718      	adds	r7, #24
 802134c:	46bd      	mov	sp, r7
 802134e:	bd80      	pop	{r7, pc}
 8021350:	f010803f 	.word	0xf010803f

08021354 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8021354:	b580      	push	{r7, lr}
 8021356:	b086      	sub	sp, #24
 8021358:	af00      	add	r7, sp, #0
 802135a:	60f8      	str	r0, [r7, #12]
 802135c:	60b9      	str	r1, [r7, #8]
 802135e:	607a      	str	r2, [r7, #4]
 8021360:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8021362:	2300      	movs	r3, #0
 8021364:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8021366:	68fb      	ldr	r3, [r7, #12]
 8021368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802136a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 802136c:	68fb      	ldr	r3, [r7, #12]
 802136e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8021372:	2b01      	cmp	r3, #1
 8021374:	d101      	bne.n	802137a <HAL_DMA_Start_IT+0x26>
 8021376:	2302      	movs	r3, #2
 8021378:	e040      	b.n	80213fc <HAL_DMA_Start_IT+0xa8>
 802137a:	68fb      	ldr	r3, [r7, #12]
 802137c:	2201      	movs	r2, #1
 802137e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8021382:	68fb      	ldr	r3, [r7, #12]
 8021384:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8021388:	b2db      	uxtb	r3, r3
 802138a:	2b01      	cmp	r3, #1
 802138c:	d12f      	bne.n	80213ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802138e:	68fb      	ldr	r3, [r7, #12]
 8021390:	2202      	movs	r2, #2
 8021392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8021396:	68fb      	ldr	r3, [r7, #12]
 8021398:	2200      	movs	r2, #0
 802139a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802139c:	683b      	ldr	r3, [r7, #0]
 802139e:	687a      	ldr	r2, [r7, #4]
 80213a0:	68b9      	ldr	r1, [r7, #8]
 80213a2:	68f8      	ldr	r0, [r7, #12]
 80213a4:	f000 fa28 	bl	80217f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80213a8:	68fb      	ldr	r3, [r7, #12]
 80213aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80213ac:	223f      	movs	r2, #63	@ 0x3f
 80213ae:	409a      	lsls	r2, r3
 80213b0:	693b      	ldr	r3, [r7, #16]
 80213b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80213b4:	68fb      	ldr	r3, [r7, #12]
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	681a      	ldr	r2, [r3, #0]
 80213ba:	68fb      	ldr	r3, [r7, #12]
 80213bc:	681b      	ldr	r3, [r3, #0]
 80213be:	f042 0216 	orr.w	r2, r2, #22
 80213c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80213c4:	68fb      	ldr	r3, [r7, #12]
 80213c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	d007      	beq.n	80213dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80213cc:	68fb      	ldr	r3, [r7, #12]
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	681a      	ldr	r2, [r3, #0]
 80213d2:	68fb      	ldr	r3, [r7, #12]
 80213d4:	681b      	ldr	r3, [r3, #0]
 80213d6:	f042 0208 	orr.w	r2, r2, #8
 80213da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80213dc:	68fb      	ldr	r3, [r7, #12]
 80213de:	681b      	ldr	r3, [r3, #0]
 80213e0:	681a      	ldr	r2, [r3, #0]
 80213e2:	68fb      	ldr	r3, [r7, #12]
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	f042 0201 	orr.w	r2, r2, #1
 80213ea:	601a      	str	r2, [r3, #0]
 80213ec:	e005      	b.n	80213fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80213ee:	68fb      	ldr	r3, [r7, #12]
 80213f0:	2200      	movs	r2, #0
 80213f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80213f6:	2302      	movs	r3, #2
 80213f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80213fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80213fc:	4618      	mov	r0, r3
 80213fe:	3718      	adds	r7, #24
 8021400:	46bd      	mov	sp, r7
 8021402:	bd80      	pop	{r7, pc}

08021404 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8021404:	b580      	push	{r7, lr}
 8021406:	b084      	sub	sp, #16
 8021408:	af00      	add	r7, sp, #0
 802140a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802140c:	687b      	ldr	r3, [r7, #4]
 802140e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021410:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8021412:	f7ff fdb9 	bl	8020f88 <HAL_GetTick>
 8021416:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8021418:	687b      	ldr	r3, [r7, #4]
 802141a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802141e:	b2db      	uxtb	r3, r3
 8021420:	2b02      	cmp	r3, #2
 8021422:	d008      	beq.n	8021436 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8021424:	687b      	ldr	r3, [r7, #4]
 8021426:	2280      	movs	r2, #128	@ 0x80
 8021428:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	2200      	movs	r2, #0
 802142e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8021432:	2301      	movs	r3, #1
 8021434:	e052      	b.n	80214dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8021436:	687b      	ldr	r3, [r7, #4]
 8021438:	681b      	ldr	r3, [r3, #0]
 802143a:	681a      	ldr	r2, [r3, #0]
 802143c:	687b      	ldr	r3, [r7, #4]
 802143e:	681b      	ldr	r3, [r3, #0]
 8021440:	f022 0216 	bic.w	r2, r2, #22
 8021444:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	695a      	ldr	r2, [r3, #20]
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8021454:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802145a:	2b00      	cmp	r3, #0
 802145c:	d103      	bne.n	8021466 <HAL_DMA_Abort+0x62>
 802145e:	687b      	ldr	r3, [r7, #4]
 8021460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021462:	2b00      	cmp	r3, #0
 8021464:	d007      	beq.n	8021476 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	681a      	ldr	r2, [r3, #0]
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	681b      	ldr	r3, [r3, #0]
 8021470:	f022 0208 	bic.w	r2, r2, #8
 8021474:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	681b      	ldr	r3, [r3, #0]
 802147a:	681a      	ldr	r2, [r3, #0]
 802147c:	687b      	ldr	r3, [r7, #4]
 802147e:	681b      	ldr	r3, [r3, #0]
 8021480:	f022 0201 	bic.w	r2, r2, #1
 8021484:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8021486:	e013      	b.n	80214b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8021488:	f7ff fd7e 	bl	8020f88 <HAL_GetTick>
 802148c:	4602      	mov	r2, r0
 802148e:	68bb      	ldr	r3, [r7, #8]
 8021490:	1ad3      	subs	r3, r2, r3
 8021492:	2b05      	cmp	r3, #5
 8021494:	d90c      	bls.n	80214b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8021496:	687b      	ldr	r3, [r7, #4]
 8021498:	2220      	movs	r2, #32
 802149a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	2203      	movs	r2, #3
 80214a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	2200      	movs	r2, #0
 80214a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80214ac:	2303      	movs	r3, #3
 80214ae:	e015      	b.n	80214dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80214b0:	687b      	ldr	r3, [r7, #4]
 80214b2:	681b      	ldr	r3, [r3, #0]
 80214b4:	681b      	ldr	r3, [r3, #0]
 80214b6:	f003 0301 	and.w	r3, r3, #1
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	d1e4      	bne.n	8021488 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80214be:	687b      	ldr	r3, [r7, #4]
 80214c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80214c2:	223f      	movs	r2, #63	@ 0x3f
 80214c4:	409a      	lsls	r2, r3
 80214c6:	68fb      	ldr	r3, [r7, #12]
 80214c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	2201      	movs	r2, #1
 80214ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	2200      	movs	r2, #0
 80214d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80214da:	2300      	movs	r3, #0
}
 80214dc:	4618      	mov	r0, r3
 80214de:	3710      	adds	r7, #16
 80214e0:	46bd      	mov	sp, r7
 80214e2:	bd80      	pop	{r7, pc}

080214e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80214e4:	b580      	push	{r7, lr}
 80214e6:	b086      	sub	sp, #24
 80214e8:	af00      	add	r7, sp, #0
 80214ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80214ec:	2300      	movs	r3, #0
 80214ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80214f0:	4b8e      	ldr	r3, [pc, #568]	@ (802172c <HAL_DMA_IRQHandler+0x248>)
 80214f2:	681b      	ldr	r3, [r3, #0]
 80214f4:	4a8e      	ldr	r2, [pc, #568]	@ (8021730 <HAL_DMA_IRQHandler+0x24c>)
 80214f6:	fba2 2303 	umull	r2, r3, r2, r3
 80214fa:	0a9b      	lsrs	r3, r3, #10
 80214fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8021504:	693b      	ldr	r3, [r7, #16]
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802150a:	687b      	ldr	r3, [r7, #4]
 802150c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802150e:	2208      	movs	r2, #8
 8021510:	409a      	lsls	r2, r3
 8021512:	68fb      	ldr	r3, [r7, #12]
 8021514:	4013      	ands	r3, r2
 8021516:	2b00      	cmp	r3, #0
 8021518:	d01a      	beq.n	8021550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802151a:	687b      	ldr	r3, [r7, #4]
 802151c:	681b      	ldr	r3, [r3, #0]
 802151e:	681b      	ldr	r3, [r3, #0]
 8021520:	f003 0304 	and.w	r3, r3, #4
 8021524:	2b00      	cmp	r3, #0
 8021526:	d013      	beq.n	8021550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	681b      	ldr	r3, [r3, #0]
 802152c:	681a      	ldr	r2, [r3, #0]
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	681b      	ldr	r3, [r3, #0]
 8021532:	f022 0204 	bic.w	r2, r2, #4
 8021536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802153c:	2208      	movs	r2, #8
 802153e:	409a      	lsls	r2, r3
 8021540:	693b      	ldr	r3, [r7, #16]
 8021542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8021544:	687b      	ldr	r3, [r7, #4]
 8021546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021548:	f043 0201 	orr.w	r2, r3, #1
 802154c:	687b      	ldr	r3, [r7, #4]
 802154e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8021550:	687b      	ldr	r3, [r7, #4]
 8021552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8021554:	2201      	movs	r2, #1
 8021556:	409a      	lsls	r2, r3
 8021558:	68fb      	ldr	r3, [r7, #12]
 802155a:	4013      	ands	r3, r2
 802155c:	2b00      	cmp	r3, #0
 802155e:	d012      	beq.n	8021586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8021560:	687b      	ldr	r3, [r7, #4]
 8021562:	681b      	ldr	r3, [r3, #0]
 8021564:	695b      	ldr	r3, [r3, #20]
 8021566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802156a:	2b00      	cmp	r3, #0
 802156c:	d00b      	beq.n	8021586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8021572:	2201      	movs	r2, #1
 8021574:	409a      	lsls	r2, r3
 8021576:	693b      	ldr	r3, [r7, #16]
 8021578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802157a:	687b      	ldr	r3, [r7, #4]
 802157c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802157e:	f043 0202 	orr.w	r2, r3, #2
 8021582:	687b      	ldr	r3, [r7, #4]
 8021584:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8021586:	687b      	ldr	r3, [r7, #4]
 8021588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802158a:	2204      	movs	r2, #4
 802158c:	409a      	lsls	r2, r3
 802158e:	68fb      	ldr	r3, [r7, #12]
 8021590:	4013      	ands	r3, r2
 8021592:	2b00      	cmp	r3, #0
 8021594:	d012      	beq.n	80215bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8021596:	687b      	ldr	r3, [r7, #4]
 8021598:	681b      	ldr	r3, [r3, #0]
 802159a:	681b      	ldr	r3, [r3, #0]
 802159c:	f003 0302 	and.w	r3, r3, #2
 80215a0:	2b00      	cmp	r3, #0
 80215a2:	d00b      	beq.n	80215bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80215a4:	687b      	ldr	r3, [r7, #4]
 80215a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80215a8:	2204      	movs	r2, #4
 80215aa:	409a      	lsls	r2, r3
 80215ac:	693b      	ldr	r3, [r7, #16]
 80215ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80215b4:	f043 0204 	orr.w	r2, r3, #4
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80215c0:	2210      	movs	r2, #16
 80215c2:	409a      	lsls	r2, r3
 80215c4:	68fb      	ldr	r3, [r7, #12]
 80215c6:	4013      	ands	r3, r2
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	d043      	beq.n	8021654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	681b      	ldr	r3, [r3, #0]
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	f003 0308 	and.w	r3, r3, #8
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d03c      	beq.n	8021654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80215de:	2210      	movs	r2, #16
 80215e0:	409a      	lsls	r2, r3
 80215e2:	693b      	ldr	r3, [r7, #16]
 80215e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80215e6:	687b      	ldr	r3, [r7, #4]
 80215e8:	681b      	ldr	r3, [r3, #0]
 80215ea:	681b      	ldr	r3, [r3, #0]
 80215ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	d018      	beq.n	8021626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80215f4:	687b      	ldr	r3, [r7, #4]
 80215f6:	681b      	ldr	r3, [r3, #0]
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80215fe:	2b00      	cmp	r3, #0
 8021600:	d108      	bne.n	8021614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8021602:	687b      	ldr	r3, [r7, #4]
 8021604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021606:	2b00      	cmp	r3, #0
 8021608:	d024      	beq.n	8021654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802160a:	687b      	ldr	r3, [r7, #4]
 802160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802160e:	6878      	ldr	r0, [r7, #4]
 8021610:	4798      	blx	r3
 8021612:	e01f      	b.n	8021654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8021614:	687b      	ldr	r3, [r7, #4]
 8021616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021618:	2b00      	cmp	r3, #0
 802161a:	d01b      	beq.n	8021654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021620:	6878      	ldr	r0, [r7, #4]
 8021622:	4798      	blx	r3
 8021624:	e016      	b.n	8021654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8021626:	687b      	ldr	r3, [r7, #4]
 8021628:	681b      	ldr	r3, [r3, #0]
 802162a:	681b      	ldr	r3, [r3, #0]
 802162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021630:	2b00      	cmp	r3, #0
 8021632:	d107      	bne.n	8021644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	681b      	ldr	r3, [r3, #0]
 8021638:	681a      	ldr	r2, [r3, #0]
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	681b      	ldr	r3, [r3, #0]
 802163e:	f022 0208 	bic.w	r2, r2, #8
 8021642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8021644:	687b      	ldr	r3, [r7, #4]
 8021646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021648:	2b00      	cmp	r3, #0
 802164a:	d003      	beq.n	8021654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802164c:	687b      	ldr	r3, [r7, #4]
 802164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021650:	6878      	ldr	r0, [r7, #4]
 8021652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8021658:	2220      	movs	r2, #32
 802165a:	409a      	lsls	r2, r3
 802165c:	68fb      	ldr	r3, [r7, #12]
 802165e:	4013      	ands	r3, r2
 8021660:	2b00      	cmp	r3, #0
 8021662:	f000 808f 	beq.w	8021784 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	681b      	ldr	r3, [r3, #0]
 802166a:	681b      	ldr	r3, [r3, #0]
 802166c:	f003 0310 	and.w	r3, r3, #16
 8021670:	2b00      	cmp	r3, #0
 8021672:	f000 8087 	beq.w	8021784 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8021676:	687b      	ldr	r3, [r7, #4]
 8021678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802167a:	2220      	movs	r2, #32
 802167c:	409a      	lsls	r2, r3
 802167e:	693b      	ldr	r3, [r7, #16]
 8021680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8021682:	687b      	ldr	r3, [r7, #4]
 8021684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8021688:	b2db      	uxtb	r3, r3
 802168a:	2b05      	cmp	r3, #5
 802168c:	d136      	bne.n	80216fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802168e:	687b      	ldr	r3, [r7, #4]
 8021690:	681b      	ldr	r3, [r3, #0]
 8021692:	681a      	ldr	r2, [r3, #0]
 8021694:	687b      	ldr	r3, [r7, #4]
 8021696:	681b      	ldr	r3, [r3, #0]
 8021698:	f022 0216 	bic.w	r2, r2, #22
 802169c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802169e:	687b      	ldr	r3, [r7, #4]
 80216a0:	681b      	ldr	r3, [r3, #0]
 80216a2:	695a      	ldr	r2, [r3, #20]
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	681b      	ldr	r3, [r3, #0]
 80216a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80216ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80216ae:	687b      	ldr	r3, [r7, #4]
 80216b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d103      	bne.n	80216be <HAL_DMA_IRQHandler+0x1da>
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	d007      	beq.n	80216ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80216be:	687b      	ldr	r3, [r7, #4]
 80216c0:	681b      	ldr	r3, [r3, #0]
 80216c2:	681a      	ldr	r2, [r3, #0]
 80216c4:	687b      	ldr	r3, [r7, #4]
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	f022 0208 	bic.w	r2, r2, #8
 80216cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80216d2:	223f      	movs	r2, #63	@ 0x3f
 80216d4:	409a      	lsls	r2, r3
 80216d6:	693b      	ldr	r3, [r7, #16]
 80216d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80216da:	687b      	ldr	r3, [r7, #4]
 80216dc:	2201      	movs	r2, #1
 80216de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	2200      	movs	r2, #0
 80216e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80216ea:	687b      	ldr	r3, [r7, #4]
 80216ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d07e      	beq.n	80217f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80216f6:	6878      	ldr	r0, [r7, #4]
 80216f8:	4798      	blx	r3
        }
        return;
 80216fa:	e079      	b.n	80217f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80216fc:	687b      	ldr	r3, [r7, #4]
 80216fe:	681b      	ldr	r3, [r3, #0]
 8021700:	681b      	ldr	r3, [r3, #0]
 8021702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8021706:	2b00      	cmp	r3, #0
 8021708:	d01d      	beq.n	8021746 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	681b      	ldr	r3, [r3, #0]
 802170e:	681b      	ldr	r3, [r3, #0]
 8021710:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8021714:	2b00      	cmp	r3, #0
 8021716:	d10d      	bne.n	8021734 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8021718:	687b      	ldr	r3, [r7, #4]
 802171a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802171c:	2b00      	cmp	r3, #0
 802171e:	d031      	beq.n	8021784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8021720:	687b      	ldr	r3, [r7, #4]
 8021722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021724:	6878      	ldr	r0, [r7, #4]
 8021726:	4798      	blx	r3
 8021728:	e02c      	b.n	8021784 <HAL_DMA_IRQHandler+0x2a0>
 802172a:	bf00      	nop
 802172c:	20000000 	.word	0x20000000
 8021730:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8021734:	687b      	ldr	r3, [r7, #4]
 8021736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021738:	2b00      	cmp	r3, #0
 802173a:	d023      	beq.n	8021784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802173c:	687b      	ldr	r3, [r7, #4]
 802173e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021740:	6878      	ldr	r0, [r7, #4]
 8021742:	4798      	blx	r3
 8021744:	e01e      	b.n	8021784 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8021746:	687b      	ldr	r3, [r7, #4]
 8021748:	681b      	ldr	r3, [r3, #0]
 802174a:	681b      	ldr	r3, [r3, #0]
 802174c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021750:	2b00      	cmp	r3, #0
 8021752:	d10f      	bne.n	8021774 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	681b      	ldr	r3, [r3, #0]
 8021758:	681a      	ldr	r2, [r3, #0]
 802175a:	687b      	ldr	r3, [r7, #4]
 802175c:	681b      	ldr	r3, [r3, #0]
 802175e:	f022 0210 	bic.w	r2, r2, #16
 8021762:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8021764:	687b      	ldr	r3, [r7, #4]
 8021766:	2201      	movs	r2, #1
 8021768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	2200      	movs	r2, #0
 8021770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8021774:	687b      	ldr	r3, [r7, #4]
 8021776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021778:	2b00      	cmp	r3, #0
 802177a:	d003      	beq.n	8021784 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021780:	6878      	ldr	r0, [r7, #4]
 8021782:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8021784:	687b      	ldr	r3, [r7, #4]
 8021786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021788:	2b00      	cmp	r3, #0
 802178a:	d032      	beq.n	80217f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802178c:	687b      	ldr	r3, [r7, #4]
 802178e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021790:	f003 0301 	and.w	r3, r3, #1
 8021794:	2b00      	cmp	r3, #0
 8021796:	d022      	beq.n	80217de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	2205      	movs	r2, #5
 802179c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	681b      	ldr	r3, [r3, #0]
 80217a4:	681a      	ldr	r2, [r3, #0]
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	681b      	ldr	r3, [r3, #0]
 80217aa:	f022 0201 	bic.w	r2, r2, #1
 80217ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80217b0:	68bb      	ldr	r3, [r7, #8]
 80217b2:	3301      	adds	r3, #1
 80217b4:	60bb      	str	r3, [r7, #8]
 80217b6:	697a      	ldr	r2, [r7, #20]
 80217b8:	429a      	cmp	r2, r3
 80217ba:	d307      	bcc.n	80217cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80217bc:	687b      	ldr	r3, [r7, #4]
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	681b      	ldr	r3, [r3, #0]
 80217c2:	f003 0301 	and.w	r3, r3, #1
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d1f2      	bne.n	80217b0 <HAL_DMA_IRQHandler+0x2cc>
 80217ca:	e000      	b.n	80217ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80217cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80217ce:	687b      	ldr	r3, [r7, #4]
 80217d0:	2201      	movs	r2, #1
 80217d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80217d6:	687b      	ldr	r3, [r7, #4]
 80217d8:	2200      	movs	r2, #0
 80217da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80217de:	687b      	ldr	r3, [r7, #4]
 80217e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	d005      	beq.n	80217f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80217e6:	687b      	ldr	r3, [r7, #4]
 80217e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80217ea:	6878      	ldr	r0, [r7, #4]
 80217ec:	4798      	blx	r3
 80217ee:	e000      	b.n	80217f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80217f0:	bf00      	nop
    }
  }
}
 80217f2:	3718      	adds	r7, #24
 80217f4:	46bd      	mov	sp, r7
 80217f6:	bd80      	pop	{r7, pc}

080217f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80217f8:	b480      	push	{r7}
 80217fa:	b085      	sub	sp, #20
 80217fc:	af00      	add	r7, sp, #0
 80217fe:	60f8      	str	r0, [r7, #12]
 8021800:	60b9      	str	r1, [r7, #8]
 8021802:	607a      	str	r2, [r7, #4]
 8021804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8021806:	68fb      	ldr	r3, [r7, #12]
 8021808:	681b      	ldr	r3, [r3, #0]
 802180a:	681a      	ldr	r2, [r3, #0]
 802180c:	68fb      	ldr	r3, [r7, #12]
 802180e:	681b      	ldr	r3, [r3, #0]
 8021810:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8021814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8021816:	68fb      	ldr	r3, [r7, #12]
 8021818:	681b      	ldr	r3, [r3, #0]
 802181a:	683a      	ldr	r2, [r7, #0]
 802181c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802181e:	68fb      	ldr	r3, [r7, #12]
 8021820:	689b      	ldr	r3, [r3, #8]
 8021822:	2b40      	cmp	r3, #64	@ 0x40
 8021824:	d108      	bne.n	8021838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8021826:	68fb      	ldr	r3, [r7, #12]
 8021828:	681b      	ldr	r3, [r3, #0]
 802182a:	687a      	ldr	r2, [r7, #4]
 802182c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802182e:	68fb      	ldr	r3, [r7, #12]
 8021830:	681b      	ldr	r3, [r3, #0]
 8021832:	68ba      	ldr	r2, [r7, #8]
 8021834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8021836:	e007      	b.n	8021848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8021838:	68fb      	ldr	r3, [r7, #12]
 802183a:	681b      	ldr	r3, [r3, #0]
 802183c:	68ba      	ldr	r2, [r7, #8]
 802183e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8021840:	68fb      	ldr	r3, [r7, #12]
 8021842:	681b      	ldr	r3, [r3, #0]
 8021844:	687a      	ldr	r2, [r7, #4]
 8021846:	60da      	str	r2, [r3, #12]
}
 8021848:	bf00      	nop
 802184a:	3714      	adds	r7, #20
 802184c:	46bd      	mov	sp, r7
 802184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021852:	4770      	bx	lr

08021854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8021854:	b480      	push	{r7}
 8021856:	b085      	sub	sp, #20
 8021858:	af00      	add	r7, sp, #0
 802185a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802185c:	687b      	ldr	r3, [r7, #4]
 802185e:	681b      	ldr	r3, [r3, #0]
 8021860:	b2db      	uxtb	r3, r3
 8021862:	3b10      	subs	r3, #16
 8021864:	4a14      	ldr	r2, [pc, #80]	@ (80218b8 <DMA_CalcBaseAndBitshift+0x64>)
 8021866:	fba2 2303 	umull	r2, r3, r2, r3
 802186a:	091b      	lsrs	r3, r3, #4
 802186c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802186e:	4a13      	ldr	r2, [pc, #76]	@ (80218bc <DMA_CalcBaseAndBitshift+0x68>)
 8021870:	68fb      	ldr	r3, [r7, #12]
 8021872:	4413      	add	r3, r2
 8021874:	781b      	ldrb	r3, [r3, #0]
 8021876:	461a      	mov	r2, r3
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 802187c:	68fb      	ldr	r3, [r7, #12]
 802187e:	2b03      	cmp	r3, #3
 8021880:	d909      	bls.n	8021896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8021882:	687b      	ldr	r3, [r7, #4]
 8021884:	681b      	ldr	r3, [r3, #0]
 8021886:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 802188a:	f023 0303 	bic.w	r3, r3, #3
 802188e:	1d1a      	adds	r2, r3, #4
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	659a      	str	r2, [r3, #88]	@ 0x58
 8021894:	e007      	b.n	80218a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	681b      	ldr	r3, [r3, #0]
 802189a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 802189e:	f023 0303 	bic.w	r3, r3, #3
 80218a2:	687a      	ldr	r2, [r7, #4]
 80218a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80218a6:	687b      	ldr	r3, [r7, #4]
 80218a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80218aa:	4618      	mov	r0, r3
 80218ac:	3714      	adds	r7, #20
 80218ae:	46bd      	mov	sp, r7
 80218b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218b4:	4770      	bx	lr
 80218b6:	bf00      	nop
 80218b8:	aaaaaaab 	.word	0xaaaaaaab
 80218bc:	0802784c 	.word	0x0802784c

080218c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80218c0:	b480      	push	{r7}
 80218c2:	b085      	sub	sp, #20
 80218c4:	af00      	add	r7, sp, #0
 80218c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80218c8:	2300      	movs	r3, #0
 80218ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80218d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80218d2:	687b      	ldr	r3, [r7, #4]
 80218d4:	699b      	ldr	r3, [r3, #24]
 80218d6:	2b00      	cmp	r3, #0
 80218d8:	d11f      	bne.n	802191a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80218da:	68bb      	ldr	r3, [r7, #8]
 80218dc:	2b03      	cmp	r3, #3
 80218de:	d856      	bhi.n	802198e <DMA_CheckFifoParam+0xce>
 80218e0:	a201      	add	r2, pc, #4	@ (adr r2, 80218e8 <DMA_CheckFifoParam+0x28>)
 80218e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218e6:	bf00      	nop
 80218e8:	080218f9 	.word	0x080218f9
 80218ec:	0802190b 	.word	0x0802190b
 80218f0:	080218f9 	.word	0x080218f9
 80218f4:	0802198f 	.word	0x0802198f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80218fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8021900:	2b00      	cmp	r3, #0
 8021902:	d046      	beq.n	8021992 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8021904:	2301      	movs	r3, #1
 8021906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8021908:	e043      	b.n	8021992 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802190e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8021912:	d140      	bne.n	8021996 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8021914:	2301      	movs	r3, #1
 8021916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8021918:	e03d      	b.n	8021996 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	699b      	ldr	r3, [r3, #24]
 802191e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021922:	d121      	bne.n	8021968 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8021924:	68bb      	ldr	r3, [r7, #8]
 8021926:	2b03      	cmp	r3, #3
 8021928:	d837      	bhi.n	802199a <DMA_CheckFifoParam+0xda>
 802192a:	a201      	add	r2, pc, #4	@ (adr r2, 8021930 <DMA_CheckFifoParam+0x70>)
 802192c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021930:	08021941 	.word	0x08021941
 8021934:	08021947 	.word	0x08021947
 8021938:	08021941 	.word	0x08021941
 802193c:	08021959 	.word	0x08021959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8021940:	2301      	movs	r3, #1
 8021942:	73fb      	strb	r3, [r7, #15]
      break;
 8021944:	e030      	b.n	80219a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8021946:	687b      	ldr	r3, [r7, #4]
 8021948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802194a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802194e:	2b00      	cmp	r3, #0
 8021950:	d025      	beq.n	802199e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8021952:	2301      	movs	r3, #1
 8021954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8021956:	e022      	b.n	802199e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8021958:	687b      	ldr	r3, [r7, #4]
 802195a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802195c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8021960:	d11f      	bne.n	80219a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8021962:	2301      	movs	r3, #1
 8021964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8021966:	e01c      	b.n	80219a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8021968:	68bb      	ldr	r3, [r7, #8]
 802196a:	2b02      	cmp	r3, #2
 802196c:	d903      	bls.n	8021976 <DMA_CheckFifoParam+0xb6>
 802196e:	68bb      	ldr	r3, [r7, #8]
 8021970:	2b03      	cmp	r3, #3
 8021972:	d003      	beq.n	802197c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8021974:	e018      	b.n	80219a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8021976:	2301      	movs	r3, #1
 8021978:	73fb      	strb	r3, [r7, #15]
      break;
 802197a:	e015      	b.n	80219a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021980:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8021984:	2b00      	cmp	r3, #0
 8021986:	d00e      	beq.n	80219a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8021988:	2301      	movs	r3, #1
 802198a:	73fb      	strb	r3, [r7, #15]
      break;
 802198c:	e00b      	b.n	80219a6 <DMA_CheckFifoParam+0xe6>
      break;
 802198e:	bf00      	nop
 8021990:	e00a      	b.n	80219a8 <DMA_CheckFifoParam+0xe8>
      break;
 8021992:	bf00      	nop
 8021994:	e008      	b.n	80219a8 <DMA_CheckFifoParam+0xe8>
      break;
 8021996:	bf00      	nop
 8021998:	e006      	b.n	80219a8 <DMA_CheckFifoParam+0xe8>
      break;
 802199a:	bf00      	nop
 802199c:	e004      	b.n	80219a8 <DMA_CheckFifoParam+0xe8>
      break;
 802199e:	bf00      	nop
 80219a0:	e002      	b.n	80219a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80219a2:	bf00      	nop
 80219a4:	e000      	b.n	80219a8 <DMA_CheckFifoParam+0xe8>
      break;
 80219a6:	bf00      	nop
    }
  } 
  
  return status; 
 80219a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80219aa:	4618      	mov	r0, r3
 80219ac:	3714      	adds	r7, #20
 80219ae:	46bd      	mov	sp, r7
 80219b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219b4:	4770      	bx	lr
 80219b6:	bf00      	nop

080219b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80219b8:	b580      	push	{r7, lr}
 80219ba:	b086      	sub	sp, #24
 80219bc:	af00      	add	r7, sp, #0
 80219be:	60f8      	str	r0, [r7, #12]
 80219c0:	60b9      	str	r1, [r7, #8]
 80219c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80219c6:	2301      	movs	r3, #1
 80219c8:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80219ca:	4b23      	ldr	r3, [pc, #140]	@ (8021a58 <HAL_FLASH_Program+0xa0>)
 80219cc:	7e1b      	ldrb	r3, [r3, #24]
 80219ce:	2b01      	cmp	r3, #1
 80219d0:	d101      	bne.n	80219d6 <HAL_FLASH_Program+0x1e>
 80219d2:	2302      	movs	r3, #2
 80219d4:	e03b      	b.n	8021a4e <HAL_FLASH_Program+0x96>
 80219d6:	4b20      	ldr	r3, [pc, #128]	@ (8021a58 <HAL_FLASH_Program+0xa0>)
 80219d8:	2201      	movs	r2, #1
 80219da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80219dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80219e0:	f000 f860 	bl	8021aa4 <FLASH_WaitForLastOperation>
 80219e4:	4603      	mov	r3, r0
 80219e6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80219e8:	7dfb      	ldrb	r3, [r7, #23]
 80219ea:	2b00      	cmp	r3, #0
 80219ec:	d12b      	bne.n	8021a46 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80219ee:	68fb      	ldr	r3, [r7, #12]
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	d105      	bne.n	8021a00 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80219f4:	783b      	ldrb	r3, [r7, #0]
 80219f6:	4619      	mov	r1, r3
 80219f8:	68b8      	ldr	r0, [r7, #8]
 80219fa:	f000 f90b 	bl	8021c14 <FLASH_Program_Byte>
 80219fe:	e016      	b.n	8021a2e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8021a00:	68fb      	ldr	r3, [r7, #12]
 8021a02:	2b01      	cmp	r3, #1
 8021a04:	d105      	bne.n	8021a12 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8021a06:	883b      	ldrh	r3, [r7, #0]
 8021a08:	4619      	mov	r1, r3
 8021a0a:	68b8      	ldr	r0, [r7, #8]
 8021a0c:	f000 f8de 	bl	8021bcc <FLASH_Program_HalfWord>
 8021a10:	e00d      	b.n	8021a2e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8021a12:	68fb      	ldr	r3, [r7, #12]
 8021a14:	2b02      	cmp	r3, #2
 8021a16:	d105      	bne.n	8021a24 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8021a18:	683b      	ldr	r3, [r7, #0]
 8021a1a:	4619      	mov	r1, r3
 8021a1c:	68b8      	ldr	r0, [r7, #8]
 8021a1e:	f000 f8b3 	bl	8021b88 <FLASH_Program_Word>
 8021a22:	e004      	b.n	8021a2e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8021a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021a28:	68b8      	ldr	r0, [r7, #8]
 8021a2a:	f000 f87b 	bl	8021b24 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021a2e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8021a32:	f000 f837 	bl	8021aa4 <FLASH_WaitForLastOperation>
 8021a36:	4603      	mov	r3, r0
 8021a38:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8021a3a:	4b08      	ldr	r3, [pc, #32]	@ (8021a5c <HAL_FLASH_Program+0xa4>)
 8021a3c:	691b      	ldr	r3, [r3, #16]
 8021a3e:	4a07      	ldr	r2, [pc, #28]	@ (8021a5c <HAL_FLASH_Program+0xa4>)
 8021a40:	f023 0301 	bic.w	r3, r3, #1
 8021a44:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8021a46:	4b04      	ldr	r3, [pc, #16]	@ (8021a58 <HAL_FLASH_Program+0xa0>)
 8021a48:	2200      	movs	r2, #0
 8021a4a:	761a      	strb	r2, [r3, #24]

  return status;
 8021a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8021a4e:	4618      	mov	r0, r3
 8021a50:	3718      	adds	r7, #24
 8021a52:	46bd      	mov	sp, r7
 8021a54:	bd80      	pop	{r7, pc}
 8021a56:	bf00      	nop
 8021a58:	2000013c 	.word	0x2000013c
 8021a5c:	40023c00 	.word	0x40023c00

08021a60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8021a60:	b480      	push	{r7}
 8021a62:	b083      	sub	sp, #12
 8021a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8021a66:	2300      	movs	r3, #0
 8021a68:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8021a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8021a98 <HAL_FLASH_Unlock+0x38>)
 8021a6c:	691b      	ldr	r3, [r3, #16]
 8021a6e:	2b00      	cmp	r3, #0
 8021a70:	da0b      	bge.n	8021a8a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8021a72:	4b09      	ldr	r3, [pc, #36]	@ (8021a98 <HAL_FLASH_Unlock+0x38>)
 8021a74:	4a09      	ldr	r2, [pc, #36]	@ (8021a9c <HAL_FLASH_Unlock+0x3c>)
 8021a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8021a78:	4b07      	ldr	r3, [pc, #28]	@ (8021a98 <HAL_FLASH_Unlock+0x38>)
 8021a7a:	4a09      	ldr	r2, [pc, #36]	@ (8021aa0 <HAL_FLASH_Unlock+0x40>)
 8021a7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8021a7e:	4b06      	ldr	r3, [pc, #24]	@ (8021a98 <HAL_FLASH_Unlock+0x38>)
 8021a80:	691b      	ldr	r3, [r3, #16]
 8021a82:	2b00      	cmp	r3, #0
 8021a84:	da01      	bge.n	8021a8a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8021a86:	2301      	movs	r3, #1
 8021a88:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8021a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8021a8c:	4618      	mov	r0, r3
 8021a8e:	370c      	adds	r7, #12
 8021a90:	46bd      	mov	sp, r7
 8021a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a96:	4770      	bx	lr
 8021a98:	40023c00 	.word	0x40023c00
 8021a9c:	45670123 	.word	0x45670123
 8021aa0:	cdef89ab 	.word	0xcdef89ab

08021aa4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8021aa4:	b580      	push	{r7, lr}
 8021aa6:	b084      	sub	sp, #16
 8021aa8:	af00      	add	r7, sp, #0
 8021aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8021aac:	2300      	movs	r3, #0
 8021aae:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8021ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8021b1c <FLASH_WaitForLastOperation+0x78>)
 8021ab2:	2200      	movs	r2, #0
 8021ab4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8021ab6:	f7ff fa67 	bl	8020f88 <HAL_GetTick>
 8021aba:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8021abc:	e010      	b.n	8021ae0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8021abe:	687b      	ldr	r3, [r7, #4]
 8021ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021ac4:	d00c      	beq.n	8021ae0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8021ac6:	687b      	ldr	r3, [r7, #4]
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	d007      	beq.n	8021adc <FLASH_WaitForLastOperation+0x38>
 8021acc:	f7ff fa5c 	bl	8020f88 <HAL_GetTick>
 8021ad0:	4602      	mov	r2, r0
 8021ad2:	68fb      	ldr	r3, [r7, #12]
 8021ad4:	1ad3      	subs	r3, r2, r3
 8021ad6:	687a      	ldr	r2, [r7, #4]
 8021ad8:	429a      	cmp	r2, r3
 8021ada:	d201      	bcs.n	8021ae0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8021adc:	2303      	movs	r3, #3
 8021ade:	e019      	b.n	8021b14 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8021ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8021b20 <FLASH_WaitForLastOperation+0x7c>)
 8021ae2:	68db      	ldr	r3, [r3, #12]
 8021ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8021ae8:	2b00      	cmp	r3, #0
 8021aea:	d1e8      	bne.n	8021abe <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8021aec:	4b0c      	ldr	r3, [pc, #48]	@ (8021b20 <FLASH_WaitForLastOperation+0x7c>)
 8021aee:	68db      	ldr	r3, [r3, #12]
 8021af0:	f003 0301 	and.w	r3, r3, #1
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	d002      	beq.n	8021afe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8021af8:	4b09      	ldr	r3, [pc, #36]	@ (8021b20 <FLASH_WaitForLastOperation+0x7c>)
 8021afa:	2201      	movs	r2, #1
 8021afc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8021afe:	4b08      	ldr	r3, [pc, #32]	@ (8021b20 <FLASH_WaitForLastOperation+0x7c>)
 8021b00:	68db      	ldr	r3, [r3, #12]
 8021b02:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8021b06:	2b00      	cmp	r3, #0
 8021b08:	d003      	beq.n	8021b12 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8021b0a:	f000 f8a5 	bl	8021c58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8021b0e:	2301      	movs	r3, #1
 8021b10:	e000      	b.n	8021b14 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8021b12:	2300      	movs	r3, #0

}
 8021b14:	4618      	mov	r0, r3
 8021b16:	3710      	adds	r7, #16
 8021b18:	46bd      	mov	sp, r7
 8021b1a:	bd80      	pop	{r7, pc}
 8021b1c:	2000013c 	.word	0x2000013c
 8021b20:	40023c00 	.word	0x40023c00

08021b24 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8021b24:	b480      	push	{r7}
 8021b26:	b085      	sub	sp, #20
 8021b28:	af00      	add	r7, sp, #0
 8021b2a:	60f8      	str	r0, [r7, #12]
 8021b2c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8021b30:	4b14      	ldr	r3, [pc, #80]	@ (8021b84 <FLASH_Program_DoubleWord+0x60>)
 8021b32:	691b      	ldr	r3, [r3, #16]
 8021b34:	4a13      	ldr	r2, [pc, #76]	@ (8021b84 <FLASH_Program_DoubleWord+0x60>)
 8021b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8021b3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8021b3c:	4b11      	ldr	r3, [pc, #68]	@ (8021b84 <FLASH_Program_DoubleWord+0x60>)
 8021b3e:	691b      	ldr	r3, [r3, #16]
 8021b40:	4a10      	ldr	r2, [pc, #64]	@ (8021b84 <FLASH_Program_DoubleWord+0x60>)
 8021b42:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8021b46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8021b48:	4b0e      	ldr	r3, [pc, #56]	@ (8021b84 <FLASH_Program_DoubleWord+0x60>)
 8021b4a:	691b      	ldr	r3, [r3, #16]
 8021b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8021b84 <FLASH_Program_DoubleWord+0x60>)
 8021b4e:	f043 0301 	orr.w	r3, r3, #1
 8021b52:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8021b54:	68fb      	ldr	r3, [r7, #12]
 8021b56:	683a      	ldr	r2, [r7, #0]
 8021b58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8021b5a:	f3bf 8f6f 	isb	sy
}
 8021b5e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8021b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8021b64:	f04f 0200 	mov.w	r2, #0
 8021b68:	f04f 0300 	mov.w	r3, #0
 8021b6c:	000a      	movs	r2, r1
 8021b6e:	2300      	movs	r3, #0
 8021b70:	68f9      	ldr	r1, [r7, #12]
 8021b72:	3104      	adds	r1, #4
 8021b74:	4613      	mov	r3, r2
 8021b76:	600b      	str	r3, [r1, #0]
}
 8021b78:	bf00      	nop
 8021b7a:	3714      	adds	r7, #20
 8021b7c:	46bd      	mov	sp, r7
 8021b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b82:	4770      	bx	lr
 8021b84:	40023c00 	.word	0x40023c00

08021b88 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8021b88:	b480      	push	{r7}
 8021b8a:	b083      	sub	sp, #12
 8021b8c:	af00      	add	r7, sp, #0
 8021b8e:	6078      	str	r0, [r7, #4]
 8021b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8021b92:	4b0d      	ldr	r3, [pc, #52]	@ (8021bc8 <FLASH_Program_Word+0x40>)
 8021b94:	691b      	ldr	r3, [r3, #16]
 8021b96:	4a0c      	ldr	r2, [pc, #48]	@ (8021bc8 <FLASH_Program_Word+0x40>)
 8021b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8021b9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8021b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8021bc8 <FLASH_Program_Word+0x40>)
 8021ba0:	691b      	ldr	r3, [r3, #16]
 8021ba2:	4a09      	ldr	r2, [pc, #36]	@ (8021bc8 <FLASH_Program_Word+0x40>)
 8021ba4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8021ba8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8021baa:	4b07      	ldr	r3, [pc, #28]	@ (8021bc8 <FLASH_Program_Word+0x40>)
 8021bac:	691b      	ldr	r3, [r3, #16]
 8021bae:	4a06      	ldr	r2, [pc, #24]	@ (8021bc8 <FLASH_Program_Word+0x40>)
 8021bb0:	f043 0301 	orr.w	r3, r3, #1
 8021bb4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	683a      	ldr	r2, [r7, #0]
 8021bba:	601a      	str	r2, [r3, #0]
}
 8021bbc:	bf00      	nop
 8021bbe:	370c      	adds	r7, #12
 8021bc0:	46bd      	mov	sp, r7
 8021bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bc6:	4770      	bx	lr
 8021bc8:	40023c00 	.word	0x40023c00

08021bcc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8021bcc:	b480      	push	{r7}
 8021bce:	b083      	sub	sp, #12
 8021bd0:	af00      	add	r7, sp, #0
 8021bd2:	6078      	str	r0, [r7, #4]
 8021bd4:	460b      	mov	r3, r1
 8021bd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8021bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8021c10 <FLASH_Program_HalfWord+0x44>)
 8021bda:	691b      	ldr	r3, [r3, #16]
 8021bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8021c10 <FLASH_Program_HalfWord+0x44>)
 8021bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8021be2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8021be4:	4b0a      	ldr	r3, [pc, #40]	@ (8021c10 <FLASH_Program_HalfWord+0x44>)
 8021be6:	691b      	ldr	r3, [r3, #16]
 8021be8:	4a09      	ldr	r2, [pc, #36]	@ (8021c10 <FLASH_Program_HalfWord+0x44>)
 8021bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021bee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8021bf0:	4b07      	ldr	r3, [pc, #28]	@ (8021c10 <FLASH_Program_HalfWord+0x44>)
 8021bf2:	691b      	ldr	r3, [r3, #16]
 8021bf4:	4a06      	ldr	r2, [pc, #24]	@ (8021c10 <FLASH_Program_HalfWord+0x44>)
 8021bf6:	f043 0301 	orr.w	r3, r3, #1
 8021bfa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8021bfc:	687b      	ldr	r3, [r7, #4]
 8021bfe:	887a      	ldrh	r2, [r7, #2]
 8021c00:	801a      	strh	r2, [r3, #0]
}
 8021c02:	bf00      	nop
 8021c04:	370c      	adds	r7, #12
 8021c06:	46bd      	mov	sp, r7
 8021c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c0c:	4770      	bx	lr
 8021c0e:	bf00      	nop
 8021c10:	40023c00 	.word	0x40023c00

08021c14 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8021c14:	b480      	push	{r7}
 8021c16:	b083      	sub	sp, #12
 8021c18:	af00      	add	r7, sp, #0
 8021c1a:	6078      	str	r0, [r7, #4]
 8021c1c:	460b      	mov	r3, r1
 8021c1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8021c20:	4b0c      	ldr	r3, [pc, #48]	@ (8021c54 <FLASH_Program_Byte+0x40>)
 8021c22:	691b      	ldr	r3, [r3, #16]
 8021c24:	4a0b      	ldr	r2, [pc, #44]	@ (8021c54 <FLASH_Program_Byte+0x40>)
 8021c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8021c2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8021c2c:	4b09      	ldr	r3, [pc, #36]	@ (8021c54 <FLASH_Program_Byte+0x40>)
 8021c2e:	4a09      	ldr	r2, [pc, #36]	@ (8021c54 <FLASH_Program_Byte+0x40>)
 8021c30:	691b      	ldr	r3, [r3, #16]
 8021c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8021c34:	4b07      	ldr	r3, [pc, #28]	@ (8021c54 <FLASH_Program_Byte+0x40>)
 8021c36:	691b      	ldr	r3, [r3, #16]
 8021c38:	4a06      	ldr	r2, [pc, #24]	@ (8021c54 <FLASH_Program_Byte+0x40>)
 8021c3a:	f043 0301 	orr.w	r3, r3, #1
 8021c3e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	78fa      	ldrb	r2, [r7, #3]
 8021c44:	701a      	strb	r2, [r3, #0]
}
 8021c46:	bf00      	nop
 8021c48:	370c      	adds	r7, #12
 8021c4a:	46bd      	mov	sp, r7
 8021c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c50:	4770      	bx	lr
 8021c52:	bf00      	nop
 8021c54:	40023c00 	.word	0x40023c00

08021c58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8021c58:	b480      	push	{r7}
 8021c5a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8021c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021c5e:	68db      	ldr	r3, [r3, #12]
 8021c60:	f003 0310 	and.w	r3, r3, #16
 8021c64:	2b00      	cmp	r3, #0
 8021c66:	d008      	beq.n	8021c7a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8021c68:	4b2d      	ldr	r3, [pc, #180]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021c6a:	69db      	ldr	r3, [r3, #28]
 8021c6c:	f043 0310 	orr.w	r3, r3, #16
 8021c70:	4a2b      	ldr	r2, [pc, #172]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021c72:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8021c74:	4b29      	ldr	r3, [pc, #164]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021c76:	2210      	movs	r2, #16
 8021c78:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8021c7a:	4b28      	ldr	r3, [pc, #160]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021c7c:	68db      	ldr	r3, [r3, #12]
 8021c7e:	f003 0320 	and.w	r3, r3, #32
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	d008      	beq.n	8021c98 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8021c86:	4b26      	ldr	r3, [pc, #152]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021c88:	69db      	ldr	r3, [r3, #28]
 8021c8a:	f043 0308 	orr.w	r3, r3, #8
 8021c8e:	4a24      	ldr	r2, [pc, #144]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021c90:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8021c92:	4b22      	ldr	r3, [pc, #136]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021c94:	2220      	movs	r2, #32
 8021c96:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8021c98:	4b20      	ldr	r3, [pc, #128]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021c9a:	68db      	ldr	r3, [r3, #12]
 8021c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	d008      	beq.n	8021cb6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8021ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021ca6:	69db      	ldr	r3, [r3, #28]
 8021ca8:	f043 0304 	orr.w	r3, r3, #4
 8021cac:	4a1c      	ldr	r2, [pc, #112]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021cae:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8021cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021cb2:	2240      	movs	r2, #64	@ 0x40
 8021cb4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8021cb6:	4b19      	ldr	r3, [pc, #100]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021cb8:	68db      	ldr	r3, [r3, #12]
 8021cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021cbe:	2b00      	cmp	r3, #0
 8021cc0:	d008      	beq.n	8021cd4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8021cc2:	4b17      	ldr	r3, [pc, #92]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021cc4:	69db      	ldr	r3, [r3, #28]
 8021cc6:	f043 0302 	orr.w	r3, r3, #2
 8021cca:	4a15      	ldr	r2, [pc, #84]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021ccc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8021cce:	4b13      	ldr	r3, [pc, #76]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021cd0:	2280      	movs	r2, #128	@ 0x80
 8021cd2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8021cd4:	4b11      	ldr	r3, [pc, #68]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021cd6:	68db      	ldr	r3, [r3, #12]
 8021cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	d009      	beq.n	8021cf4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8021ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021ce2:	69db      	ldr	r3, [r3, #28]
 8021ce4:	f043 0301 	orr.w	r3, r3, #1
 8021ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021cea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8021cec:	4b0b      	ldr	r3, [pc, #44]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021cf2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8021cf4:	4b09      	ldr	r3, [pc, #36]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021cf6:	68db      	ldr	r3, [r3, #12]
 8021cf8:	f003 0302 	and.w	r3, r3, #2
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d008      	beq.n	8021d12 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8021d00:	4b07      	ldr	r3, [pc, #28]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021d02:	69db      	ldr	r3, [r3, #28]
 8021d04:	f043 0320 	orr.w	r3, r3, #32
 8021d08:	4a05      	ldr	r2, [pc, #20]	@ (8021d20 <FLASH_SetErrorCode+0xc8>)
 8021d0a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8021d0c:	4b03      	ldr	r3, [pc, #12]	@ (8021d1c <FLASH_SetErrorCode+0xc4>)
 8021d0e:	2202      	movs	r2, #2
 8021d10:	60da      	str	r2, [r3, #12]
  }
}
 8021d12:	bf00      	nop
 8021d14:	46bd      	mov	sp, r7
 8021d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d1a:	4770      	bx	lr
 8021d1c:	40023c00 	.word	0x40023c00
 8021d20:	2000013c 	.word	0x2000013c

08021d24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8021d24:	b580      	push	{r7, lr}
 8021d26:	b084      	sub	sp, #16
 8021d28:	af00      	add	r7, sp, #0
 8021d2a:	6078      	str	r0, [r7, #4]
 8021d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8021d2e:	2301      	movs	r3, #1
 8021d30:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8021d32:	2300      	movs	r3, #0
 8021d34:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8021d36:	4b31      	ldr	r3, [pc, #196]	@ (8021dfc <HAL_FLASHEx_Erase+0xd8>)
 8021d38:	7e1b      	ldrb	r3, [r3, #24]
 8021d3a:	2b01      	cmp	r3, #1
 8021d3c:	d101      	bne.n	8021d42 <HAL_FLASHEx_Erase+0x1e>
 8021d3e:	2302      	movs	r3, #2
 8021d40:	e058      	b.n	8021df4 <HAL_FLASHEx_Erase+0xd0>
 8021d42:	4b2e      	ldr	r3, [pc, #184]	@ (8021dfc <HAL_FLASHEx_Erase+0xd8>)
 8021d44:	2201      	movs	r2, #1
 8021d46:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021d48:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8021d4c:	f7ff feaa 	bl	8021aa4 <FLASH_WaitForLastOperation>
 8021d50:	4603      	mov	r3, r0
 8021d52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8021d54:	7bfb      	ldrb	r3, [r7, #15]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d148      	bne.n	8021dec <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8021d5a:	683b      	ldr	r3, [r7, #0]
 8021d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8021d60:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8021d62:	687b      	ldr	r3, [r7, #4]
 8021d64:	681b      	ldr	r3, [r3, #0]
 8021d66:	2b01      	cmp	r3, #1
 8021d68:	d115      	bne.n	8021d96 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8021d6a:	687b      	ldr	r3, [r7, #4]
 8021d6c:	691b      	ldr	r3, [r3, #16]
 8021d6e:	b2da      	uxtb	r2, r3
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	685b      	ldr	r3, [r3, #4]
 8021d74:	4619      	mov	r1, r3
 8021d76:	4610      	mov	r0, r2
 8021d78:	f000 f844 	bl	8021e04 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021d7c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8021d80:	f7ff fe90 	bl	8021aa4 <FLASH_WaitForLastOperation>
 8021d84:	4603      	mov	r3, r0
 8021d86:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8021d88:	4b1d      	ldr	r3, [pc, #116]	@ (8021e00 <HAL_FLASHEx_Erase+0xdc>)
 8021d8a:	691b      	ldr	r3, [r3, #16]
 8021d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8021e00 <HAL_FLASHEx_Erase+0xdc>)
 8021d8e:	f023 0304 	bic.w	r3, r3, #4
 8021d92:	6113      	str	r3, [r2, #16]
 8021d94:	e028      	b.n	8021de8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8021d96:	687b      	ldr	r3, [r7, #4]
 8021d98:	689b      	ldr	r3, [r3, #8]
 8021d9a:	60bb      	str	r3, [r7, #8]
 8021d9c:	e01c      	b.n	8021dd8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8021d9e:	687b      	ldr	r3, [r7, #4]
 8021da0:	691b      	ldr	r3, [r3, #16]
 8021da2:	b2db      	uxtb	r3, r3
 8021da4:	4619      	mov	r1, r3
 8021da6:	68b8      	ldr	r0, [r7, #8]
 8021da8:	f000 f850 	bl	8021e4c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021dac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8021db0:	f7ff fe78 	bl	8021aa4 <FLASH_WaitForLastOperation>
 8021db4:	4603      	mov	r3, r0
 8021db6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8021db8:	4b11      	ldr	r3, [pc, #68]	@ (8021e00 <HAL_FLASHEx_Erase+0xdc>)
 8021dba:	691b      	ldr	r3, [r3, #16]
 8021dbc:	4a10      	ldr	r2, [pc, #64]	@ (8021e00 <HAL_FLASHEx_Erase+0xdc>)
 8021dbe:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8021dc2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8021dc4:	7bfb      	ldrb	r3, [r7, #15]
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	d003      	beq.n	8021dd2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8021dca:	683b      	ldr	r3, [r7, #0]
 8021dcc:	68ba      	ldr	r2, [r7, #8]
 8021dce:	601a      	str	r2, [r3, #0]
          break;
 8021dd0:	e00a      	b.n	8021de8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8021dd2:	68bb      	ldr	r3, [r7, #8]
 8021dd4:	3301      	adds	r3, #1
 8021dd6:	60bb      	str	r3, [r7, #8]
 8021dd8:	687b      	ldr	r3, [r7, #4]
 8021dda:	68da      	ldr	r2, [r3, #12]
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	689b      	ldr	r3, [r3, #8]
 8021de0:	4413      	add	r3, r2
 8021de2:	68ba      	ldr	r2, [r7, #8]
 8021de4:	429a      	cmp	r2, r3
 8021de6:	d3da      	bcc.n	8021d9e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8021de8:	f000 f878 	bl	8021edc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8021dec:	4b03      	ldr	r3, [pc, #12]	@ (8021dfc <HAL_FLASHEx_Erase+0xd8>)
 8021dee:	2200      	movs	r2, #0
 8021df0:	761a      	strb	r2, [r3, #24]

  return status;
 8021df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8021df4:	4618      	mov	r0, r3
 8021df6:	3710      	adds	r7, #16
 8021df8:	46bd      	mov	sp, r7
 8021dfa:	bd80      	pop	{r7, pc}
 8021dfc:	2000013c 	.word	0x2000013c
 8021e00:	40023c00 	.word	0x40023c00

08021e04 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8021e04:	b480      	push	{r7}
 8021e06:	b083      	sub	sp, #12
 8021e08:	af00      	add	r7, sp, #0
 8021e0a:	4603      	mov	r3, r0
 8021e0c:	6039      	str	r1, [r7, #0]
 8021e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8021e10:	4b0d      	ldr	r3, [pc, #52]	@ (8021e48 <FLASH_MassErase+0x44>)
 8021e12:	691b      	ldr	r3, [r3, #16]
 8021e14:	4a0c      	ldr	r2, [pc, #48]	@ (8021e48 <FLASH_MassErase+0x44>)
 8021e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8021e1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8021e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8021e48 <FLASH_MassErase+0x44>)
 8021e1e:	691b      	ldr	r3, [r3, #16]
 8021e20:	4a09      	ldr	r2, [pc, #36]	@ (8021e48 <FLASH_MassErase+0x44>)
 8021e22:	f043 0304 	orr.w	r3, r3, #4
 8021e26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8021e28:	4b07      	ldr	r3, [pc, #28]	@ (8021e48 <FLASH_MassErase+0x44>)
 8021e2a:	691a      	ldr	r2, [r3, #16]
 8021e2c:	79fb      	ldrb	r3, [r7, #7]
 8021e2e:	021b      	lsls	r3, r3, #8
 8021e30:	4313      	orrs	r3, r2
 8021e32:	4a05      	ldr	r2, [pc, #20]	@ (8021e48 <FLASH_MassErase+0x44>)
 8021e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021e38:	6113      	str	r3, [r2, #16]
}
 8021e3a:	bf00      	nop
 8021e3c:	370c      	adds	r7, #12
 8021e3e:	46bd      	mov	sp, r7
 8021e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e44:	4770      	bx	lr
 8021e46:	bf00      	nop
 8021e48:	40023c00 	.word	0x40023c00

08021e4c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8021e4c:	b480      	push	{r7}
 8021e4e:	b085      	sub	sp, #20
 8021e50:	af00      	add	r7, sp, #0
 8021e52:	6078      	str	r0, [r7, #4]
 8021e54:	460b      	mov	r3, r1
 8021e56:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8021e58:	2300      	movs	r3, #0
 8021e5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8021e5c:	78fb      	ldrb	r3, [r7, #3]
 8021e5e:	2b00      	cmp	r3, #0
 8021e60:	d102      	bne.n	8021e68 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8021e62:	2300      	movs	r3, #0
 8021e64:	60fb      	str	r3, [r7, #12]
 8021e66:	e010      	b.n	8021e8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8021e68:	78fb      	ldrb	r3, [r7, #3]
 8021e6a:	2b01      	cmp	r3, #1
 8021e6c:	d103      	bne.n	8021e76 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8021e6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021e72:	60fb      	str	r3, [r7, #12]
 8021e74:	e009      	b.n	8021e8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8021e76:	78fb      	ldrb	r3, [r7, #3]
 8021e78:	2b02      	cmp	r3, #2
 8021e7a:	d103      	bne.n	8021e84 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8021e7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8021e80:	60fb      	str	r3, [r7, #12]
 8021e82:	e002      	b.n	8021e8a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8021e84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8021e88:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8021e8a:	4b13      	ldr	r3, [pc, #76]	@ (8021ed8 <FLASH_Erase_Sector+0x8c>)
 8021e8c:	691b      	ldr	r3, [r3, #16]
 8021e8e:	4a12      	ldr	r2, [pc, #72]	@ (8021ed8 <FLASH_Erase_Sector+0x8c>)
 8021e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8021e94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8021e96:	4b10      	ldr	r3, [pc, #64]	@ (8021ed8 <FLASH_Erase_Sector+0x8c>)
 8021e98:	691a      	ldr	r2, [r3, #16]
 8021e9a:	490f      	ldr	r1, [pc, #60]	@ (8021ed8 <FLASH_Erase_Sector+0x8c>)
 8021e9c:	68fb      	ldr	r3, [r7, #12]
 8021e9e:	4313      	orrs	r3, r2
 8021ea0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8021ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8021ed8 <FLASH_Erase_Sector+0x8c>)
 8021ea4:	691b      	ldr	r3, [r3, #16]
 8021ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8021ed8 <FLASH_Erase_Sector+0x8c>)
 8021ea8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8021eac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8021eae:	4b0a      	ldr	r3, [pc, #40]	@ (8021ed8 <FLASH_Erase_Sector+0x8c>)
 8021eb0:	691a      	ldr	r2, [r3, #16]
 8021eb2:	687b      	ldr	r3, [r7, #4]
 8021eb4:	00db      	lsls	r3, r3, #3
 8021eb6:	4313      	orrs	r3, r2
 8021eb8:	4a07      	ldr	r2, [pc, #28]	@ (8021ed8 <FLASH_Erase_Sector+0x8c>)
 8021eba:	f043 0302 	orr.w	r3, r3, #2
 8021ebe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8021ec0:	4b05      	ldr	r3, [pc, #20]	@ (8021ed8 <FLASH_Erase_Sector+0x8c>)
 8021ec2:	691b      	ldr	r3, [r3, #16]
 8021ec4:	4a04      	ldr	r2, [pc, #16]	@ (8021ed8 <FLASH_Erase_Sector+0x8c>)
 8021ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021eca:	6113      	str	r3, [r2, #16]
}
 8021ecc:	bf00      	nop
 8021ece:	3714      	adds	r7, #20
 8021ed0:	46bd      	mov	sp, r7
 8021ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ed6:	4770      	bx	lr
 8021ed8:	40023c00 	.word	0x40023c00

08021edc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8021edc:	b480      	push	{r7}
 8021ede:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8021ee0:	4b20      	ldr	r3, [pc, #128]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8021ee8:	2b00      	cmp	r3, #0
 8021eea:	d017      	beq.n	8021f1c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8021eec:	4b1d      	ldr	r3, [pc, #116]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021eee:	681b      	ldr	r3, [r3, #0]
 8021ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021ef2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8021ef6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8021ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021efa:	681b      	ldr	r3, [r3, #0]
 8021efc:	4a19      	ldr	r2, [pc, #100]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021efe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8021f02:	6013      	str	r3, [r2, #0]
 8021f04:	4b17      	ldr	r3, [pc, #92]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f06:	681b      	ldr	r3, [r3, #0]
 8021f08:	4a16      	ldr	r2, [pc, #88]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8021f0e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8021f10:	4b14      	ldr	r3, [pc, #80]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f12:	681b      	ldr	r3, [r3, #0]
 8021f14:	4a13      	ldr	r2, [pc, #76]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8021f1a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8021f1c:	4b11      	ldr	r3, [pc, #68]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f1e:	681b      	ldr	r3, [r3, #0]
 8021f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	d017      	beq.n	8021f58 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8021f28:	4b0e      	ldr	r3, [pc, #56]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f2a:	681b      	ldr	r3, [r3, #0]
 8021f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8021f32:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8021f34:	4b0b      	ldr	r3, [pc, #44]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f36:	681b      	ldr	r3, [r3, #0]
 8021f38:	4a0a      	ldr	r2, [pc, #40]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8021f3e:	6013      	str	r3, [r2, #0]
 8021f40:	4b08      	ldr	r3, [pc, #32]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f42:	681b      	ldr	r3, [r3, #0]
 8021f44:	4a07      	ldr	r2, [pc, #28]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021f4a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8021f4c:	4b05      	ldr	r3, [pc, #20]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f4e:	681b      	ldr	r3, [r3, #0]
 8021f50:	4a04      	ldr	r2, [pc, #16]	@ (8021f64 <FLASH_FlushCaches+0x88>)
 8021f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8021f56:	6013      	str	r3, [r2, #0]
  }
}
 8021f58:	bf00      	nop
 8021f5a:	46bd      	mov	sp, r7
 8021f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f60:	4770      	bx	lr
 8021f62:	bf00      	nop
 8021f64:	40023c00 	.word	0x40023c00

08021f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8021f68:	b480      	push	{r7}
 8021f6a:	b089      	sub	sp, #36	@ 0x24
 8021f6c:	af00      	add	r7, sp, #0
 8021f6e:	6078      	str	r0, [r7, #4]
 8021f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8021f72:	2300      	movs	r3, #0
 8021f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8021f76:	2300      	movs	r3, #0
 8021f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8021f7a:	2300      	movs	r3, #0
 8021f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8021f7e:	2300      	movs	r3, #0
 8021f80:	61fb      	str	r3, [r7, #28]
 8021f82:	e159      	b.n	8022238 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8021f84:	2201      	movs	r2, #1
 8021f86:	69fb      	ldr	r3, [r7, #28]
 8021f88:	fa02 f303 	lsl.w	r3, r2, r3
 8021f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8021f8e:	683b      	ldr	r3, [r7, #0]
 8021f90:	681b      	ldr	r3, [r3, #0]
 8021f92:	697a      	ldr	r2, [r7, #20]
 8021f94:	4013      	ands	r3, r2
 8021f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8021f98:	693a      	ldr	r2, [r7, #16]
 8021f9a:	697b      	ldr	r3, [r7, #20]
 8021f9c:	429a      	cmp	r2, r3
 8021f9e:	f040 8148 	bne.w	8022232 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8021fa2:	683b      	ldr	r3, [r7, #0]
 8021fa4:	685b      	ldr	r3, [r3, #4]
 8021fa6:	f003 0303 	and.w	r3, r3, #3
 8021faa:	2b01      	cmp	r3, #1
 8021fac:	d005      	beq.n	8021fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8021fae:	683b      	ldr	r3, [r7, #0]
 8021fb0:	685b      	ldr	r3, [r3, #4]
 8021fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8021fb6:	2b02      	cmp	r3, #2
 8021fb8:	d130      	bne.n	802201c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8021fba:	687b      	ldr	r3, [r7, #4]
 8021fbc:	689b      	ldr	r3, [r3, #8]
 8021fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8021fc0:	69fb      	ldr	r3, [r7, #28]
 8021fc2:	005b      	lsls	r3, r3, #1
 8021fc4:	2203      	movs	r2, #3
 8021fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8021fca:	43db      	mvns	r3, r3
 8021fcc:	69ba      	ldr	r2, [r7, #24]
 8021fce:	4013      	ands	r3, r2
 8021fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8021fd2:	683b      	ldr	r3, [r7, #0]
 8021fd4:	68da      	ldr	r2, [r3, #12]
 8021fd6:	69fb      	ldr	r3, [r7, #28]
 8021fd8:	005b      	lsls	r3, r3, #1
 8021fda:	fa02 f303 	lsl.w	r3, r2, r3
 8021fde:	69ba      	ldr	r2, [r7, #24]
 8021fe0:	4313      	orrs	r3, r2
 8021fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8021fe4:	687b      	ldr	r3, [r7, #4]
 8021fe6:	69ba      	ldr	r2, [r7, #24]
 8021fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8021fea:	687b      	ldr	r3, [r7, #4]
 8021fec:	685b      	ldr	r3, [r3, #4]
 8021fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8021ff0:	2201      	movs	r2, #1
 8021ff2:	69fb      	ldr	r3, [r7, #28]
 8021ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8021ff8:	43db      	mvns	r3, r3
 8021ffa:	69ba      	ldr	r2, [r7, #24]
 8021ffc:	4013      	ands	r3, r2
 8021ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8022000:	683b      	ldr	r3, [r7, #0]
 8022002:	685b      	ldr	r3, [r3, #4]
 8022004:	091b      	lsrs	r3, r3, #4
 8022006:	f003 0201 	and.w	r2, r3, #1
 802200a:	69fb      	ldr	r3, [r7, #28]
 802200c:	fa02 f303 	lsl.w	r3, r2, r3
 8022010:	69ba      	ldr	r2, [r7, #24]
 8022012:	4313      	orrs	r3, r2
 8022014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	69ba      	ldr	r2, [r7, #24]
 802201a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802201c:	683b      	ldr	r3, [r7, #0]
 802201e:	685b      	ldr	r3, [r3, #4]
 8022020:	f003 0303 	and.w	r3, r3, #3
 8022024:	2b03      	cmp	r3, #3
 8022026:	d017      	beq.n	8022058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	68db      	ldr	r3, [r3, #12]
 802202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802202e:	69fb      	ldr	r3, [r7, #28]
 8022030:	005b      	lsls	r3, r3, #1
 8022032:	2203      	movs	r2, #3
 8022034:	fa02 f303 	lsl.w	r3, r2, r3
 8022038:	43db      	mvns	r3, r3
 802203a:	69ba      	ldr	r2, [r7, #24]
 802203c:	4013      	ands	r3, r2
 802203e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8022040:	683b      	ldr	r3, [r7, #0]
 8022042:	689a      	ldr	r2, [r3, #8]
 8022044:	69fb      	ldr	r3, [r7, #28]
 8022046:	005b      	lsls	r3, r3, #1
 8022048:	fa02 f303 	lsl.w	r3, r2, r3
 802204c:	69ba      	ldr	r2, [r7, #24]
 802204e:	4313      	orrs	r3, r2
 8022050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8022052:	687b      	ldr	r3, [r7, #4]
 8022054:	69ba      	ldr	r2, [r7, #24]
 8022056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8022058:	683b      	ldr	r3, [r7, #0]
 802205a:	685b      	ldr	r3, [r3, #4]
 802205c:	f003 0303 	and.w	r3, r3, #3
 8022060:	2b02      	cmp	r3, #2
 8022062:	d123      	bne.n	80220ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8022064:	69fb      	ldr	r3, [r7, #28]
 8022066:	08da      	lsrs	r2, r3, #3
 8022068:	687b      	ldr	r3, [r7, #4]
 802206a:	3208      	adds	r2, #8
 802206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8022072:	69fb      	ldr	r3, [r7, #28]
 8022074:	f003 0307 	and.w	r3, r3, #7
 8022078:	009b      	lsls	r3, r3, #2
 802207a:	220f      	movs	r2, #15
 802207c:	fa02 f303 	lsl.w	r3, r2, r3
 8022080:	43db      	mvns	r3, r3
 8022082:	69ba      	ldr	r2, [r7, #24]
 8022084:	4013      	ands	r3, r2
 8022086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8022088:	683b      	ldr	r3, [r7, #0]
 802208a:	691a      	ldr	r2, [r3, #16]
 802208c:	69fb      	ldr	r3, [r7, #28]
 802208e:	f003 0307 	and.w	r3, r3, #7
 8022092:	009b      	lsls	r3, r3, #2
 8022094:	fa02 f303 	lsl.w	r3, r2, r3
 8022098:	69ba      	ldr	r2, [r7, #24]
 802209a:	4313      	orrs	r3, r2
 802209c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802209e:	69fb      	ldr	r3, [r7, #28]
 80220a0:	08da      	lsrs	r2, r3, #3
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	3208      	adds	r2, #8
 80220a6:	69b9      	ldr	r1, [r7, #24]
 80220a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80220ac:	687b      	ldr	r3, [r7, #4]
 80220ae:	681b      	ldr	r3, [r3, #0]
 80220b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80220b2:	69fb      	ldr	r3, [r7, #28]
 80220b4:	005b      	lsls	r3, r3, #1
 80220b6:	2203      	movs	r2, #3
 80220b8:	fa02 f303 	lsl.w	r3, r2, r3
 80220bc:	43db      	mvns	r3, r3
 80220be:	69ba      	ldr	r2, [r7, #24]
 80220c0:	4013      	ands	r3, r2
 80220c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80220c4:	683b      	ldr	r3, [r7, #0]
 80220c6:	685b      	ldr	r3, [r3, #4]
 80220c8:	f003 0203 	and.w	r2, r3, #3
 80220cc:	69fb      	ldr	r3, [r7, #28]
 80220ce:	005b      	lsls	r3, r3, #1
 80220d0:	fa02 f303 	lsl.w	r3, r2, r3
 80220d4:	69ba      	ldr	r2, [r7, #24]
 80220d6:	4313      	orrs	r3, r2
 80220d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	69ba      	ldr	r2, [r7, #24]
 80220de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80220e0:	683b      	ldr	r3, [r7, #0]
 80220e2:	685b      	ldr	r3, [r3, #4]
 80220e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80220e8:	2b00      	cmp	r3, #0
 80220ea:	f000 80a2 	beq.w	8022232 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80220ee:	2300      	movs	r3, #0
 80220f0:	60fb      	str	r3, [r7, #12]
 80220f2:	4b57      	ldr	r3, [pc, #348]	@ (8022250 <HAL_GPIO_Init+0x2e8>)
 80220f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80220f6:	4a56      	ldr	r2, [pc, #344]	@ (8022250 <HAL_GPIO_Init+0x2e8>)
 80220f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80220fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80220fe:	4b54      	ldr	r3, [pc, #336]	@ (8022250 <HAL_GPIO_Init+0x2e8>)
 8022100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022106:	60fb      	str	r3, [r7, #12]
 8022108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802210a:	4a52      	ldr	r2, [pc, #328]	@ (8022254 <HAL_GPIO_Init+0x2ec>)
 802210c:	69fb      	ldr	r3, [r7, #28]
 802210e:	089b      	lsrs	r3, r3, #2
 8022110:	3302      	adds	r3, #2
 8022112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8022118:	69fb      	ldr	r3, [r7, #28]
 802211a:	f003 0303 	and.w	r3, r3, #3
 802211e:	009b      	lsls	r3, r3, #2
 8022120:	220f      	movs	r2, #15
 8022122:	fa02 f303 	lsl.w	r3, r2, r3
 8022126:	43db      	mvns	r3, r3
 8022128:	69ba      	ldr	r2, [r7, #24]
 802212a:	4013      	ands	r3, r2
 802212c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802212e:	687b      	ldr	r3, [r7, #4]
 8022130:	4a49      	ldr	r2, [pc, #292]	@ (8022258 <HAL_GPIO_Init+0x2f0>)
 8022132:	4293      	cmp	r3, r2
 8022134:	d019      	beq.n	802216a <HAL_GPIO_Init+0x202>
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	4a48      	ldr	r2, [pc, #288]	@ (802225c <HAL_GPIO_Init+0x2f4>)
 802213a:	4293      	cmp	r3, r2
 802213c:	d013      	beq.n	8022166 <HAL_GPIO_Init+0x1fe>
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	4a47      	ldr	r2, [pc, #284]	@ (8022260 <HAL_GPIO_Init+0x2f8>)
 8022142:	4293      	cmp	r3, r2
 8022144:	d00d      	beq.n	8022162 <HAL_GPIO_Init+0x1fa>
 8022146:	687b      	ldr	r3, [r7, #4]
 8022148:	4a46      	ldr	r2, [pc, #280]	@ (8022264 <HAL_GPIO_Init+0x2fc>)
 802214a:	4293      	cmp	r3, r2
 802214c:	d007      	beq.n	802215e <HAL_GPIO_Init+0x1f6>
 802214e:	687b      	ldr	r3, [r7, #4]
 8022150:	4a45      	ldr	r2, [pc, #276]	@ (8022268 <HAL_GPIO_Init+0x300>)
 8022152:	4293      	cmp	r3, r2
 8022154:	d101      	bne.n	802215a <HAL_GPIO_Init+0x1f2>
 8022156:	2304      	movs	r3, #4
 8022158:	e008      	b.n	802216c <HAL_GPIO_Init+0x204>
 802215a:	2307      	movs	r3, #7
 802215c:	e006      	b.n	802216c <HAL_GPIO_Init+0x204>
 802215e:	2303      	movs	r3, #3
 8022160:	e004      	b.n	802216c <HAL_GPIO_Init+0x204>
 8022162:	2302      	movs	r3, #2
 8022164:	e002      	b.n	802216c <HAL_GPIO_Init+0x204>
 8022166:	2301      	movs	r3, #1
 8022168:	e000      	b.n	802216c <HAL_GPIO_Init+0x204>
 802216a:	2300      	movs	r3, #0
 802216c:	69fa      	ldr	r2, [r7, #28]
 802216e:	f002 0203 	and.w	r2, r2, #3
 8022172:	0092      	lsls	r2, r2, #2
 8022174:	4093      	lsls	r3, r2
 8022176:	69ba      	ldr	r2, [r7, #24]
 8022178:	4313      	orrs	r3, r2
 802217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802217c:	4935      	ldr	r1, [pc, #212]	@ (8022254 <HAL_GPIO_Init+0x2ec>)
 802217e:	69fb      	ldr	r3, [r7, #28]
 8022180:	089b      	lsrs	r3, r3, #2
 8022182:	3302      	adds	r3, #2
 8022184:	69ba      	ldr	r2, [r7, #24]
 8022186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802218a:	4b38      	ldr	r3, [pc, #224]	@ (802226c <HAL_GPIO_Init+0x304>)
 802218c:	689b      	ldr	r3, [r3, #8]
 802218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022190:	693b      	ldr	r3, [r7, #16]
 8022192:	43db      	mvns	r3, r3
 8022194:	69ba      	ldr	r2, [r7, #24]
 8022196:	4013      	ands	r3, r2
 8022198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802219a:	683b      	ldr	r3, [r7, #0]
 802219c:	685b      	ldr	r3, [r3, #4]
 802219e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80221a2:	2b00      	cmp	r3, #0
 80221a4:	d003      	beq.n	80221ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80221a6:	69ba      	ldr	r2, [r7, #24]
 80221a8:	693b      	ldr	r3, [r7, #16]
 80221aa:	4313      	orrs	r3, r2
 80221ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80221ae:	4a2f      	ldr	r2, [pc, #188]	@ (802226c <HAL_GPIO_Init+0x304>)
 80221b0:	69bb      	ldr	r3, [r7, #24]
 80221b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80221b4:	4b2d      	ldr	r3, [pc, #180]	@ (802226c <HAL_GPIO_Init+0x304>)
 80221b6:	68db      	ldr	r3, [r3, #12]
 80221b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80221ba:	693b      	ldr	r3, [r7, #16]
 80221bc:	43db      	mvns	r3, r3
 80221be:	69ba      	ldr	r2, [r7, #24]
 80221c0:	4013      	ands	r3, r2
 80221c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80221c4:	683b      	ldr	r3, [r7, #0]
 80221c6:	685b      	ldr	r3, [r3, #4]
 80221c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80221cc:	2b00      	cmp	r3, #0
 80221ce:	d003      	beq.n	80221d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80221d0:	69ba      	ldr	r2, [r7, #24]
 80221d2:	693b      	ldr	r3, [r7, #16]
 80221d4:	4313      	orrs	r3, r2
 80221d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80221d8:	4a24      	ldr	r2, [pc, #144]	@ (802226c <HAL_GPIO_Init+0x304>)
 80221da:	69bb      	ldr	r3, [r7, #24]
 80221dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80221de:	4b23      	ldr	r3, [pc, #140]	@ (802226c <HAL_GPIO_Init+0x304>)
 80221e0:	685b      	ldr	r3, [r3, #4]
 80221e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80221e4:	693b      	ldr	r3, [r7, #16]
 80221e6:	43db      	mvns	r3, r3
 80221e8:	69ba      	ldr	r2, [r7, #24]
 80221ea:	4013      	ands	r3, r2
 80221ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80221ee:	683b      	ldr	r3, [r7, #0]
 80221f0:	685b      	ldr	r3, [r3, #4]
 80221f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	d003      	beq.n	8022202 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80221fa:	69ba      	ldr	r2, [r7, #24]
 80221fc:	693b      	ldr	r3, [r7, #16]
 80221fe:	4313      	orrs	r3, r2
 8022200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8022202:	4a1a      	ldr	r2, [pc, #104]	@ (802226c <HAL_GPIO_Init+0x304>)
 8022204:	69bb      	ldr	r3, [r7, #24]
 8022206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8022208:	4b18      	ldr	r3, [pc, #96]	@ (802226c <HAL_GPIO_Init+0x304>)
 802220a:	681b      	ldr	r3, [r3, #0]
 802220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802220e:	693b      	ldr	r3, [r7, #16]
 8022210:	43db      	mvns	r3, r3
 8022212:	69ba      	ldr	r2, [r7, #24]
 8022214:	4013      	ands	r3, r2
 8022216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8022218:	683b      	ldr	r3, [r7, #0]
 802221a:	685b      	ldr	r3, [r3, #4]
 802221c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8022220:	2b00      	cmp	r3, #0
 8022222:	d003      	beq.n	802222c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8022224:	69ba      	ldr	r2, [r7, #24]
 8022226:	693b      	ldr	r3, [r7, #16]
 8022228:	4313      	orrs	r3, r2
 802222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802222c:	4a0f      	ldr	r2, [pc, #60]	@ (802226c <HAL_GPIO_Init+0x304>)
 802222e:	69bb      	ldr	r3, [r7, #24]
 8022230:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8022232:	69fb      	ldr	r3, [r7, #28]
 8022234:	3301      	adds	r3, #1
 8022236:	61fb      	str	r3, [r7, #28]
 8022238:	69fb      	ldr	r3, [r7, #28]
 802223a:	2b0f      	cmp	r3, #15
 802223c:	f67f aea2 	bls.w	8021f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8022240:	bf00      	nop
 8022242:	bf00      	nop
 8022244:	3724      	adds	r7, #36	@ 0x24
 8022246:	46bd      	mov	sp, r7
 8022248:	f85d 7b04 	ldr.w	r7, [sp], #4
 802224c:	4770      	bx	lr
 802224e:	bf00      	nop
 8022250:	40023800 	.word	0x40023800
 8022254:	40013800 	.word	0x40013800
 8022258:	40020000 	.word	0x40020000
 802225c:	40020400 	.word	0x40020400
 8022260:	40020800 	.word	0x40020800
 8022264:	40020c00 	.word	0x40020c00
 8022268:	40021000 	.word	0x40021000
 802226c:	40013c00 	.word	0x40013c00

08022270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8022270:	b480      	push	{r7}
 8022272:	b083      	sub	sp, #12
 8022274:	af00      	add	r7, sp, #0
 8022276:	6078      	str	r0, [r7, #4]
 8022278:	460b      	mov	r3, r1
 802227a:	807b      	strh	r3, [r7, #2]
 802227c:	4613      	mov	r3, r2
 802227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8022280:	787b      	ldrb	r3, [r7, #1]
 8022282:	2b00      	cmp	r3, #0
 8022284:	d003      	beq.n	802228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8022286:	887a      	ldrh	r2, [r7, #2]
 8022288:	687b      	ldr	r3, [r7, #4]
 802228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 802228c:	e003      	b.n	8022296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802228e:	887b      	ldrh	r3, [r7, #2]
 8022290:	041a      	lsls	r2, r3, #16
 8022292:	687b      	ldr	r3, [r7, #4]
 8022294:	619a      	str	r2, [r3, #24]
}
 8022296:	bf00      	nop
 8022298:	370c      	adds	r7, #12
 802229a:	46bd      	mov	sp, r7
 802229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222a0:	4770      	bx	lr
	...

080222a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80222a4:	b580      	push	{r7, lr}
 80222a6:	b086      	sub	sp, #24
 80222a8:	af00      	add	r7, sp, #0
 80222aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80222ac:	687b      	ldr	r3, [r7, #4]
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d101      	bne.n	80222b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80222b2:	2301      	movs	r3, #1
 80222b4:	e267      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	681b      	ldr	r3, [r3, #0]
 80222ba:	f003 0301 	and.w	r3, r3, #1
 80222be:	2b00      	cmp	r3, #0
 80222c0:	d075      	beq.n	80223ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80222c2:	4b88      	ldr	r3, [pc, #544]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80222c4:	689b      	ldr	r3, [r3, #8]
 80222c6:	f003 030c 	and.w	r3, r3, #12
 80222ca:	2b04      	cmp	r3, #4
 80222cc:	d00c      	beq.n	80222e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80222ce:	4b85      	ldr	r3, [pc, #532]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80222d0:	689b      	ldr	r3, [r3, #8]
 80222d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80222d6:	2b08      	cmp	r3, #8
 80222d8:	d112      	bne.n	8022300 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80222da:	4b82      	ldr	r3, [pc, #520]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80222dc:	685b      	ldr	r3, [r3, #4]
 80222de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80222e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80222e6:	d10b      	bne.n	8022300 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80222e8:	4b7e      	ldr	r3, [pc, #504]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80222ea:	681b      	ldr	r3, [r3, #0]
 80222ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	d05b      	beq.n	80223ac <HAL_RCC_OscConfig+0x108>
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	685b      	ldr	r3, [r3, #4]
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	d157      	bne.n	80223ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80222fc:	2301      	movs	r3, #1
 80222fe:	e242      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8022300:	687b      	ldr	r3, [r7, #4]
 8022302:	685b      	ldr	r3, [r3, #4]
 8022304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8022308:	d106      	bne.n	8022318 <HAL_RCC_OscConfig+0x74>
 802230a:	4b76      	ldr	r3, [pc, #472]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 802230c:	681b      	ldr	r3, [r3, #0]
 802230e:	4a75      	ldr	r2, [pc, #468]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8022314:	6013      	str	r3, [r2, #0]
 8022316:	e01d      	b.n	8022354 <HAL_RCC_OscConfig+0xb0>
 8022318:	687b      	ldr	r3, [r7, #4]
 802231a:	685b      	ldr	r3, [r3, #4]
 802231c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8022320:	d10c      	bne.n	802233c <HAL_RCC_OscConfig+0x98>
 8022322:	4b70      	ldr	r3, [pc, #448]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022324:	681b      	ldr	r3, [r3, #0]
 8022326:	4a6f      	ldr	r2, [pc, #444]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 802232c:	6013      	str	r3, [r2, #0]
 802232e:	4b6d      	ldr	r3, [pc, #436]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	4a6c      	ldr	r2, [pc, #432]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8022338:	6013      	str	r3, [r2, #0]
 802233a:	e00b      	b.n	8022354 <HAL_RCC_OscConfig+0xb0>
 802233c:	4b69      	ldr	r3, [pc, #420]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 802233e:	681b      	ldr	r3, [r3, #0]
 8022340:	4a68      	ldr	r2, [pc, #416]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8022346:	6013      	str	r3, [r2, #0]
 8022348:	4b66      	ldr	r3, [pc, #408]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 802234a:	681b      	ldr	r3, [r3, #0]
 802234c:	4a65      	ldr	r2, [pc, #404]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 802234e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8022352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8022354:	687b      	ldr	r3, [r7, #4]
 8022356:	685b      	ldr	r3, [r3, #4]
 8022358:	2b00      	cmp	r3, #0
 802235a:	d013      	beq.n	8022384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802235c:	f7fe fe14 	bl	8020f88 <HAL_GetTick>
 8022360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022362:	e008      	b.n	8022376 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8022364:	f7fe fe10 	bl	8020f88 <HAL_GetTick>
 8022368:	4602      	mov	r2, r0
 802236a:	693b      	ldr	r3, [r7, #16]
 802236c:	1ad3      	subs	r3, r2, r3
 802236e:	2b64      	cmp	r3, #100	@ 0x64
 8022370:	d901      	bls.n	8022376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8022372:	2303      	movs	r3, #3
 8022374:	e207      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022376:	4b5b      	ldr	r3, [pc, #364]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022378:	681b      	ldr	r3, [r3, #0]
 802237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802237e:	2b00      	cmp	r3, #0
 8022380:	d0f0      	beq.n	8022364 <HAL_RCC_OscConfig+0xc0>
 8022382:	e014      	b.n	80223ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022384:	f7fe fe00 	bl	8020f88 <HAL_GetTick>
 8022388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802238a:	e008      	b.n	802239e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802238c:	f7fe fdfc 	bl	8020f88 <HAL_GetTick>
 8022390:	4602      	mov	r2, r0
 8022392:	693b      	ldr	r3, [r7, #16]
 8022394:	1ad3      	subs	r3, r2, r3
 8022396:	2b64      	cmp	r3, #100	@ 0x64
 8022398:	d901      	bls.n	802239e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802239a:	2303      	movs	r3, #3
 802239c:	e1f3      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802239e:	4b51      	ldr	r3, [pc, #324]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80223a0:	681b      	ldr	r3, [r3, #0]
 80223a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	d1f0      	bne.n	802238c <HAL_RCC_OscConfig+0xe8>
 80223aa:	e000      	b.n	80223ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80223ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	681b      	ldr	r3, [r3, #0]
 80223b2:	f003 0302 	and.w	r3, r3, #2
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d063      	beq.n	8022482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80223ba:	4b4a      	ldr	r3, [pc, #296]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80223bc:	689b      	ldr	r3, [r3, #8]
 80223be:	f003 030c 	and.w	r3, r3, #12
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d00b      	beq.n	80223de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80223c6:	4b47      	ldr	r3, [pc, #284]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80223c8:	689b      	ldr	r3, [r3, #8]
 80223ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80223ce:	2b08      	cmp	r3, #8
 80223d0:	d11c      	bne.n	802240c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80223d2:	4b44      	ldr	r3, [pc, #272]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80223d4:	685b      	ldr	r3, [r3, #4]
 80223d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d116      	bne.n	802240c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80223de:	4b41      	ldr	r3, [pc, #260]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	f003 0302 	and.w	r3, r3, #2
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d005      	beq.n	80223f6 <HAL_RCC_OscConfig+0x152>
 80223ea:	687b      	ldr	r3, [r7, #4]
 80223ec:	68db      	ldr	r3, [r3, #12]
 80223ee:	2b01      	cmp	r3, #1
 80223f0:	d001      	beq.n	80223f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80223f2:	2301      	movs	r3, #1
 80223f4:	e1c7      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80223f6:	4b3b      	ldr	r3, [pc, #236]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80223f8:	681b      	ldr	r3, [r3, #0]
 80223fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	691b      	ldr	r3, [r3, #16]
 8022402:	00db      	lsls	r3, r3, #3
 8022404:	4937      	ldr	r1, [pc, #220]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022406:	4313      	orrs	r3, r2
 8022408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802240a:	e03a      	b.n	8022482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	68db      	ldr	r3, [r3, #12]
 8022410:	2b00      	cmp	r3, #0
 8022412:	d020      	beq.n	8022456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8022414:	4b34      	ldr	r3, [pc, #208]	@ (80224e8 <HAL_RCC_OscConfig+0x244>)
 8022416:	2201      	movs	r2, #1
 8022418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802241a:	f7fe fdb5 	bl	8020f88 <HAL_GetTick>
 802241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022420:	e008      	b.n	8022434 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8022422:	f7fe fdb1 	bl	8020f88 <HAL_GetTick>
 8022426:	4602      	mov	r2, r0
 8022428:	693b      	ldr	r3, [r7, #16]
 802242a:	1ad3      	subs	r3, r2, r3
 802242c:	2b02      	cmp	r3, #2
 802242e:	d901      	bls.n	8022434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8022430:	2303      	movs	r3, #3
 8022432:	e1a8      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022434:	4b2b      	ldr	r3, [pc, #172]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022436:	681b      	ldr	r3, [r3, #0]
 8022438:	f003 0302 	and.w	r3, r3, #2
 802243c:	2b00      	cmp	r3, #0
 802243e:	d0f0      	beq.n	8022422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022440:	4b28      	ldr	r3, [pc, #160]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022442:	681b      	ldr	r3, [r3, #0]
 8022444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8022448:	687b      	ldr	r3, [r7, #4]
 802244a:	691b      	ldr	r3, [r3, #16]
 802244c:	00db      	lsls	r3, r3, #3
 802244e:	4925      	ldr	r1, [pc, #148]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022450:	4313      	orrs	r3, r2
 8022452:	600b      	str	r3, [r1, #0]
 8022454:	e015      	b.n	8022482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8022456:	4b24      	ldr	r3, [pc, #144]	@ (80224e8 <HAL_RCC_OscConfig+0x244>)
 8022458:	2200      	movs	r2, #0
 802245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802245c:	f7fe fd94 	bl	8020f88 <HAL_GetTick>
 8022460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8022462:	e008      	b.n	8022476 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8022464:	f7fe fd90 	bl	8020f88 <HAL_GetTick>
 8022468:	4602      	mov	r2, r0
 802246a:	693b      	ldr	r3, [r7, #16]
 802246c:	1ad3      	subs	r3, r2, r3
 802246e:	2b02      	cmp	r3, #2
 8022470:	d901      	bls.n	8022476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8022472:	2303      	movs	r3, #3
 8022474:	e187      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8022476:	4b1b      	ldr	r3, [pc, #108]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 8022478:	681b      	ldr	r3, [r3, #0]
 802247a:	f003 0302 	and.w	r3, r3, #2
 802247e:	2b00      	cmp	r3, #0
 8022480:	d1f0      	bne.n	8022464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	681b      	ldr	r3, [r3, #0]
 8022486:	f003 0308 	and.w	r3, r3, #8
 802248a:	2b00      	cmp	r3, #0
 802248c:	d036      	beq.n	80224fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	695b      	ldr	r3, [r3, #20]
 8022492:	2b00      	cmp	r3, #0
 8022494:	d016      	beq.n	80224c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8022496:	4b15      	ldr	r3, [pc, #84]	@ (80224ec <HAL_RCC_OscConfig+0x248>)
 8022498:	2201      	movs	r2, #1
 802249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802249c:	f7fe fd74 	bl	8020f88 <HAL_GetTick>
 80224a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80224a2:	e008      	b.n	80224b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80224a4:	f7fe fd70 	bl	8020f88 <HAL_GetTick>
 80224a8:	4602      	mov	r2, r0
 80224aa:	693b      	ldr	r3, [r7, #16]
 80224ac:	1ad3      	subs	r3, r2, r3
 80224ae:	2b02      	cmp	r3, #2
 80224b0:	d901      	bls.n	80224b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80224b2:	2303      	movs	r3, #3
 80224b4:	e167      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80224b6:	4b0b      	ldr	r3, [pc, #44]	@ (80224e4 <HAL_RCC_OscConfig+0x240>)
 80224b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80224ba:	f003 0302 	and.w	r3, r3, #2
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d0f0      	beq.n	80224a4 <HAL_RCC_OscConfig+0x200>
 80224c2:	e01b      	b.n	80224fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80224c4:	4b09      	ldr	r3, [pc, #36]	@ (80224ec <HAL_RCC_OscConfig+0x248>)
 80224c6:	2200      	movs	r2, #0
 80224c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80224ca:	f7fe fd5d 	bl	8020f88 <HAL_GetTick>
 80224ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80224d0:	e00e      	b.n	80224f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80224d2:	f7fe fd59 	bl	8020f88 <HAL_GetTick>
 80224d6:	4602      	mov	r2, r0
 80224d8:	693b      	ldr	r3, [r7, #16]
 80224da:	1ad3      	subs	r3, r2, r3
 80224dc:	2b02      	cmp	r3, #2
 80224de:	d907      	bls.n	80224f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80224e0:	2303      	movs	r3, #3
 80224e2:	e150      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
 80224e4:	40023800 	.word	0x40023800
 80224e8:	42470000 	.word	0x42470000
 80224ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80224f0:	4b88      	ldr	r3, [pc, #544]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80224f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80224f4:	f003 0302 	and.w	r3, r3, #2
 80224f8:	2b00      	cmp	r3, #0
 80224fa:	d1ea      	bne.n	80224d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80224fc:	687b      	ldr	r3, [r7, #4]
 80224fe:	681b      	ldr	r3, [r3, #0]
 8022500:	f003 0304 	and.w	r3, r3, #4
 8022504:	2b00      	cmp	r3, #0
 8022506:	f000 8097 	beq.w	8022638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802250a:	2300      	movs	r3, #0
 802250c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 802250e:	4b81      	ldr	r3, [pc, #516]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 8022510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8022516:	2b00      	cmp	r3, #0
 8022518:	d10f      	bne.n	802253a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802251a:	2300      	movs	r3, #0
 802251c:	60bb      	str	r3, [r7, #8]
 802251e:	4b7d      	ldr	r3, [pc, #500]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 8022520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022522:	4a7c      	ldr	r2, [pc, #496]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 8022524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8022528:	6413      	str	r3, [r2, #64]	@ 0x40
 802252a:	4b7a      	ldr	r3, [pc, #488]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 802252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8022532:	60bb      	str	r3, [r7, #8]
 8022534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8022536:	2301      	movs	r3, #1
 8022538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802253a:	4b77      	ldr	r3, [pc, #476]	@ (8022718 <HAL_RCC_OscConfig+0x474>)
 802253c:	681b      	ldr	r3, [r3, #0]
 802253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022542:	2b00      	cmp	r3, #0
 8022544:	d118      	bne.n	8022578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8022546:	4b74      	ldr	r3, [pc, #464]	@ (8022718 <HAL_RCC_OscConfig+0x474>)
 8022548:	681b      	ldr	r3, [r3, #0]
 802254a:	4a73      	ldr	r2, [pc, #460]	@ (8022718 <HAL_RCC_OscConfig+0x474>)
 802254c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8022550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8022552:	f7fe fd19 	bl	8020f88 <HAL_GetTick>
 8022556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022558:	e008      	b.n	802256c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802255a:	f7fe fd15 	bl	8020f88 <HAL_GetTick>
 802255e:	4602      	mov	r2, r0
 8022560:	693b      	ldr	r3, [r7, #16]
 8022562:	1ad3      	subs	r3, r2, r3
 8022564:	2b02      	cmp	r3, #2
 8022566:	d901      	bls.n	802256c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8022568:	2303      	movs	r3, #3
 802256a:	e10c      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802256c:	4b6a      	ldr	r3, [pc, #424]	@ (8022718 <HAL_RCC_OscConfig+0x474>)
 802256e:	681b      	ldr	r3, [r3, #0]
 8022570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022574:	2b00      	cmp	r3, #0
 8022576:	d0f0      	beq.n	802255a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	689b      	ldr	r3, [r3, #8]
 802257c:	2b01      	cmp	r3, #1
 802257e:	d106      	bne.n	802258e <HAL_RCC_OscConfig+0x2ea>
 8022580:	4b64      	ldr	r3, [pc, #400]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 8022582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022584:	4a63      	ldr	r2, [pc, #396]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 8022586:	f043 0301 	orr.w	r3, r3, #1
 802258a:	6713      	str	r3, [r2, #112]	@ 0x70
 802258c:	e01c      	b.n	80225c8 <HAL_RCC_OscConfig+0x324>
 802258e:	687b      	ldr	r3, [r7, #4]
 8022590:	689b      	ldr	r3, [r3, #8]
 8022592:	2b05      	cmp	r3, #5
 8022594:	d10c      	bne.n	80225b0 <HAL_RCC_OscConfig+0x30c>
 8022596:	4b5f      	ldr	r3, [pc, #380]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 8022598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802259a:	4a5e      	ldr	r2, [pc, #376]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 802259c:	f043 0304 	orr.w	r3, r3, #4
 80225a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80225a2:	4b5c      	ldr	r3, [pc, #368]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80225a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80225a6:	4a5b      	ldr	r2, [pc, #364]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80225a8:	f043 0301 	orr.w	r3, r3, #1
 80225ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80225ae:	e00b      	b.n	80225c8 <HAL_RCC_OscConfig+0x324>
 80225b0:	4b58      	ldr	r3, [pc, #352]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80225b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80225b4:	4a57      	ldr	r2, [pc, #348]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80225b6:	f023 0301 	bic.w	r3, r3, #1
 80225ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80225bc:	4b55      	ldr	r3, [pc, #340]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80225be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80225c0:	4a54      	ldr	r2, [pc, #336]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80225c2:	f023 0304 	bic.w	r3, r3, #4
 80225c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80225c8:	687b      	ldr	r3, [r7, #4]
 80225ca:	689b      	ldr	r3, [r3, #8]
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	d015      	beq.n	80225fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80225d0:	f7fe fcda 	bl	8020f88 <HAL_GetTick>
 80225d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80225d6:	e00a      	b.n	80225ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80225d8:	f7fe fcd6 	bl	8020f88 <HAL_GetTick>
 80225dc:	4602      	mov	r2, r0
 80225de:	693b      	ldr	r3, [r7, #16]
 80225e0:	1ad3      	subs	r3, r2, r3
 80225e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80225e6:	4293      	cmp	r3, r2
 80225e8:	d901      	bls.n	80225ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80225ea:	2303      	movs	r3, #3
 80225ec:	e0cb      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80225ee:	4b49      	ldr	r3, [pc, #292]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80225f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80225f2:	f003 0302 	and.w	r3, r3, #2
 80225f6:	2b00      	cmp	r3, #0
 80225f8:	d0ee      	beq.n	80225d8 <HAL_RCC_OscConfig+0x334>
 80225fa:	e014      	b.n	8022626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80225fc:	f7fe fcc4 	bl	8020f88 <HAL_GetTick>
 8022600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8022602:	e00a      	b.n	802261a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022604:	f7fe fcc0 	bl	8020f88 <HAL_GetTick>
 8022608:	4602      	mov	r2, r0
 802260a:	693b      	ldr	r3, [r7, #16]
 802260c:	1ad3      	subs	r3, r2, r3
 802260e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022612:	4293      	cmp	r3, r2
 8022614:	d901      	bls.n	802261a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8022616:	2303      	movs	r3, #3
 8022618:	e0b5      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802261a:	4b3e      	ldr	r3, [pc, #248]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 802261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802261e:	f003 0302 	and.w	r3, r3, #2
 8022622:	2b00      	cmp	r3, #0
 8022624:	d1ee      	bne.n	8022604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8022626:	7dfb      	ldrb	r3, [r7, #23]
 8022628:	2b01      	cmp	r3, #1
 802262a:	d105      	bne.n	8022638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802262c:	4b39      	ldr	r3, [pc, #228]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 802262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022630:	4a38      	ldr	r2, [pc, #224]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 8022632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8022636:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	699b      	ldr	r3, [r3, #24]
 802263c:	2b00      	cmp	r3, #0
 802263e:	f000 80a1 	beq.w	8022784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8022642:	4b34      	ldr	r3, [pc, #208]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 8022644:	689b      	ldr	r3, [r3, #8]
 8022646:	f003 030c 	and.w	r3, r3, #12
 802264a:	2b08      	cmp	r3, #8
 802264c:	d05c      	beq.n	8022708 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802264e:	687b      	ldr	r3, [r7, #4]
 8022650:	699b      	ldr	r3, [r3, #24]
 8022652:	2b02      	cmp	r3, #2
 8022654:	d141      	bne.n	80226da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022656:	4b31      	ldr	r3, [pc, #196]	@ (802271c <HAL_RCC_OscConfig+0x478>)
 8022658:	2200      	movs	r2, #0
 802265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802265c:	f7fe fc94 	bl	8020f88 <HAL_GetTick>
 8022660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022662:	e008      	b.n	8022676 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022664:	f7fe fc90 	bl	8020f88 <HAL_GetTick>
 8022668:	4602      	mov	r2, r0
 802266a:	693b      	ldr	r3, [r7, #16]
 802266c:	1ad3      	subs	r3, r2, r3
 802266e:	2b02      	cmp	r3, #2
 8022670:	d901      	bls.n	8022676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8022672:	2303      	movs	r3, #3
 8022674:	e087      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022676:	4b27      	ldr	r3, [pc, #156]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 8022678:	681b      	ldr	r3, [r3, #0]
 802267a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802267e:	2b00      	cmp	r3, #0
 8022680:	d1f0      	bne.n	8022664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	69da      	ldr	r2, [r3, #28]
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	6a1b      	ldr	r3, [r3, #32]
 802268a:	431a      	orrs	r2, r3
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022690:	019b      	lsls	r3, r3, #6
 8022692:	431a      	orrs	r2, r3
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022698:	085b      	lsrs	r3, r3, #1
 802269a:	3b01      	subs	r3, #1
 802269c:	041b      	lsls	r3, r3, #16
 802269e:	431a      	orrs	r2, r3
 80226a0:	687b      	ldr	r3, [r7, #4]
 80226a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80226a4:	061b      	lsls	r3, r3, #24
 80226a6:	491b      	ldr	r1, [pc, #108]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80226a8:	4313      	orrs	r3, r2
 80226aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80226ac:	4b1b      	ldr	r3, [pc, #108]	@ (802271c <HAL_RCC_OscConfig+0x478>)
 80226ae:	2201      	movs	r2, #1
 80226b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80226b2:	f7fe fc69 	bl	8020f88 <HAL_GetTick>
 80226b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80226b8:	e008      	b.n	80226cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80226ba:	f7fe fc65 	bl	8020f88 <HAL_GetTick>
 80226be:	4602      	mov	r2, r0
 80226c0:	693b      	ldr	r3, [r7, #16]
 80226c2:	1ad3      	subs	r3, r2, r3
 80226c4:	2b02      	cmp	r3, #2
 80226c6:	d901      	bls.n	80226cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80226c8:	2303      	movs	r3, #3
 80226ca:	e05c      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80226cc:	4b11      	ldr	r3, [pc, #68]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80226ce:	681b      	ldr	r3, [r3, #0]
 80226d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	d0f0      	beq.n	80226ba <HAL_RCC_OscConfig+0x416>
 80226d8:	e054      	b.n	8022784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80226da:	4b10      	ldr	r3, [pc, #64]	@ (802271c <HAL_RCC_OscConfig+0x478>)
 80226dc:	2200      	movs	r2, #0
 80226de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80226e0:	f7fe fc52 	bl	8020f88 <HAL_GetTick>
 80226e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80226e6:	e008      	b.n	80226fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80226e8:	f7fe fc4e 	bl	8020f88 <HAL_GetTick>
 80226ec:	4602      	mov	r2, r0
 80226ee:	693b      	ldr	r3, [r7, #16]
 80226f0:	1ad3      	subs	r3, r2, r3
 80226f2:	2b02      	cmp	r3, #2
 80226f4:	d901      	bls.n	80226fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80226f6:	2303      	movs	r3, #3
 80226f8:	e045      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80226fa:	4b06      	ldr	r3, [pc, #24]	@ (8022714 <HAL_RCC_OscConfig+0x470>)
 80226fc:	681b      	ldr	r3, [r3, #0]
 80226fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022702:	2b00      	cmp	r3, #0
 8022704:	d1f0      	bne.n	80226e8 <HAL_RCC_OscConfig+0x444>
 8022706:	e03d      	b.n	8022784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	699b      	ldr	r3, [r3, #24]
 802270c:	2b01      	cmp	r3, #1
 802270e:	d107      	bne.n	8022720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8022710:	2301      	movs	r3, #1
 8022712:	e038      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
 8022714:	40023800 	.word	0x40023800
 8022718:	40007000 	.word	0x40007000
 802271c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8022720:	4b1b      	ldr	r3, [pc, #108]	@ (8022790 <HAL_RCC_OscConfig+0x4ec>)
 8022722:	685b      	ldr	r3, [r3, #4]
 8022724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	699b      	ldr	r3, [r3, #24]
 802272a:	2b01      	cmp	r3, #1
 802272c:	d028      	beq.n	8022780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802272e:	68fb      	ldr	r3, [r7, #12]
 8022730:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8022738:	429a      	cmp	r2, r3
 802273a:	d121      	bne.n	8022780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802273c:	68fb      	ldr	r3, [r7, #12]
 802273e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8022742:	687b      	ldr	r3, [r7, #4]
 8022744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022746:	429a      	cmp	r2, r3
 8022748:	d11a      	bne.n	8022780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802274a:	68fa      	ldr	r2, [r7, #12]
 802274c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8022750:	4013      	ands	r3, r2
 8022752:	687a      	ldr	r2, [r7, #4]
 8022754:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8022756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8022758:	4293      	cmp	r3, r2
 802275a:	d111      	bne.n	8022780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802275c:	68fb      	ldr	r3, [r7, #12]
 802275e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8022762:	687b      	ldr	r3, [r7, #4]
 8022764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022766:	085b      	lsrs	r3, r3, #1
 8022768:	3b01      	subs	r3, #1
 802276a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802276c:	429a      	cmp	r2, r3
 802276e:	d107      	bne.n	8022780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8022770:	68fb      	ldr	r3, [r7, #12]
 8022772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802277a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802277c:	429a      	cmp	r2, r3
 802277e:	d001      	beq.n	8022784 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8022780:	2301      	movs	r3, #1
 8022782:	e000      	b.n	8022786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8022784:	2300      	movs	r3, #0
}
 8022786:	4618      	mov	r0, r3
 8022788:	3718      	adds	r7, #24
 802278a:	46bd      	mov	sp, r7
 802278c:	bd80      	pop	{r7, pc}
 802278e:	bf00      	nop
 8022790:	40023800 	.word	0x40023800

08022794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8022794:	b580      	push	{r7, lr}
 8022796:	b084      	sub	sp, #16
 8022798:	af00      	add	r7, sp, #0
 802279a:	6078      	str	r0, [r7, #4]
 802279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802279e:	687b      	ldr	r3, [r7, #4]
 80227a0:	2b00      	cmp	r3, #0
 80227a2:	d101      	bne.n	80227a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80227a4:	2301      	movs	r3, #1
 80227a6:	e0cc      	b.n	8022942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80227a8:	4b68      	ldr	r3, [pc, #416]	@ (802294c <HAL_RCC_ClockConfig+0x1b8>)
 80227aa:	681b      	ldr	r3, [r3, #0]
 80227ac:	f003 0307 	and.w	r3, r3, #7
 80227b0:	683a      	ldr	r2, [r7, #0]
 80227b2:	429a      	cmp	r2, r3
 80227b4:	d90c      	bls.n	80227d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80227b6:	4b65      	ldr	r3, [pc, #404]	@ (802294c <HAL_RCC_ClockConfig+0x1b8>)
 80227b8:	683a      	ldr	r2, [r7, #0]
 80227ba:	b2d2      	uxtb	r2, r2
 80227bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80227be:	4b63      	ldr	r3, [pc, #396]	@ (802294c <HAL_RCC_ClockConfig+0x1b8>)
 80227c0:	681b      	ldr	r3, [r3, #0]
 80227c2:	f003 0307 	and.w	r3, r3, #7
 80227c6:	683a      	ldr	r2, [r7, #0]
 80227c8:	429a      	cmp	r2, r3
 80227ca:	d001      	beq.n	80227d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80227cc:	2301      	movs	r3, #1
 80227ce:	e0b8      	b.n	8022942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	681b      	ldr	r3, [r3, #0]
 80227d4:	f003 0302 	and.w	r3, r3, #2
 80227d8:	2b00      	cmp	r3, #0
 80227da:	d020      	beq.n	802281e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80227dc:	687b      	ldr	r3, [r7, #4]
 80227de:	681b      	ldr	r3, [r3, #0]
 80227e0:	f003 0304 	and.w	r3, r3, #4
 80227e4:	2b00      	cmp	r3, #0
 80227e6:	d005      	beq.n	80227f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80227e8:	4b59      	ldr	r3, [pc, #356]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 80227ea:	689b      	ldr	r3, [r3, #8]
 80227ec:	4a58      	ldr	r2, [pc, #352]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 80227ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80227f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	681b      	ldr	r3, [r3, #0]
 80227f8:	f003 0308 	and.w	r3, r3, #8
 80227fc:	2b00      	cmp	r3, #0
 80227fe:	d005      	beq.n	802280c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8022800:	4b53      	ldr	r3, [pc, #332]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 8022802:	689b      	ldr	r3, [r3, #8]
 8022804:	4a52      	ldr	r2, [pc, #328]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 8022806:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 802280a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802280c:	4b50      	ldr	r3, [pc, #320]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 802280e:	689b      	ldr	r3, [r3, #8]
 8022810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8022814:	687b      	ldr	r3, [r7, #4]
 8022816:	689b      	ldr	r3, [r3, #8]
 8022818:	494d      	ldr	r1, [pc, #308]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 802281a:	4313      	orrs	r3, r2
 802281c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802281e:	687b      	ldr	r3, [r7, #4]
 8022820:	681b      	ldr	r3, [r3, #0]
 8022822:	f003 0301 	and.w	r3, r3, #1
 8022826:	2b00      	cmp	r3, #0
 8022828:	d044      	beq.n	80228b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802282a:	687b      	ldr	r3, [r7, #4]
 802282c:	685b      	ldr	r3, [r3, #4]
 802282e:	2b01      	cmp	r3, #1
 8022830:	d107      	bne.n	8022842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022832:	4b47      	ldr	r3, [pc, #284]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 8022834:	681b      	ldr	r3, [r3, #0]
 8022836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802283a:	2b00      	cmp	r3, #0
 802283c:	d119      	bne.n	8022872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802283e:	2301      	movs	r3, #1
 8022840:	e07f      	b.n	8022942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	685b      	ldr	r3, [r3, #4]
 8022846:	2b02      	cmp	r3, #2
 8022848:	d003      	beq.n	8022852 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802284a:	687b      	ldr	r3, [r7, #4]
 802284c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802284e:	2b03      	cmp	r3, #3
 8022850:	d107      	bne.n	8022862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022852:	4b3f      	ldr	r3, [pc, #252]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802285a:	2b00      	cmp	r3, #0
 802285c:	d109      	bne.n	8022872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802285e:	2301      	movs	r3, #1
 8022860:	e06f      	b.n	8022942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022862:	4b3b      	ldr	r3, [pc, #236]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 8022864:	681b      	ldr	r3, [r3, #0]
 8022866:	f003 0302 	and.w	r3, r3, #2
 802286a:	2b00      	cmp	r3, #0
 802286c:	d101      	bne.n	8022872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802286e:	2301      	movs	r3, #1
 8022870:	e067      	b.n	8022942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8022872:	4b37      	ldr	r3, [pc, #220]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 8022874:	689b      	ldr	r3, [r3, #8]
 8022876:	f023 0203 	bic.w	r2, r3, #3
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	685b      	ldr	r3, [r3, #4]
 802287e:	4934      	ldr	r1, [pc, #208]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 8022880:	4313      	orrs	r3, r2
 8022882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8022884:	f7fe fb80 	bl	8020f88 <HAL_GetTick>
 8022888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802288a:	e00a      	b.n	80228a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802288c:	f7fe fb7c 	bl	8020f88 <HAL_GetTick>
 8022890:	4602      	mov	r2, r0
 8022892:	68fb      	ldr	r3, [r7, #12]
 8022894:	1ad3      	subs	r3, r2, r3
 8022896:	f241 3288 	movw	r2, #5000	@ 0x1388
 802289a:	4293      	cmp	r3, r2
 802289c:	d901      	bls.n	80228a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802289e:	2303      	movs	r3, #3
 80228a0:	e04f      	b.n	8022942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80228a2:	4b2b      	ldr	r3, [pc, #172]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 80228a4:	689b      	ldr	r3, [r3, #8]
 80228a6:	f003 020c 	and.w	r2, r3, #12
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	685b      	ldr	r3, [r3, #4]
 80228ae:	009b      	lsls	r3, r3, #2
 80228b0:	429a      	cmp	r2, r3
 80228b2:	d1eb      	bne.n	802288c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80228b4:	4b25      	ldr	r3, [pc, #148]	@ (802294c <HAL_RCC_ClockConfig+0x1b8>)
 80228b6:	681b      	ldr	r3, [r3, #0]
 80228b8:	f003 0307 	and.w	r3, r3, #7
 80228bc:	683a      	ldr	r2, [r7, #0]
 80228be:	429a      	cmp	r2, r3
 80228c0:	d20c      	bcs.n	80228dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80228c2:	4b22      	ldr	r3, [pc, #136]	@ (802294c <HAL_RCC_ClockConfig+0x1b8>)
 80228c4:	683a      	ldr	r2, [r7, #0]
 80228c6:	b2d2      	uxtb	r2, r2
 80228c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80228ca:	4b20      	ldr	r3, [pc, #128]	@ (802294c <HAL_RCC_ClockConfig+0x1b8>)
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	f003 0307 	and.w	r3, r3, #7
 80228d2:	683a      	ldr	r2, [r7, #0]
 80228d4:	429a      	cmp	r2, r3
 80228d6:	d001      	beq.n	80228dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80228d8:	2301      	movs	r3, #1
 80228da:	e032      	b.n	8022942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	681b      	ldr	r3, [r3, #0]
 80228e0:	f003 0304 	and.w	r3, r3, #4
 80228e4:	2b00      	cmp	r3, #0
 80228e6:	d008      	beq.n	80228fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80228e8:	4b19      	ldr	r3, [pc, #100]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 80228ea:	689b      	ldr	r3, [r3, #8]
 80228ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80228f0:	687b      	ldr	r3, [r7, #4]
 80228f2:	68db      	ldr	r3, [r3, #12]
 80228f4:	4916      	ldr	r1, [pc, #88]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 80228f6:	4313      	orrs	r3, r2
 80228f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	681b      	ldr	r3, [r3, #0]
 80228fe:	f003 0308 	and.w	r3, r3, #8
 8022902:	2b00      	cmp	r3, #0
 8022904:	d009      	beq.n	802291a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8022906:	4b12      	ldr	r3, [pc, #72]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 8022908:	689b      	ldr	r3, [r3, #8]
 802290a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 802290e:	687b      	ldr	r3, [r7, #4]
 8022910:	691b      	ldr	r3, [r3, #16]
 8022912:	00db      	lsls	r3, r3, #3
 8022914:	490e      	ldr	r1, [pc, #56]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 8022916:	4313      	orrs	r3, r2
 8022918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 802291a:	f000 f821 	bl	8022960 <HAL_RCC_GetSysClockFreq>
 802291e:	4602      	mov	r2, r0
 8022920:	4b0b      	ldr	r3, [pc, #44]	@ (8022950 <HAL_RCC_ClockConfig+0x1bc>)
 8022922:	689b      	ldr	r3, [r3, #8]
 8022924:	091b      	lsrs	r3, r3, #4
 8022926:	f003 030f 	and.w	r3, r3, #15
 802292a:	490a      	ldr	r1, [pc, #40]	@ (8022954 <HAL_RCC_ClockConfig+0x1c0>)
 802292c:	5ccb      	ldrb	r3, [r1, r3]
 802292e:	fa22 f303 	lsr.w	r3, r2, r3
 8022932:	4a09      	ldr	r2, [pc, #36]	@ (8022958 <HAL_RCC_ClockConfig+0x1c4>)
 8022934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8022936:	4b09      	ldr	r3, [pc, #36]	@ (802295c <HAL_RCC_ClockConfig+0x1c8>)
 8022938:	681b      	ldr	r3, [r3, #0]
 802293a:	4618      	mov	r0, r3
 802293c:	f7fe fae0 	bl	8020f00 <HAL_InitTick>

  return HAL_OK;
 8022940:	2300      	movs	r3, #0
}
 8022942:	4618      	mov	r0, r3
 8022944:	3710      	adds	r7, #16
 8022946:	46bd      	mov	sp, r7
 8022948:	bd80      	pop	{r7, pc}
 802294a:	bf00      	nop
 802294c:	40023c00 	.word	0x40023c00
 8022950:	40023800 	.word	0x40023800
 8022954:	08027834 	.word	0x08027834
 8022958:	20000000 	.word	0x20000000
 802295c:	20000004 	.word	0x20000004

08022960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8022960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022964:	b090      	sub	sp, #64	@ 0x40
 8022966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8022968:	2300      	movs	r3, #0
 802296a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 802296c:	2300      	movs	r3, #0
 802296e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8022970:	2300      	movs	r3, #0
 8022972:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8022974:	2300      	movs	r3, #0
 8022976:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022978:	4b59      	ldr	r3, [pc, #356]	@ (8022ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 802297a:	689b      	ldr	r3, [r3, #8]
 802297c:	f003 030c 	and.w	r3, r3, #12
 8022980:	2b08      	cmp	r3, #8
 8022982:	d00d      	beq.n	80229a0 <HAL_RCC_GetSysClockFreq+0x40>
 8022984:	2b08      	cmp	r3, #8
 8022986:	f200 80a1 	bhi.w	8022acc <HAL_RCC_GetSysClockFreq+0x16c>
 802298a:	2b00      	cmp	r3, #0
 802298c:	d002      	beq.n	8022994 <HAL_RCC_GetSysClockFreq+0x34>
 802298e:	2b04      	cmp	r3, #4
 8022990:	d003      	beq.n	802299a <HAL_RCC_GetSysClockFreq+0x3a>
 8022992:	e09b      	b.n	8022acc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8022994:	4b53      	ldr	r3, [pc, #332]	@ (8022ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8022996:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8022998:	e09b      	b.n	8022ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802299a:	4b53      	ldr	r3, [pc, #332]	@ (8022ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 802299c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 802299e:	e098      	b.n	8022ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80229a0:	4b4f      	ldr	r3, [pc, #316]	@ (8022ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80229a2:	685b      	ldr	r3, [r3, #4]
 80229a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80229a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80229aa:	4b4d      	ldr	r3, [pc, #308]	@ (8022ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80229ac:	685b      	ldr	r3, [r3, #4]
 80229ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d028      	beq.n	8022a08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80229b6:	4b4a      	ldr	r3, [pc, #296]	@ (8022ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80229b8:	685b      	ldr	r3, [r3, #4]
 80229ba:	099b      	lsrs	r3, r3, #6
 80229bc:	2200      	movs	r2, #0
 80229be:	623b      	str	r3, [r7, #32]
 80229c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80229c2:	6a3b      	ldr	r3, [r7, #32]
 80229c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80229c8:	2100      	movs	r1, #0
 80229ca:	4b47      	ldr	r3, [pc, #284]	@ (8022ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80229cc:	fb03 f201 	mul.w	r2, r3, r1
 80229d0:	2300      	movs	r3, #0
 80229d2:	fb00 f303 	mul.w	r3, r0, r3
 80229d6:	4413      	add	r3, r2
 80229d8:	4a43      	ldr	r2, [pc, #268]	@ (8022ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80229da:	fba0 1202 	umull	r1, r2, r0, r2
 80229de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80229e0:	460a      	mov	r2, r1
 80229e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80229e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80229e6:	4413      	add	r3, r2
 80229e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80229ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80229ec:	2200      	movs	r2, #0
 80229ee:	61bb      	str	r3, [r7, #24]
 80229f0:	61fa      	str	r2, [r7, #28]
 80229f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80229f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80229fa:	f7fd fc49 	bl	8020290 <__aeabi_uldivmod>
 80229fe:	4602      	mov	r2, r0
 8022a00:	460b      	mov	r3, r1
 8022a02:	4613      	mov	r3, r2
 8022a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8022a06:	e053      	b.n	8022ab0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8022a08:	4b35      	ldr	r3, [pc, #212]	@ (8022ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8022a0a:	685b      	ldr	r3, [r3, #4]
 8022a0c:	099b      	lsrs	r3, r3, #6
 8022a0e:	2200      	movs	r2, #0
 8022a10:	613b      	str	r3, [r7, #16]
 8022a12:	617a      	str	r2, [r7, #20]
 8022a14:	693b      	ldr	r3, [r7, #16]
 8022a16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8022a1a:	f04f 0b00 	mov.w	fp, #0
 8022a1e:	4652      	mov	r2, sl
 8022a20:	465b      	mov	r3, fp
 8022a22:	f04f 0000 	mov.w	r0, #0
 8022a26:	f04f 0100 	mov.w	r1, #0
 8022a2a:	0159      	lsls	r1, r3, #5
 8022a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8022a30:	0150      	lsls	r0, r2, #5
 8022a32:	4602      	mov	r2, r0
 8022a34:	460b      	mov	r3, r1
 8022a36:	ebb2 080a 	subs.w	r8, r2, sl
 8022a3a:	eb63 090b 	sbc.w	r9, r3, fp
 8022a3e:	f04f 0200 	mov.w	r2, #0
 8022a42:	f04f 0300 	mov.w	r3, #0
 8022a46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8022a4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8022a4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8022a52:	ebb2 0408 	subs.w	r4, r2, r8
 8022a56:	eb63 0509 	sbc.w	r5, r3, r9
 8022a5a:	f04f 0200 	mov.w	r2, #0
 8022a5e:	f04f 0300 	mov.w	r3, #0
 8022a62:	00eb      	lsls	r3, r5, #3
 8022a64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8022a68:	00e2      	lsls	r2, r4, #3
 8022a6a:	4614      	mov	r4, r2
 8022a6c:	461d      	mov	r5, r3
 8022a6e:	eb14 030a 	adds.w	r3, r4, sl
 8022a72:	603b      	str	r3, [r7, #0]
 8022a74:	eb45 030b 	adc.w	r3, r5, fp
 8022a78:	607b      	str	r3, [r7, #4]
 8022a7a:	f04f 0200 	mov.w	r2, #0
 8022a7e:	f04f 0300 	mov.w	r3, #0
 8022a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8022a86:	4629      	mov	r1, r5
 8022a88:	028b      	lsls	r3, r1, #10
 8022a8a:	4621      	mov	r1, r4
 8022a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8022a90:	4621      	mov	r1, r4
 8022a92:	028a      	lsls	r2, r1, #10
 8022a94:	4610      	mov	r0, r2
 8022a96:	4619      	mov	r1, r3
 8022a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022a9a:	2200      	movs	r2, #0
 8022a9c:	60bb      	str	r3, [r7, #8]
 8022a9e:	60fa      	str	r2, [r7, #12]
 8022aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022aa4:	f7fd fbf4 	bl	8020290 <__aeabi_uldivmod>
 8022aa8:	4602      	mov	r2, r0
 8022aaa:	460b      	mov	r3, r1
 8022aac:	4613      	mov	r3, r2
 8022aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8022ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8022ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8022ab2:	685b      	ldr	r3, [r3, #4]
 8022ab4:	0c1b      	lsrs	r3, r3, #16
 8022ab6:	f003 0303 	and.w	r3, r3, #3
 8022aba:	3301      	adds	r3, #1
 8022abc:	005b      	lsls	r3, r3, #1
 8022abe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8022ac0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8022ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8022ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8022aca:	e002      	b.n	8022ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8022acc:	4b05      	ldr	r3, [pc, #20]	@ (8022ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8022ace:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8022ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8022ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8022ad4:	4618      	mov	r0, r3
 8022ad6:	3740      	adds	r7, #64	@ 0x40
 8022ad8:	46bd      	mov	sp, r7
 8022ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022ade:	bf00      	nop
 8022ae0:	40023800 	.word	0x40023800
 8022ae4:	00f42400 	.word	0x00f42400
 8022ae8:	017d7840 	.word	0x017d7840

08022aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8022aec:	b480      	push	{r7}
 8022aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8022af0:	4b03      	ldr	r3, [pc, #12]	@ (8022b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8022af2:	681b      	ldr	r3, [r3, #0]
}
 8022af4:	4618      	mov	r0, r3
 8022af6:	46bd      	mov	sp, r7
 8022af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022afc:	4770      	bx	lr
 8022afe:	bf00      	nop
 8022b00:	20000000 	.word	0x20000000

08022b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8022b04:	b580      	push	{r7, lr}
 8022b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8022b08:	f7ff fff0 	bl	8022aec <HAL_RCC_GetHCLKFreq>
 8022b0c:	4602      	mov	r2, r0
 8022b0e:	4b05      	ldr	r3, [pc, #20]	@ (8022b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8022b10:	689b      	ldr	r3, [r3, #8]
 8022b12:	0a9b      	lsrs	r3, r3, #10
 8022b14:	f003 0307 	and.w	r3, r3, #7
 8022b18:	4903      	ldr	r1, [pc, #12]	@ (8022b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8022b1a:	5ccb      	ldrb	r3, [r1, r3]
 8022b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8022b20:	4618      	mov	r0, r3
 8022b22:	bd80      	pop	{r7, pc}
 8022b24:	40023800 	.word	0x40023800
 8022b28:	08027844 	.word	0x08027844

08022b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8022b2c:	b580      	push	{r7, lr}
 8022b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8022b30:	f7ff ffdc 	bl	8022aec <HAL_RCC_GetHCLKFreq>
 8022b34:	4602      	mov	r2, r0
 8022b36:	4b05      	ldr	r3, [pc, #20]	@ (8022b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8022b38:	689b      	ldr	r3, [r3, #8]
 8022b3a:	0b5b      	lsrs	r3, r3, #13
 8022b3c:	f003 0307 	and.w	r3, r3, #7
 8022b40:	4903      	ldr	r1, [pc, #12]	@ (8022b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8022b42:	5ccb      	ldrb	r3, [r1, r3]
 8022b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8022b48:	4618      	mov	r0, r3
 8022b4a:	bd80      	pop	{r7, pc}
 8022b4c:	40023800 	.word	0x40023800
 8022b50:	08027844 	.word	0x08027844

08022b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022b54:	b580      	push	{r7, lr}
 8022b56:	b082      	sub	sp, #8
 8022b58:	af00      	add	r7, sp, #0
 8022b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022b5c:	687b      	ldr	r3, [r7, #4]
 8022b5e:	2b00      	cmp	r3, #0
 8022b60:	d101      	bne.n	8022b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8022b62:	2301      	movs	r3, #1
 8022b64:	e042      	b.n	8022bec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8022b66:	687b      	ldr	r3, [r7, #4]
 8022b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8022b6c:	b2db      	uxtb	r3, r3
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	d106      	bne.n	8022b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8022b72:	687b      	ldr	r3, [r7, #4]
 8022b74:	2200      	movs	r2, #0
 8022b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022b7a:	6878      	ldr	r0, [r7, #4]
 8022b7c:	f7fe f880 	bl	8020c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8022b80:	687b      	ldr	r3, [r7, #4]
 8022b82:	2224      	movs	r2, #36	@ 0x24
 8022b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8022b88:	687b      	ldr	r3, [r7, #4]
 8022b8a:	681b      	ldr	r3, [r3, #0]
 8022b8c:	68da      	ldr	r2, [r3, #12]
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8022b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8022b98:	6878      	ldr	r0, [r7, #4]
 8022b9a:	f000 fbf7 	bl	802338c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022b9e:	687b      	ldr	r3, [r7, #4]
 8022ba0:	681b      	ldr	r3, [r3, #0]
 8022ba2:	691a      	ldr	r2, [r3, #16]
 8022ba4:	687b      	ldr	r3, [r7, #4]
 8022ba6:	681b      	ldr	r3, [r3, #0]
 8022ba8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8022bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022bae:	687b      	ldr	r3, [r7, #4]
 8022bb0:	681b      	ldr	r3, [r3, #0]
 8022bb2:	695a      	ldr	r2, [r3, #20]
 8022bb4:	687b      	ldr	r3, [r7, #4]
 8022bb6:	681b      	ldr	r3, [r3, #0]
 8022bb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8022bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	681b      	ldr	r3, [r3, #0]
 8022bc2:	68da      	ldr	r2, [r3, #12]
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8022bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	2200      	movs	r2, #0
 8022bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8022bd4:	687b      	ldr	r3, [r7, #4]
 8022bd6:	2220      	movs	r2, #32
 8022bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	2220      	movs	r2, #32
 8022be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	2200      	movs	r2, #0
 8022be8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8022bea:	2300      	movs	r3, #0
}
 8022bec:	4618      	mov	r0, r3
 8022bee:	3708      	adds	r7, #8
 8022bf0:	46bd      	mov	sp, r7
 8022bf2:	bd80      	pop	{r7, pc}

08022bf4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8022bf4:	b580      	push	{r7, lr}
 8022bf6:	b08a      	sub	sp, #40	@ 0x28
 8022bf8:	af02      	add	r7, sp, #8
 8022bfa:	60f8      	str	r0, [r7, #12]
 8022bfc:	60b9      	str	r1, [r7, #8]
 8022bfe:	603b      	str	r3, [r7, #0]
 8022c00:	4613      	mov	r3, r2
 8022c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8022c04:	2300      	movs	r3, #0
 8022c06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8022c08:	68fb      	ldr	r3, [r7, #12]
 8022c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8022c0e:	b2db      	uxtb	r3, r3
 8022c10:	2b20      	cmp	r3, #32
 8022c12:	d175      	bne.n	8022d00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8022c14:	68bb      	ldr	r3, [r7, #8]
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	d002      	beq.n	8022c20 <HAL_UART_Transmit+0x2c>
 8022c1a:	88fb      	ldrh	r3, [r7, #6]
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	d101      	bne.n	8022c24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8022c20:	2301      	movs	r3, #1
 8022c22:	e06e      	b.n	8022d02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022c24:	68fb      	ldr	r3, [r7, #12]
 8022c26:	2200      	movs	r2, #0
 8022c28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022c2a:	68fb      	ldr	r3, [r7, #12]
 8022c2c:	2221      	movs	r2, #33	@ 0x21
 8022c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8022c32:	f7fe f9a9 	bl	8020f88 <HAL_GetTick>
 8022c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	88fa      	ldrh	r2, [r7, #6]
 8022c3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8022c3e:	68fb      	ldr	r3, [r7, #12]
 8022c40:	88fa      	ldrh	r2, [r7, #6]
 8022c42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022c44:	68fb      	ldr	r3, [r7, #12]
 8022c46:	689b      	ldr	r3, [r3, #8]
 8022c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8022c4c:	d108      	bne.n	8022c60 <HAL_UART_Transmit+0x6c>
 8022c4e:	68fb      	ldr	r3, [r7, #12]
 8022c50:	691b      	ldr	r3, [r3, #16]
 8022c52:	2b00      	cmp	r3, #0
 8022c54:	d104      	bne.n	8022c60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8022c56:	2300      	movs	r3, #0
 8022c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8022c5a:	68bb      	ldr	r3, [r7, #8]
 8022c5c:	61bb      	str	r3, [r7, #24]
 8022c5e:	e003      	b.n	8022c68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8022c60:	68bb      	ldr	r3, [r7, #8]
 8022c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8022c64:	2300      	movs	r3, #0
 8022c66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8022c68:	e02e      	b.n	8022cc8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8022c6a:	683b      	ldr	r3, [r7, #0]
 8022c6c:	9300      	str	r3, [sp, #0]
 8022c6e:	697b      	ldr	r3, [r7, #20]
 8022c70:	2200      	movs	r2, #0
 8022c72:	2180      	movs	r1, #128	@ 0x80
 8022c74:	68f8      	ldr	r0, [r7, #12]
 8022c76:	f000 fa0a 	bl	802308e <UART_WaitOnFlagUntilTimeout>
 8022c7a:	4603      	mov	r3, r0
 8022c7c:	2b00      	cmp	r3, #0
 8022c7e:	d005      	beq.n	8022c8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8022c80:	68fb      	ldr	r3, [r7, #12]
 8022c82:	2220      	movs	r2, #32
 8022c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8022c88:	2303      	movs	r3, #3
 8022c8a:	e03a      	b.n	8022d02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8022c8c:	69fb      	ldr	r3, [r7, #28]
 8022c8e:	2b00      	cmp	r3, #0
 8022c90:	d10b      	bne.n	8022caa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8022c92:	69bb      	ldr	r3, [r7, #24]
 8022c94:	881b      	ldrh	r3, [r3, #0]
 8022c96:	461a      	mov	r2, r3
 8022c98:	68fb      	ldr	r3, [r7, #12]
 8022c9a:	681b      	ldr	r3, [r3, #0]
 8022c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022ca0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8022ca2:	69bb      	ldr	r3, [r7, #24]
 8022ca4:	3302      	adds	r3, #2
 8022ca6:	61bb      	str	r3, [r7, #24]
 8022ca8:	e007      	b.n	8022cba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8022caa:	69fb      	ldr	r3, [r7, #28]
 8022cac:	781a      	ldrb	r2, [r3, #0]
 8022cae:	68fb      	ldr	r3, [r7, #12]
 8022cb0:	681b      	ldr	r3, [r3, #0]
 8022cb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8022cb4:	69fb      	ldr	r3, [r7, #28]
 8022cb6:	3301      	adds	r3, #1
 8022cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8022cba:	68fb      	ldr	r3, [r7, #12]
 8022cbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8022cbe:	b29b      	uxth	r3, r3
 8022cc0:	3b01      	subs	r3, #1
 8022cc2:	b29a      	uxth	r2, r3
 8022cc4:	68fb      	ldr	r3, [r7, #12]
 8022cc6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8022cc8:	68fb      	ldr	r3, [r7, #12]
 8022cca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8022ccc:	b29b      	uxth	r3, r3
 8022cce:	2b00      	cmp	r3, #0
 8022cd0:	d1cb      	bne.n	8022c6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8022cd2:	683b      	ldr	r3, [r7, #0]
 8022cd4:	9300      	str	r3, [sp, #0]
 8022cd6:	697b      	ldr	r3, [r7, #20]
 8022cd8:	2200      	movs	r2, #0
 8022cda:	2140      	movs	r1, #64	@ 0x40
 8022cdc:	68f8      	ldr	r0, [r7, #12]
 8022cde:	f000 f9d6 	bl	802308e <UART_WaitOnFlagUntilTimeout>
 8022ce2:	4603      	mov	r3, r0
 8022ce4:	2b00      	cmp	r3, #0
 8022ce6:	d005      	beq.n	8022cf4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8022ce8:	68fb      	ldr	r3, [r7, #12]
 8022cea:	2220      	movs	r2, #32
 8022cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8022cf0:	2303      	movs	r3, #3
 8022cf2:	e006      	b.n	8022d02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8022cf4:	68fb      	ldr	r3, [r7, #12]
 8022cf6:	2220      	movs	r2, #32
 8022cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8022cfc:	2300      	movs	r3, #0
 8022cfe:	e000      	b.n	8022d02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8022d00:	2302      	movs	r3, #2
  }
}
 8022d02:	4618      	mov	r0, r3
 8022d04:	3720      	adds	r7, #32
 8022d06:	46bd      	mov	sp, r7
 8022d08:	bd80      	pop	{r7, pc}

08022d0a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022d0a:	b580      	push	{r7, lr}
 8022d0c:	b084      	sub	sp, #16
 8022d0e:	af00      	add	r7, sp, #0
 8022d10:	60f8      	str	r0, [r7, #12]
 8022d12:	60b9      	str	r1, [r7, #8]
 8022d14:	4613      	mov	r3, r2
 8022d16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8022d18:	68fb      	ldr	r3, [r7, #12]
 8022d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8022d1e:	b2db      	uxtb	r3, r3
 8022d20:	2b20      	cmp	r3, #32
 8022d22:	d112      	bne.n	8022d4a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8022d24:	68bb      	ldr	r3, [r7, #8]
 8022d26:	2b00      	cmp	r3, #0
 8022d28:	d002      	beq.n	8022d30 <HAL_UART_Receive_DMA+0x26>
 8022d2a:	88fb      	ldrh	r3, [r7, #6]
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	d101      	bne.n	8022d34 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8022d30:	2301      	movs	r3, #1
 8022d32:	e00b      	b.n	8022d4c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022d34:	68fb      	ldr	r3, [r7, #12]
 8022d36:	2200      	movs	r2, #0
 8022d38:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8022d3a:	88fb      	ldrh	r3, [r7, #6]
 8022d3c:	461a      	mov	r2, r3
 8022d3e:	68b9      	ldr	r1, [r7, #8]
 8022d40:	68f8      	ldr	r0, [r7, #12]
 8022d42:	f000 f9fd 	bl	8023140 <UART_Start_Receive_DMA>
 8022d46:	4603      	mov	r3, r0
 8022d48:	e000      	b.n	8022d4c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8022d4a:	2302      	movs	r3, #2
  }
}
 8022d4c:	4618      	mov	r0, r3
 8022d4e:	3710      	adds	r7, #16
 8022d50:	46bd      	mov	sp, r7
 8022d52:	bd80      	pop	{r7, pc}

08022d54 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8022d54:	b580      	push	{r7, lr}
 8022d56:	b090      	sub	sp, #64	@ 0x40
 8022d58:	af00      	add	r7, sp, #0
 8022d5a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8022d60:	687b      	ldr	r3, [r7, #4]
 8022d62:	681b      	ldr	r3, [r3, #0]
 8022d64:	695b      	ldr	r3, [r3, #20]
 8022d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022d6a:	2b80      	cmp	r3, #128	@ 0x80
 8022d6c:	bf0c      	ite	eq
 8022d6e:	2301      	moveq	r3, #1
 8022d70:	2300      	movne	r3, #0
 8022d72:	b2db      	uxtb	r3, r3
 8022d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8022d76:	687b      	ldr	r3, [r7, #4]
 8022d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8022d7c:	b2db      	uxtb	r3, r3
 8022d7e:	2b21      	cmp	r3, #33	@ 0x21
 8022d80:	d128      	bne.n	8022dd4 <HAL_UART_DMAStop+0x80>
 8022d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022d84:	2b00      	cmp	r3, #0
 8022d86:	d025      	beq.n	8022dd4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	681b      	ldr	r3, [r3, #0]
 8022d8c:	3314      	adds	r3, #20
 8022d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d92:	e853 3f00 	ldrex	r3, [r3]
 8022d96:	623b      	str	r3, [r7, #32]
   return(result);
 8022d98:	6a3b      	ldr	r3, [r7, #32]
 8022d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8022d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8022da0:	687b      	ldr	r3, [r7, #4]
 8022da2:	681b      	ldr	r3, [r3, #0]
 8022da4:	3314      	adds	r3, #20
 8022da6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8022da8:	633a      	str	r2, [r7, #48]	@ 0x30
 8022daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022dac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8022db0:	e841 2300 	strex	r3, r2, [r1]
 8022db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8022db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	d1e5      	bne.n	8022d88 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8022dbc:	687b      	ldr	r3, [r7, #4]
 8022dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022dc0:	2b00      	cmp	r3, #0
 8022dc2:	d004      	beq.n	8022dce <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022dc8:	4618      	mov	r0, r3
 8022dca:	f7fe fb1b 	bl	8021404 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8022dce:	6878      	ldr	r0, [r7, #4]
 8022dd0:	f000 fa50 	bl	8023274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8022dd4:	687b      	ldr	r3, [r7, #4]
 8022dd6:	681b      	ldr	r3, [r3, #0]
 8022dd8:	695b      	ldr	r3, [r3, #20]
 8022dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022dde:	2b40      	cmp	r3, #64	@ 0x40
 8022de0:	bf0c      	ite	eq
 8022de2:	2301      	moveq	r3, #1
 8022de4:	2300      	movne	r3, #0
 8022de6:	b2db      	uxtb	r3, r3
 8022de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8022dea:	687b      	ldr	r3, [r7, #4]
 8022dec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8022df0:	b2db      	uxtb	r3, r3
 8022df2:	2b22      	cmp	r3, #34	@ 0x22
 8022df4:	d128      	bne.n	8022e48 <HAL_UART_DMAStop+0xf4>
 8022df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	d025      	beq.n	8022e48 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022dfc:	687b      	ldr	r3, [r7, #4]
 8022dfe:	681b      	ldr	r3, [r3, #0]
 8022e00:	3314      	adds	r3, #20
 8022e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022e04:	693b      	ldr	r3, [r7, #16]
 8022e06:	e853 3f00 	ldrex	r3, [r3]
 8022e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8022e0c:	68fb      	ldr	r3, [r7, #12]
 8022e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8022e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8022e14:	687b      	ldr	r3, [r7, #4]
 8022e16:	681b      	ldr	r3, [r3, #0]
 8022e18:	3314      	adds	r3, #20
 8022e1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8022e1c:	61fa      	str	r2, [r7, #28]
 8022e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022e20:	69b9      	ldr	r1, [r7, #24]
 8022e22:	69fa      	ldr	r2, [r7, #28]
 8022e24:	e841 2300 	strex	r3, r2, [r1]
 8022e28:	617b      	str	r3, [r7, #20]
   return(result);
 8022e2a:	697b      	ldr	r3, [r7, #20]
 8022e2c:	2b00      	cmp	r3, #0
 8022e2e:	d1e5      	bne.n	8022dfc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022e34:	2b00      	cmp	r3, #0
 8022e36:	d004      	beq.n	8022e42 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8022e38:	687b      	ldr	r3, [r7, #4]
 8022e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022e3c:	4618      	mov	r0, r3
 8022e3e:	f7fe fae1 	bl	8021404 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8022e42:	6878      	ldr	r0, [r7, #4]
 8022e44:	f000 fa3e 	bl	80232c4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8022e48:	2300      	movs	r3, #0
}
 8022e4a:	4618      	mov	r0, r3
 8022e4c:	3740      	adds	r7, #64	@ 0x40
 8022e4e:	46bd      	mov	sp, r7
 8022e50:	bd80      	pop	{r7, pc}

08022e52 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8022e52:	b480      	push	{r7}
 8022e54:	b083      	sub	sp, #12
 8022e56:	af00      	add	r7, sp, #0
 8022e58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8022e5a:	bf00      	nop
 8022e5c:	370c      	adds	r7, #12
 8022e5e:	46bd      	mov	sp, r7
 8022e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e64:	4770      	bx	lr

08022e66 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8022e66:	b480      	push	{r7}
 8022e68:	b083      	sub	sp, #12
 8022e6a:	af00      	add	r7, sp, #0
 8022e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8022e6e:	bf00      	nop
 8022e70:	370c      	adds	r7, #12
 8022e72:	46bd      	mov	sp, r7
 8022e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e78:	4770      	bx	lr

08022e7a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8022e7a:	b480      	push	{r7}
 8022e7c:	b083      	sub	sp, #12
 8022e7e:	af00      	add	r7, sp, #0
 8022e80:	6078      	str	r0, [r7, #4]
 8022e82:	460b      	mov	r3, r1
 8022e84:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8022e86:	bf00      	nop
 8022e88:	370c      	adds	r7, #12
 8022e8a:	46bd      	mov	sp, r7
 8022e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e90:	4770      	bx	lr

08022e92 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8022e92:	b580      	push	{r7, lr}
 8022e94:	b09c      	sub	sp, #112	@ 0x70
 8022e96:	af00      	add	r7, sp, #0
 8022e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8022ea0:	687b      	ldr	r3, [r7, #4]
 8022ea2:	681b      	ldr	r3, [r3, #0]
 8022ea4:	681b      	ldr	r3, [r3, #0]
 8022ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022eaa:	2b00      	cmp	r3, #0
 8022eac:	d172      	bne.n	8022f94 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8022eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022eb0:	2200      	movs	r2, #0
 8022eb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8022eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022eb6:	681b      	ldr	r3, [r3, #0]
 8022eb8:	330c      	adds	r3, #12
 8022eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022ebe:	e853 3f00 	ldrex	r3, [r3]
 8022ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8022ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022ec6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8022eca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8022ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022ece:	681b      	ldr	r3, [r3, #0]
 8022ed0:	330c      	adds	r3, #12
 8022ed2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8022ed4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8022ed6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022ed8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8022eda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8022edc:	e841 2300 	strex	r3, r2, [r1]
 8022ee0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8022ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022ee4:	2b00      	cmp	r3, #0
 8022ee6:	d1e5      	bne.n	8022eb4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022eea:	681b      	ldr	r3, [r3, #0]
 8022eec:	3314      	adds	r3, #20
 8022eee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022ef2:	e853 3f00 	ldrex	r3, [r3]
 8022ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8022ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022efa:	f023 0301 	bic.w	r3, r3, #1
 8022efe:	667b      	str	r3, [r7, #100]	@ 0x64
 8022f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	3314      	adds	r3, #20
 8022f06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8022f08:	647a      	str	r2, [r7, #68]	@ 0x44
 8022f0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8022f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8022f10:	e841 2300 	strex	r3, r2, [r1]
 8022f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8022f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	d1e5      	bne.n	8022ee8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f1e:	681b      	ldr	r3, [r3, #0]
 8022f20:	3314      	adds	r3, #20
 8022f22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022f26:	e853 3f00 	ldrex	r3, [r3]
 8022f2a:	623b      	str	r3, [r7, #32]
   return(result);
 8022f2c:	6a3b      	ldr	r3, [r7, #32]
 8022f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8022f32:	663b      	str	r3, [r7, #96]	@ 0x60
 8022f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f36:	681b      	ldr	r3, [r3, #0]
 8022f38:	3314      	adds	r3, #20
 8022f3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8022f3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8022f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022f40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8022f44:	e841 2300 	strex	r3, r2, [r1]
 8022f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8022f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022f4c:	2b00      	cmp	r3, #0
 8022f4e:	d1e5      	bne.n	8022f1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8022f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f52:	2220      	movs	r2, #32
 8022f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022f5c:	2b01      	cmp	r3, #1
 8022f5e:	d119      	bne.n	8022f94 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f62:	681b      	ldr	r3, [r3, #0]
 8022f64:	330c      	adds	r3, #12
 8022f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022f68:	693b      	ldr	r3, [r7, #16]
 8022f6a:	e853 3f00 	ldrex	r3, [r3]
 8022f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8022f70:	68fb      	ldr	r3, [r7, #12]
 8022f72:	f023 0310 	bic.w	r3, r3, #16
 8022f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8022f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f7a:	681b      	ldr	r3, [r3, #0]
 8022f7c:	330c      	adds	r3, #12
 8022f7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8022f80:	61fa      	str	r2, [r7, #28]
 8022f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022f84:	69b9      	ldr	r1, [r7, #24]
 8022f86:	69fa      	ldr	r2, [r7, #28]
 8022f88:	e841 2300 	strex	r3, r2, [r1]
 8022f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8022f8e:	697b      	ldr	r3, [r7, #20]
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	d1e5      	bne.n	8022f60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8022f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f96:	2200      	movs	r2, #0
 8022f98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022f9e:	2b01      	cmp	r3, #1
 8022fa0:	d106      	bne.n	8022fb0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8022fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022fa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8022fa6:	4619      	mov	r1, r3
 8022fa8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8022faa:	f7ff ff66 	bl	8022e7a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8022fae:	e002      	b.n	8022fb6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8022fb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8022fb2:	f7fd fc81 	bl	80208b8 <HAL_UART_RxCpltCallback>
}
 8022fb6:	bf00      	nop
 8022fb8:	3770      	adds	r7, #112	@ 0x70
 8022fba:	46bd      	mov	sp, r7
 8022fbc:	bd80      	pop	{r7, pc}

08022fbe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8022fbe:	b580      	push	{r7, lr}
 8022fc0:	b084      	sub	sp, #16
 8022fc2:	af00      	add	r7, sp, #0
 8022fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8022fc6:	687b      	ldr	r3, [r7, #4]
 8022fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022fca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8022fcc:	68fb      	ldr	r3, [r7, #12]
 8022fce:	2201      	movs	r2, #1
 8022fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022fd2:	68fb      	ldr	r3, [r7, #12]
 8022fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022fd6:	2b01      	cmp	r3, #1
 8022fd8:	d108      	bne.n	8022fec <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8022fda:	68fb      	ldr	r3, [r7, #12]
 8022fdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8022fde:	085b      	lsrs	r3, r3, #1
 8022fe0:	b29b      	uxth	r3, r3
 8022fe2:	4619      	mov	r1, r3
 8022fe4:	68f8      	ldr	r0, [r7, #12]
 8022fe6:	f7ff ff48 	bl	8022e7a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8022fea:	e002      	b.n	8022ff2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8022fec:	68f8      	ldr	r0, [r7, #12]
 8022fee:	f7ff ff30 	bl	8022e52 <HAL_UART_RxHalfCpltCallback>
}
 8022ff2:	bf00      	nop
 8022ff4:	3710      	adds	r7, #16
 8022ff6:	46bd      	mov	sp, r7
 8022ff8:	bd80      	pop	{r7, pc}

08022ffa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8022ffa:	b580      	push	{r7, lr}
 8022ffc:	b084      	sub	sp, #16
 8022ffe:	af00      	add	r7, sp, #0
 8023000:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8023002:	2300      	movs	r3, #0
 8023004:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8023006:	687b      	ldr	r3, [r7, #4]
 8023008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802300a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 802300c:	68bb      	ldr	r3, [r7, #8]
 802300e:	681b      	ldr	r3, [r3, #0]
 8023010:	695b      	ldr	r3, [r3, #20]
 8023012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8023016:	2b80      	cmp	r3, #128	@ 0x80
 8023018:	bf0c      	ite	eq
 802301a:	2301      	moveq	r3, #1
 802301c:	2300      	movne	r3, #0
 802301e:	b2db      	uxtb	r3, r3
 8023020:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8023022:	68bb      	ldr	r3, [r7, #8]
 8023024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8023028:	b2db      	uxtb	r3, r3
 802302a:	2b21      	cmp	r3, #33	@ 0x21
 802302c:	d108      	bne.n	8023040 <UART_DMAError+0x46>
 802302e:	68fb      	ldr	r3, [r7, #12]
 8023030:	2b00      	cmp	r3, #0
 8023032:	d005      	beq.n	8023040 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8023034:	68bb      	ldr	r3, [r7, #8]
 8023036:	2200      	movs	r2, #0
 8023038:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 802303a:	68b8      	ldr	r0, [r7, #8]
 802303c:	f000 f91a 	bl	8023274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8023040:	68bb      	ldr	r3, [r7, #8]
 8023042:	681b      	ldr	r3, [r3, #0]
 8023044:	695b      	ldr	r3, [r3, #20]
 8023046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802304a:	2b40      	cmp	r3, #64	@ 0x40
 802304c:	bf0c      	ite	eq
 802304e:	2301      	moveq	r3, #1
 8023050:	2300      	movne	r3, #0
 8023052:	b2db      	uxtb	r3, r3
 8023054:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8023056:	68bb      	ldr	r3, [r7, #8]
 8023058:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 802305c:	b2db      	uxtb	r3, r3
 802305e:	2b22      	cmp	r3, #34	@ 0x22
 8023060:	d108      	bne.n	8023074 <UART_DMAError+0x7a>
 8023062:	68fb      	ldr	r3, [r7, #12]
 8023064:	2b00      	cmp	r3, #0
 8023066:	d005      	beq.n	8023074 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8023068:	68bb      	ldr	r3, [r7, #8]
 802306a:	2200      	movs	r2, #0
 802306c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 802306e:	68b8      	ldr	r0, [r7, #8]
 8023070:	f000 f928 	bl	80232c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8023074:	68bb      	ldr	r3, [r7, #8]
 8023076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023078:	f043 0210 	orr.w	r2, r3, #16
 802307c:	68bb      	ldr	r3, [r7, #8]
 802307e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8023080:	68b8      	ldr	r0, [r7, #8]
 8023082:	f7ff fef0 	bl	8022e66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8023086:	bf00      	nop
 8023088:	3710      	adds	r7, #16
 802308a:	46bd      	mov	sp, r7
 802308c:	bd80      	pop	{r7, pc}

0802308e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 802308e:	b580      	push	{r7, lr}
 8023090:	b086      	sub	sp, #24
 8023092:	af00      	add	r7, sp, #0
 8023094:	60f8      	str	r0, [r7, #12]
 8023096:	60b9      	str	r1, [r7, #8]
 8023098:	603b      	str	r3, [r7, #0]
 802309a:	4613      	mov	r3, r2
 802309c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802309e:	e03b      	b.n	8023118 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80230a0:	6a3b      	ldr	r3, [r7, #32]
 80230a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80230a6:	d037      	beq.n	8023118 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80230a8:	f7fd ff6e 	bl	8020f88 <HAL_GetTick>
 80230ac:	4602      	mov	r2, r0
 80230ae:	683b      	ldr	r3, [r7, #0]
 80230b0:	1ad3      	subs	r3, r2, r3
 80230b2:	6a3a      	ldr	r2, [r7, #32]
 80230b4:	429a      	cmp	r2, r3
 80230b6:	d302      	bcc.n	80230be <UART_WaitOnFlagUntilTimeout+0x30>
 80230b8:	6a3b      	ldr	r3, [r7, #32]
 80230ba:	2b00      	cmp	r3, #0
 80230bc:	d101      	bne.n	80230c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80230be:	2303      	movs	r3, #3
 80230c0:	e03a      	b.n	8023138 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80230c2:	68fb      	ldr	r3, [r7, #12]
 80230c4:	681b      	ldr	r3, [r3, #0]
 80230c6:	68db      	ldr	r3, [r3, #12]
 80230c8:	f003 0304 	and.w	r3, r3, #4
 80230cc:	2b00      	cmp	r3, #0
 80230ce:	d023      	beq.n	8023118 <UART_WaitOnFlagUntilTimeout+0x8a>
 80230d0:	68bb      	ldr	r3, [r7, #8]
 80230d2:	2b80      	cmp	r3, #128	@ 0x80
 80230d4:	d020      	beq.n	8023118 <UART_WaitOnFlagUntilTimeout+0x8a>
 80230d6:	68bb      	ldr	r3, [r7, #8]
 80230d8:	2b40      	cmp	r3, #64	@ 0x40
 80230da:	d01d      	beq.n	8023118 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80230dc:	68fb      	ldr	r3, [r7, #12]
 80230de:	681b      	ldr	r3, [r3, #0]
 80230e0:	681b      	ldr	r3, [r3, #0]
 80230e2:	f003 0308 	and.w	r3, r3, #8
 80230e6:	2b08      	cmp	r3, #8
 80230e8:	d116      	bne.n	8023118 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80230ea:	2300      	movs	r3, #0
 80230ec:	617b      	str	r3, [r7, #20]
 80230ee:	68fb      	ldr	r3, [r7, #12]
 80230f0:	681b      	ldr	r3, [r3, #0]
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	617b      	str	r3, [r7, #20]
 80230f6:	68fb      	ldr	r3, [r7, #12]
 80230f8:	681b      	ldr	r3, [r3, #0]
 80230fa:	685b      	ldr	r3, [r3, #4]
 80230fc:	617b      	str	r3, [r7, #20]
 80230fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8023100:	68f8      	ldr	r0, [r7, #12]
 8023102:	f000 f8df 	bl	80232c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8023106:	68fb      	ldr	r3, [r7, #12]
 8023108:	2208      	movs	r2, #8
 802310a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802310c:	68fb      	ldr	r3, [r7, #12]
 802310e:	2200      	movs	r2, #0
 8023110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8023114:	2301      	movs	r3, #1
 8023116:	e00f      	b.n	8023138 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023118:	68fb      	ldr	r3, [r7, #12]
 802311a:	681b      	ldr	r3, [r3, #0]
 802311c:	681a      	ldr	r2, [r3, #0]
 802311e:	68bb      	ldr	r3, [r7, #8]
 8023120:	4013      	ands	r3, r2
 8023122:	68ba      	ldr	r2, [r7, #8]
 8023124:	429a      	cmp	r2, r3
 8023126:	bf0c      	ite	eq
 8023128:	2301      	moveq	r3, #1
 802312a:	2300      	movne	r3, #0
 802312c:	b2db      	uxtb	r3, r3
 802312e:	461a      	mov	r2, r3
 8023130:	79fb      	ldrb	r3, [r7, #7]
 8023132:	429a      	cmp	r2, r3
 8023134:	d0b4      	beq.n	80230a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8023136:	2300      	movs	r3, #0
}
 8023138:	4618      	mov	r0, r3
 802313a:	3718      	adds	r7, #24
 802313c:	46bd      	mov	sp, r7
 802313e:	bd80      	pop	{r7, pc}

08023140 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8023140:	b580      	push	{r7, lr}
 8023142:	b098      	sub	sp, #96	@ 0x60
 8023144:	af00      	add	r7, sp, #0
 8023146:	60f8      	str	r0, [r7, #12]
 8023148:	60b9      	str	r1, [r7, #8]
 802314a:	4613      	mov	r3, r2
 802314c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 802314e:	68ba      	ldr	r2, [r7, #8]
 8023150:	68fb      	ldr	r3, [r7, #12]
 8023152:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8023154:	68fb      	ldr	r3, [r7, #12]
 8023156:	88fa      	ldrh	r2, [r7, #6]
 8023158:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802315a:	68fb      	ldr	r3, [r7, #12]
 802315c:	2200      	movs	r2, #0
 802315e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8023160:	68fb      	ldr	r3, [r7, #12]
 8023162:	2222      	movs	r2, #34	@ 0x22
 8023164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8023168:	68fb      	ldr	r3, [r7, #12]
 802316a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802316c:	4a3e      	ldr	r2, [pc, #248]	@ (8023268 <UART_Start_Receive_DMA+0x128>)
 802316e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8023170:	68fb      	ldr	r3, [r7, #12]
 8023172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023174:	4a3d      	ldr	r2, [pc, #244]	@ (802326c <UART_Start_Receive_DMA+0x12c>)
 8023176:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8023178:	68fb      	ldr	r3, [r7, #12]
 802317a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802317c:	4a3c      	ldr	r2, [pc, #240]	@ (8023270 <UART_Start_Receive_DMA+0x130>)
 802317e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8023180:	68fb      	ldr	r3, [r7, #12]
 8023182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023184:	2200      	movs	r2, #0
 8023186:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8023188:	f107 0308 	add.w	r3, r7, #8
 802318c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 802318e:	68fb      	ldr	r3, [r7, #12]
 8023190:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8023192:	68fb      	ldr	r3, [r7, #12]
 8023194:	681b      	ldr	r3, [r3, #0]
 8023196:	3304      	adds	r3, #4
 8023198:	4619      	mov	r1, r3
 802319a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802319c:	681a      	ldr	r2, [r3, #0]
 802319e:	88fb      	ldrh	r3, [r7, #6]
 80231a0:	f7fe f8d8 	bl	8021354 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80231a4:	2300      	movs	r3, #0
 80231a6:	613b      	str	r3, [r7, #16]
 80231a8:	68fb      	ldr	r3, [r7, #12]
 80231aa:	681b      	ldr	r3, [r3, #0]
 80231ac:	681b      	ldr	r3, [r3, #0]
 80231ae:	613b      	str	r3, [r7, #16]
 80231b0:	68fb      	ldr	r3, [r7, #12]
 80231b2:	681b      	ldr	r3, [r3, #0]
 80231b4:	685b      	ldr	r3, [r3, #4]
 80231b6:	613b      	str	r3, [r7, #16]
 80231b8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80231ba:	68fb      	ldr	r3, [r7, #12]
 80231bc:	691b      	ldr	r3, [r3, #16]
 80231be:	2b00      	cmp	r3, #0
 80231c0:	d019      	beq.n	80231f6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80231c2:	68fb      	ldr	r3, [r7, #12]
 80231c4:	681b      	ldr	r3, [r3, #0]
 80231c6:	330c      	adds	r3, #12
 80231c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80231ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80231cc:	e853 3f00 	ldrex	r3, [r3]
 80231d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80231d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80231d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80231d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80231da:	68fb      	ldr	r3, [r7, #12]
 80231dc:	681b      	ldr	r3, [r3, #0]
 80231de:	330c      	adds	r3, #12
 80231e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80231e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80231e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80231e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80231e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80231ea:	e841 2300 	strex	r3, r2, [r1]
 80231ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80231f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80231f2:	2b00      	cmp	r3, #0
 80231f4:	d1e5      	bne.n	80231c2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80231f6:	68fb      	ldr	r3, [r7, #12]
 80231f8:	681b      	ldr	r3, [r3, #0]
 80231fa:	3314      	adds	r3, #20
 80231fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80231fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023200:	e853 3f00 	ldrex	r3, [r3]
 8023204:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8023206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023208:	f043 0301 	orr.w	r3, r3, #1
 802320c:	657b      	str	r3, [r7, #84]	@ 0x54
 802320e:	68fb      	ldr	r3, [r7, #12]
 8023210:	681b      	ldr	r3, [r3, #0]
 8023212:	3314      	adds	r3, #20
 8023214:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023216:	63ba      	str	r2, [r7, #56]	@ 0x38
 8023218:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802321a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802321c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802321e:	e841 2300 	strex	r3, r2, [r1]
 8023222:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8023224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023226:	2b00      	cmp	r3, #0
 8023228:	d1e5      	bne.n	80231f6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802322a:	68fb      	ldr	r3, [r7, #12]
 802322c:	681b      	ldr	r3, [r3, #0]
 802322e:	3314      	adds	r3, #20
 8023230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023232:	69bb      	ldr	r3, [r7, #24]
 8023234:	e853 3f00 	ldrex	r3, [r3]
 8023238:	617b      	str	r3, [r7, #20]
   return(result);
 802323a:	697b      	ldr	r3, [r7, #20]
 802323c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023240:	653b      	str	r3, [r7, #80]	@ 0x50
 8023242:	68fb      	ldr	r3, [r7, #12]
 8023244:	681b      	ldr	r3, [r3, #0]
 8023246:	3314      	adds	r3, #20
 8023248:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802324a:	627a      	str	r2, [r7, #36]	@ 0x24
 802324c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802324e:	6a39      	ldr	r1, [r7, #32]
 8023250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023252:	e841 2300 	strex	r3, r2, [r1]
 8023256:	61fb      	str	r3, [r7, #28]
   return(result);
 8023258:	69fb      	ldr	r3, [r7, #28]
 802325a:	2b00      	cmp	r3, #0
 802325c:	d1e5      	bne.n	802322a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 802325e:	2300      	movs	r3, #0
}
 8023260:	4618      	mov	r0, r3
 8023262:	3760      	adds	r7, #96	@ 0x60
 8023264:	46bd      	mov	sp, r7
 8023266:	bd80      	pop	{r7, pc}
 8023268:	08022e93 	.word	0x08022e93
 802326c:	08022fbf 	.word	0x08022fbf
 8023270:	08022ffb 	.word	0x08022ffb

08023274 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8023274:	b480      	push	{r7}
 8023276:	b089      	sub	sp, #36	@ 0x24
 8023278:	af00      	add	r7, sp, #0
 802327a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 802327c:	687b      	ldr	r3, [r7, #4]
 802327e:	681b      	ldr	r3, [r3, #0]
 8023280:	330c      	adds	r3, #12
 8023282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023284:	68fb      	ldr	r3, [r7, #12]
 8023286:	e853 3f00 	ldrex	r3, [r3]
 802328a:	60bb      	str	r3, [r7, #8]
   return(result);
 802328c:	68bb      	ldr	r3, [r7, #8]
 802328e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8023292:	61fb      	str	r3, [r7, #28]
 8023294:	687b      	ldr	r3, [r7, #4]
 8023296:	681b      	ldr	r3, [r3, #0]
 8023298:	330c      	adds	r3, #12
 802329a:	69fa      	ldr	r2, [r7, #28]
 802329c:	61ba      	str	r2, [r7, #24]
 802329e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80232a0:	6979      	ldr	r1, [r7, #20]
 80232a2:	69ba      	ldr	r2, [r7, #24]
 80232a4:	e841 2300 	strex	r3, r2, [r1]
 80232a8:	613b      	str	r3, [r7, #16]
   return(result);
 80232aa:	693b      	ldr	r3, [r7, #16]
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	d1e5      	bne.n	802327c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80232b0:	687b      	ldr	r3, [r7, #4]
 80232b2:	2220      	movs	r2, #32
 80232b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80232b8:	bf00      	nop
 80232ba:	3724      	adds	r7, #36	@ 0x24
 80232bc:	46bd      	mov	sp, r7
 80232be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232c2:	4770      	bx	lr

080232c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80232c4:	b480      	push	{r7}
 80232c6:	b095      	sub	sp, #84	@ 0x54
 80232c8:	af00      	add	r7, sp, #0
 80232ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80232cc:	687b      	ldr	r3, [r7, #4]
 80232ce:	681b      	ldr	r3, [r3, #0]
 80232d0:	330c      	adds	r3, #12
 80232d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80232d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80232d6:	e853 3f00 	ldrex	r3, [r3]
 80232da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80232dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80232de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80232e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80232e4:	687b      	ldr	r3, [r7, #4]
 80232e6:	681b      	ldr	r3, [r3, #0]
 80232e8:	330c      	adds	r3, #12
 80232ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80232ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80232ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80232f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80232f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80232f4:	e841 2300 	strex	r3, r2, [r1]
 80232f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80232fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	d1e5      	bne.n	80232cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023300:	687b      	ldr	r3, [r7, #4]
 8023302:	681b      	ldr	r3, [r3, #0]
 8023304:	3314      	adds	r3, #20
 8023306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023308:	6a3b      	ldr	r3, [r7, #32]
 802330a:	e853 3f00 	ldrex	r3, [r3]
 802330e:	61fb      	str	r3, [r7, #28]
   return(result);
 8023310:	69fb      	ldr	r3, [r7, #28]
 8023312:	f023 0301 	bic.w	r3, r3, #1
 8023316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023318:	687b      	ldr	r3, [r7, #4]
 802331a:	681b      	ldr	r3, [r3, #0]
 802331c:	3314      	adds	r3, #20
 802331e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8023320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8023322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8023326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023328:	e841 2300 	strex	r3, r2, [r1]
 802332c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 802332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023330:	2b00      	cmp	r3, #0
 8023332:	d1e5      	bne.n	8023300 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8023334:	687b      	ldr	r3, [r7, #4]
 8023336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023338:	2b01      	cmp	r3, #1
 802333a:	d119      	bne.n	8023370 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802333c:	687b      	ldr	r3, [r7, #4]
 802333e:	681b      	ldr	r3, [r3, #0]
 8023340:	330c      	adds	r3, #12
 8023342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023344:	68fb      	ldr	r3, [r7, #12]
 8023346:	e853 3f00 	ldrex	r3, [r3]
 802334a:	60bb      	str	r3, [r7, #8]
   return(result);
 802334c:	68bb      	ldr	r3, [r7, #8]
 802334e:	f023 0310 	bic.w	r3, r3, #16
 8023352:	647b      	str	r3, [r7, #68]	@ 0x44
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	681b      	ldr	r3, [r3, #0]
 8023358:	330c      	adds	r3, #12
 802335a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802335c:	61ba      	str	r2, [r7, #24]
 802335e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023360:	6979      	ldr	r1, [r7, #20]
 8023362:	69ba      	ldr	r2, [r7, #24]
 8023364:	e841 2300 	strex	r3, r2, [r1]
 8023368:	613b      	str	r3, [r7, #16]
   return(result);
 802336a:	693b      	ldr	r3, [r7, #16]
 802336c:	2b00      	cmp	r3, #0
 802336e:	d1e5      	bne.n	802333c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8023370:	687b      	ldr	r3, [r7, #4]
 8023372:	2220      	movs	r2, #32
 8023374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023378:	687b      	ldr	r3, [r7, #4]
 802337a:	2200      	movs	r2, #0
 802337c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 802337e:	bf00      	nop
 8023380:	3754      	adds	r7, #84	@ 0x54
 8023382:	46bd      	mov	sp, r7
 8023384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023388:	4770      	bx	lr
	...

0802338c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8023390:	b0c0      	sub	sp, #256	@ 0x100
 8023392:	af00      	add	r7, sp, #0
 8023394:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8023398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802339c:	681b      	ldr	r3, [r3, #0]
 802339e:	691b      	ldr	r3, [r3, #16]
 80233a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80233a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80233a8:	68d9      	ldr	r1, [r3, #12]
 80233aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80233ae:	681a      	ldr	r2, [r3, #0]
 80233b0:	ea40 0301 	orr.w	r3, r0, r1
 80233b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80233b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80233ba:	689a      	ldr	r2, [r3, #8]
 80233bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80233c0:	691b      	ldr	r3, [r3, #16]
 80233c2:	431a      	orrs	r2, r3
 80233c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80233c8:	695b      	ldr	r3, [r3, #20]
 80233ca:	431a      	orrs	r2, r3
 80233cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80233d0:	69db      	ldr	r3, [r3, #28]
 80233d2:	4313      	orrs	r3, r2
 80233d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80233d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80233dc:	681b      	ldr	r3, [r3, #0]
 80233de:	68db      	ldr	r3, [r3, #12]
 80233e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80233e4:	f021 010c 	bic.w	r1, r1, #12
 80233e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80233ec:	681a      	ldr	r2, [r3, #0]
 80233ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80233f2:	430b      	orrs	r3, r1
 80233f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80233f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80233fa:	681b      	ldr	r3, [r3, #0]
 80233fc:	695b      	ldr	r3, [r3, #20]
 80233fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8023402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023406:	6999      	ldr	r1, [r3, #24]
 8023408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802340c:	681a      	ldr	r2, [r3, #0]
 802340e:	ea40 0301 	orr.w	r3, r0, r1
 8023412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8023414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023418:	681a      	ldr	r2, [r3, #0]
 802341a:	4b8f      	ldr	r3, [pc, #572]	@ (8023658 <UART_SetConfig+0x2cc>)
 802341c:	429a      	cmp	r2, r3
 802341e:	d005      	beq.n	802342c <UART_SetConfig+0xa0>
 8023420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023424:	681a      	ldr	r2, [r3, #0]
 8023426:	4b8d      	ldr	r3, [pc, #564]	@ (802365c <UART_SetConfig+0x2d0>)
 8023428:	429a      	cmp	r2, r3
 802342a:	d104      	bne.n	8023436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802342c:	f7ff fb7e 	bl	8022b2c <HAL_RCC_GetPCLK2Freq>
 8023430:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8023434:	e003      	b.n	802343e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8023436:	f7ff fb65 	bl	8022b04 <HAL_RCC_GetPCLK1Freq>
 802343a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023442:	69db      	ldr	r3, [r3, #28]
 8023444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8023448:	f040 810c 	bne.w	8023664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802344c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8023450:	2200      	movs	r2, #0
 8023452:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8023456:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 802345a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 802345e:	4622      	mov	r2, r4
 8023460:	462b      	mov	r3, r5
 8023462:	1891      	adds	r1, r2, r2
 8023464:	65b9      	str	r1, [r7, #88]	@ 0x58
 8023466:	415b      	adcs	r3, r3
 8023468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802346a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 802346e:	4621      	mov	r1, r4
 8023470:	eb12 0801 	adds.w	r8, r2, r1
 8023474:	4629      	mov	r1, r5
 8023476:	eb43 0901 	adc.w	r9, r3, r1
 802347a:	f04f 0200 	mov.w	r2, #0
 802347e:	f04f 0300 	mov.w	r3, #0
 8023482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8023486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802348a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802348e:	4690      	mov	r8, r2
 8023490:	4699      	mov	r9, r3
 8023492:	4623      	mov	r3, r4
 8023494:	eb18 0303 	adds.w	r3, r8, r3
 8023498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 802349c:	462b      	mov	r3, r5
 802349e:	eb49 0303 	adc.w	r3, r9, r3
 80234a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80234a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80234aa:	685b      	ldr	r3, [r3, #4]
 80234ac:	2200      	movs	r2, #0
 80234ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80234b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80234b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80234ba:	460b      	mov	r3, r1
 80234bc:	18db      	adds	r3, r3, r3
 80234be:	653b      	str	r3, [r7, #80]	@ 0x50
 80234c0:	4613      	mov	r3, r2
 80234c2:	eb42 0303 	adc.w	r3, r2, r3
 80234c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80234c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80234cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80234d0:	f7fc fede 	bl	8020290 <__aeabi_uldivmod>
 80234d4:	4602      	mov	r2, r0
 80234d6:	460b      	mov	r3, r1
 80234d8:	4b61      	ldr	r3, [pc, #388]	@ (8023660 <UART_SetConfig+0x2d4>)
 80234da:	fba3 2302 	umull	r2, r3, r3, r2
 80234de:	095b      	lsrs	r3, r3, #5
 80234e0:	011c      	lsls	r4, r3, #4
 80234e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80234e6:	2200      	movs	r2, #0
 80234e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80234ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80234f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80234f4:	4642      	mov	r2, r8
 80234f6:	464b      	mov	r3, r9
 80234f8:	1891      	adds	r1, r2, r2
 80234fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80234fc:	415b      	adcs	r3, r3
 80234fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8023500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8023504:	4641      	mov	r1, r8
 8023506:	eb12 0a01 	adds.w	sl, r2, r1
 802350a:	4649      	mov	r1, r9
 802350c:	eb43 0b01 	adc.w	fp, r3, r1
 8023510:	f04f 0200 	mov.w	r2, #0
 8023514:	f04f 0300 	mov.w	r3, #0
 8023518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802351c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8023520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8023524:	4692      	mov	sl, r2
 8023526:	469b      	mov	fp, r3
 8023528:	4643      	mov	r3, r8
 802352a:	eb1a 0303 	adds.w	r3, sl, r3
 802352e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8023532:	464b      	mov	r3, r9
 8023534:	eb4b 0303 	adc.w	r3, fp, r3
 8023538:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 802353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023540:	685b      	ldr	r3, [r3, #4]
 8023542:	2200      	movs	r2, #0
 8023544:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8023548:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 802354c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8023550:	460b      	mov	r3, r1
 8023552:	18db      	adds	r3, r3, r3
 8023554:	643b      	str	r3, [r7, #64]	@ 0x40
 8023556:	4613      	mov	r3, r2
 8023558:	eb42 0303 	adc.w	r3, r2, r3
 802355c:	647b      	str	r3, [r7, #68]	@ 0x44
 802355e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8023562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8023566:	f7fc fe93 	bl	8020290 <__aeabi_uldivmod>
 802356a:	4602      	mov	r2, r0
 802356c:	460b      	mov	r3, r1
 802356e:	4611      	mov	r1, r2
 8023570:	4b3b      	ldr	r3, [pc, #236]	@ (8023660 <UART_SetConfig+0x2d4>)
 8023572:	fba3 2301 	umull	r2, r3, r3, r1
 8023576:	095b      	lsrs	r3, r3, #5
 8023578:	2264      	movs	r2, #100	@ 0x64
 802357a:	fb02 f303 	mul.w	r3, r2, r3
 802357e:	1acb      	subs	r3, r1, r3
 8023580:	00db      	lsls	r3, r3, #3
 8023582:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8023586:	4b36      	ldr	r3, [pc, #216]	@ (8023660 <UART_SetConfig+0x2d4>)
 8023588:	fba3 2302 	umull	r2, r3, r3, r2
 802358c:	095b      	lsrs	r3, r3, #5
 802358e:	005b      	lsls	r3, r3, #1
 8023590:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8023594:	441c      	add	r4, r3
 8023596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802359a:	2200      	movs	r2, #0
 802359c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80235a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80235a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80235a8:	4642      	mov	r2, r8
 80235aa:	464b      	mov	r3, r9
 80235ac:	1891      	adds	r1, r2, r2
 80235ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80235b0:	415b      	adcs	r3, r3
 80235b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80235b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80235b8:	4641      	mov	r1, r8
 80235ba:	1851      	adds	r1, r2, r1
 80235bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80235be:	4649      	mov	r1, r9
 80235c0:	414b      	adcs	r3, r1
 80235c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80235c4:	f04f 0200 	mov.w	r2, #0
 80235c8:	f04f 0300 	mov.w	r3, #0
 80235cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80235d0:	4659      	mov	r1, fp
 80235d2:	00cb      	lsls	r3, r1, #3
 80235d4:	4651      	mov	r1, sl
 80235d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80235da:	4651      	mov	r1, sl
 80235dc:	00ca      	lsls	r2, r1, #3
 80235de:	4610      	mov	r0, r2
 80235e0:	4619      	mov	r1, r3
 80235e2:	4603      	mov	r3, r0
 80235e4:	4642      	mov	r2, r8
 80235e6:	189b      	adds	r3, r3, r2
 80235e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80235ec:	464b      	mov	r3, r9
 80235ee:	460a      	mov	r2, r1
 80235f0:	eb42 0303 	adc.w	r3, r2, r3
 80235f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80235f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80235fc:	685b      	ldr	r3, [r3, #4]
 80235fe:	2200      	movs	r2, #0
 8023600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8023604:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8023608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 802360c:	460b      	mov	r3, r1
 802360e:	18db      	adds	r3, r3, r3
 8023610:	62bb      	str	r3, [r7, #40]	@ 0x28
 8023612:	4613      	mov	r3, r2
 8023614:	eb42 0303 	adc.w	r3, r2, r3
 8023618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802361a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 802361e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8023622:	f7fc fe35 	bl	8020290 <__aeabi_uldivmod>
 8023626:	4602      	mov	r2, r0
 8023628:	460b      	mov	r3, r1
 802362a:	4b0d      	ldr	r3, [pc, #52]	@ (8023660 <UART_SetConfig+0x2d4>)
 802362c:	fba3 1302 	umull	r1, r3, r3, r2
 8023630:	095b      	lsrs	r3, r3, #5
 8023632:	2164      	movs	r1, #100	@ 0x64
 8023634:	fb01 f303 	mul.w	r3, r1, r3
 8023638:	1ad3      	subs	r3, r2, r3
 802363a:	00db      	lsls	r3, r3, #3
 802363c:	3332      	adds	r3, #50	@ 0x32
 802363e:	4a08      	ldr	r2, [pc, #32]	@ (8023660 <UART_SetConfig+0x2d4>)
 8023640:	fba2 2303 	umull	r2, r3, r2, r3
 8023644:	095b      	lsrs	r3, r3, #5
 8023646:	f003 0207 	and.w	r2, r3, #7
 802364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802364e:	681b      	ldr	r3, [r3, #0]
 8023650:	4422      	add	r2, r4
 8023652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8023654:	e106      	b.n	8023864 <UART_SetConfig+0x4d8>
 8023656:	bf00      	nop
 8023658:	40011000 	.word	0x40011000
 802365c:	40011400 	.word	0x40011400
 8023660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8023664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8023668:	2200      	movs	r2, #0
 802366a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802366e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8023672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8023676:	4642      	mov	r2, r8
 8023678:	464b      	mov	r3, r9
 802367a:	1891      	adds	r1, r2, r2
 802367c:	6239      	str	r1, [r7, #32]
 802367e:	415b      	adcs	r3, r3
 8023680:	627b      	str	r3, [r7, #36]	@ 0x24
 8023682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8023686:	4641      	mov	r1, r8
 8023688:	1854      	adds	r4, r2, r1
 802368a:	4649      	mov	r1, r9
 802368c:	eb43 0501 	adc.w	r5, r3, r1
 8023690:	f04f 0200 	mov.w	r2, #0
 8023694:	f04f 0300 	mov.w	r3, #0
 8023698:	00eb      	lsls	r3, r5, #3
 802369a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802369e:	00e2      	lsls	r2, r4, #3
 80236a0:	4614      	mov	r4, r2
 80236a2:	461d      	mov	r5, r3
 80236a4:	4643      	mov	r3, r8
 80236a6:	18e3      	adds	r3, r4, r3
 80236a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80236ac:	464b      	mov	r3, r9
 80236ae:	eb45 0303 	adc.w	r3, r5, r3
 80236b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80236b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80236ba:	685b      	ldr	r3, [r3, #4]
 80236bc:	2200      	movs	r2, #0
 80236be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80236c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80236c6:	f04f 0200 	mov.w	r2, #0
 80236ca:	f04f 0300 	mov.w	r3, #0
 80236ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80236d2:	4629      	mov	r1, r5
 80236d4:	008b      	lsls	r3, r1, #2
 80236d6:	4621      	mov	r1, r4
 80236d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80236dc:	4621      	mov	r1, r4
 80236de:	008a      	lsls	r2, r1, #2
 80236e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80236e4:	f7fc fdd4 	bl	8020290 <__aeabi_uldivmod>
 80236e8:	4602      	mov	r2, r0
 80236ea:	460b      	mov	r3, r1
 80236ec:	4b60      	ldr	r3, [pc, #384]	@ (8023870 <UART_SetConfig+0x4e4>)
 80236ee:	fba3 2302 	umull	r2, r3, r3, r2
 80236f2:	095b      	lsrs	r3, r3, #5
 80236f4:	011c      	lsls	r4, r3, #4
 80236f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80236fa:	2200      	movs	r2, #0
 80236fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8023700:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8023704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8023708:	4642      	mov	r2, r8
 802370a:	464b      	mov	r3, r9
 802370c:	1891      	adds	r1, r2, r2
 802370e:	61b9      	str	r1, [r7, #24]
 8023710:	415b      	adcs	r3, r3
 8023712:	61fb      	str	r3, [r7, #28]
 8023714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023718:	4641      	mov	r1, r8
 802371a:	1851      	adds	r1, r2, r1
 802371c:	6139      	str	r1, [r7, #16]
 802371e:	4649      	mov	r1, r9
 8023720:	414b      	adcs	r3, r1
 8023722:	617b      	str	r3, [r7, #20]
 8023724:	f04f 0200 	mov.w	r2, #0
 8023728:	f04f 0300 	mov.w	r3, #0
 802372c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8023730:	4659      	mov	r1, fp
 8023732:	00cb      	lsls	r3, r1, #3
 8023734:	4651      	mov	r1, sl
 8023736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802373a:	4651      	mov	r1, sl
 802373c:	00ca      	lsls	r2, r1, #3
 802373e:	4610      	mov	r0, r2
 8023740:	4619      	mov	r1, r3
 8023742:	4603      	mov	r3, r0
 8023744:	4642      	mov	r2, r8
 8023746:	189b      	adds	r3, r3, r2
 8023748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 802374c:	464b      	mov	r3, r9
 802374e:	460a      	mov	r2, r1
 8023750:	eb42 0303 	adc.w	r3, r2, r3
 8023754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8023758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802375c:	685b      	ldr	r3, [r3, #4]
 802375e:	2200      	movs	r2, #0
 8023760:	67bb      	str	r3, [r7, #120]	@ 0x78
 8023762:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8023764:	f04f 0200 	mov.w	r2, #0
 8023768:	f04f 0300 	mov.w	r3, #0
 802376c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8023770:	4649      	mov	r1, r9
 8023772:	008b      	lsls	r3, r1, #2
 8023774:	4641      	mov	r1, r8
 8023776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802377a:	4641      	mov	r1, r8
 802377c:	008a      	lsls	r2, r1, #2
 802377e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8023782:	f7fc fd85 	bl	8020290 <__aeabi_uldivmod>
 8023786:	4602      	mov	r2, r0
 8023788:	460b      	mov	r3, r1
 802378a:	4611      	mov	r1, r2
 802378c:	4b38      	ldr	r3, [pc, #224]	@ (8023870 <UART_SetConfig+0x4e4>)
 802378e:	fba3 2301 	umull	r2, r3, r3, r1
 8023792:	095b      	lsrs	r3, r3, #5
 8023794:	2264      	movs	r2, #100	@ 0x64
 8023796:	fb02 f303 	mul.w	r3, r2, r3
 802379a:	1acb      	subs	r3, r1, r3
 802379c:	011b      	lsls	r3, r3, #4
 802379e:	3332      	adds	r3, #50	@ 0x32
 80237a0:	4a33      	ldr	r2, [pc, #204]	@ (8023870 <UART_SetConfig+0x4e4>)
 80237a2:	fba2 2303 	umull	r2, r3, r2, r3
 80237a6:	095b      	lsrs	r3, r3, #5
 80237a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80237ac:	441c      	add	r4, r3
 80237ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80237b2:	2200      	movs	r2, #0
 80237b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80237b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80237b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80237bc:	4642      	mov	r2, r8
 80237be:	464b      	mov	r3, r9
 80237c0:	1891      	adds	r1, r2, r2
 80237c2:	60b9      	str	r1, [r7, #8]
 80237c4:	415b      	adcs	r3, r3
 80237c6:	60fb      	str	r3, [r7, #12]
 80237c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80237cc:	4641      	mov	r1, r8
 80237ce:	1851      	adds	r1, r2, r1
 80237d0:	6039      	str	r1, [r7, #0]
 80237d2:	4649      	mov	r1, r9
 80237d4:	414b      	adcs	r3, r1
 80237d6:	607b      	str	r3, [r7, #4]
 80237d8:	f04f 0200 	mov.w	r2, #0
 80237dc:	f04f 0300 	mov.w	r3, #0
 80237e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80237e4:	4659      	mov	r1, fp
 80237e6:	00cb      	lsls	r3, r1, #3
 80237e8:	4651      	mov	r1, sl
 80237ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80237ee:	4651      	mov	r1, sl
 80237f0:	00ca      	lsls	r2, r1, #3
 80237f2:	4610      	mov	r0, r2
 80237f4:	4619      	mov	r1, r3
 80237f6:	4603      	mov	r3, r0
 80237f8:	4642      	mov	r2, r8
 80237fa:	189b      	adds	r3, r3, r2
 80237fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80237fe:	464b      	mov	r3, r9
 8023800:	460a      	mov	r2, r1
 8023802:	eb42 0303 	adc.w	r3, r2, r3
 8023806:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8023808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802380c:	685b      	ldr	r3, [r3, #4]
 802380e:	2200      	movs	r2, #0
 8023810:	663b      	str	r3, [r7, #96]	@ 0x60
 8023812:	667a      	str	r2, [r7, #100]	@ 0x64
 8023814:	f04f 0200 	mov.w	r2, #0
 8023818:	f04f 0300 	mov.w	r3, #0
 802381c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8023820:	4649      	mov	r1, r9
 8023822:	008b      	lsls	r3, r1, #2
 8023824:	4641      	mov	r1, r8
 8023826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802382a:	4641      	mov	r1, r8
 802382c:	008a      	lsls	r2, r1, #2
 802382e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8023832:	f7fc fd2d 	bl	8020290 <__aeabi_uldivmod>
 8023836:	4602      	mov	r2, r0
 8023838:	460b      	mov	r3, r1
 802383a:	4b0d      	ldr	r3, [pc, #52]	@ (8023870 <UART_SetConfig+0x4e4>)
 802383c:	fba3 1302 	umull	r1, r3, r3, r2
 8023840:	095b      	lsrs	r3, r3, #5
 8023842:	2164      	movs	r1, #100	@ 0x64
 8023844:	fb01 f303 	mul.w	r3, r1, r3
 8023848:	1ad3      	subs	r3, r2, r3
 802384a:	011b      	lsls	r3, r3, #4
 802384c:	3332      	adds	r3, #50	@ 0x32
 802384e:	4a08      	ldr	r2, [pc, #32]	@ (8023870 <UART_SetConfig+0x4e4>)
 8023850:	fba2 2303 	umull	r2, r3, r2, r3
 8023854:	095b      	lsrs	r3, r3, #5
 8023856:	f003 020f 	and.w	r2, r3, #15
 802385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802385e:	681b      	ldr	r3, [r3, #0]
 8023860:	4422      	add	r2, r4
 8023862:	609a      	str	r2, [r3, #8]
}
 8023864:	bf00      	nop
 8023866:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 802386a:	46bd      	mov	sp, r7
 802386c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8023870:	51eb851f 	.word	0x51eb851f

08023874 <__NVIC_SetPriority>:
{
 8023874:	b480      	push	{r7}
 8023876:	b083      	sub	sp, #12
 8023878:	af00      	add	r7, sp, #0
 802387a:	4603      	mov	r3, r0
 802387c:	6039      	str	r1, [r7, #0]
 802387e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023884:	2b00      	cmp	r3, #0
 8023886:	db0a      	blt.n	802389e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023888:	683b      	ldr	r3, [r7, #0]
 802388a:	b2da      	uxtb	r2, r3
 802388c:	490c      	ldr	r1, [pc, #48]	@ (80238c0 <__NVIC_SetPriority+0x4c>)
 802388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023892:	0112      	lsls	r2, r2, #4
 8023894:	b2d2      	uxtb	r2, r2
 8023896:	440b      	add	r3, r1
 8023898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 802389c:	e00a      	b.n	80238b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802389e:	683b      	ldr	r3, [r7, #0]
 80238a0:	b2da      	uxtb	r2, r3
 80238a2:	4908      	ldr	r1, [pc, #32]	@ (80238c4 <__NVIC_SetPriority+0x50>)
 80238a4:	79fb      	ldrb	r3, [r7, #7]
 80238a6:	f003 030f 	and.w	r3, r3, #15
 80238aa:	3b04      	subs	r3, #4
 80238ac:	0112      	lsls	r2, r2, #4
 80238ae:	b2d2      	uxtb	r2, r2
 80238b0:	440b      	add	r3, r1
 80238b2:	761a      	strb	r2, [r3, #24]
}
 80238b4:	bf00      	nop
 80238b6:	370c      	adds	r7, #12
 80238b8:	46bd      	mov	sp, r7
 80238ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238be:	4770      	bx	lr
 80238c0:	e000e100 	.word	0xe000e100
 80238c4:	e000ed00 	.word	0xe000ed00

080238c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80238c8:	b580      	push	{r7, lr}
 80238ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80238cc:	2100      	movs	r1, #0
 80238ce:	f06f 0004 	mvn.w	r0, #4
 80238d2:	f7ff ffcf 	bl	8023874 <__NVIC_SetPriority>
#endif
}
 80238d6:	bf00      	nop
 80238d8:	bd80      	pop	{r7, pc}
	...

080238dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80238dc:	b480      	push	{r7}
 80238de:	b083      	sub	sp, #12
 80238e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80238e2:	f3ef 8305 	mrs	r3, IPSR
 80238e6:	603b      	str	r3, [r7, #0]
  return(result);
 80238e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80238ea:	2b00      	cmp	r3, #0
 80238ec:	d003      	beq.n	80238f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80238ee:	f06f 0305 	mvn.w	r3, #5
 80238f2:	607b      	str	r3, [r7, #4]
 80238f4:	e00c      	b.n	8023910 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80238f6:	4b0a      	ldr	r3, [pc, #40]	@ (8023920 <osKernelInitialize+0x44>)
 80238f8:	681b      	ldr	r3, [r3, #0]
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	d105      	bne.n	802390a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80238fe:	4b08      	ldr	r3, [pc, #32]	@ (8023920 <osKernelInitialize+0x44>)
 8023900:	2201      	movs	r2, #1
 8023902:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8023904:	2300      	movs	r3, #0
 8023906:	607b      	str	r3, [r7, #4]
 8023908:	e002      	b.n	8023910 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 802390a:	f04f 33ff 	mov.w	r3, #4294967295
 802390e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8023910:	687b      	ldr	r3, [r7, #4]
}
 8023912:	4618      	mov	r0, r3
 8023914:	370c      	adds	r7, #12
 8023916:	46bd      	mov	sp, r7
 8023918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802391c:	4770      	bx	lr
 802391e:	bf00      	nop
 8023920:	2000015c 	.word	0x2000015c

08023924 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8023924:	b580      	push	{r7, lr}
 8023926:	b082      	sub	sp, #8
 8023928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802392a:	f3ef 8305 	mrs	r3, IPSR
 802392e:	603b      	str	r3, [r7, #0]
  return(result);
 8023930:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8023932:	2b00      	cmp	r3, #0
 8023934:	d003      	beq.n	802393e <osKernelStart+0x1a>
    stat = osErrorISR;
 8023936:	f06f 0305 	mvn.w	r3, #5
 802393a:	607b      	str	r3, [r7, #4]
 802393c:	e010      	b.n	8023960 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 802393e:	4b0b      	ldr	r3, [pc, #44]	@ (802396c <osKernelStart+0x48>)
 8023940:	681b      	ldr	r3, [r3, #0]
 8023942:	2b01      	cmp	r3, #1
 8023944:	d109      	bne.n	802395a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8023946:	f7ff ffbf 	bl	80238c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 802394a:	4b08      	ldr	r3, [pc, #32]	@ (802396c <osKernelStart+0x48>)
 802394c:	2202      	movs	r2, #2
 802394e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8023950:	f001 f87a 	bl	8024a48 <vTaskStartScheduler>
      stat = osOK;
 8023954:	2300      	movs	r3, #0
 8023956:	607b      	str	r3, [r7, #4]
 8023958:	e002      	b.n	8023960 <osKernelStart+0x3c>
    } else {
      stat = osError;
 802395a:	f04f 33ff 	mov.w	r3, #4294967295
 802395e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8023960:	687b      	ldr	r3, [r7, #4]
}
 8023962:	4618      	mov	r0, r3
 8023964:	3708      	adds	r7, #8
 8023966:	46bd      	mov	sp, r7
 8023968:	bd80      	pop	{r7, pc}
 802396a:	bf00      	nop
 802396c:	2000015c 	.word	0x2000015c

08023970 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8023970:	b580      	push	{r7, lr}
 8023972:	b08e      	sub	sp, #56	@ 0x38
 8023974:	af04      	add	r7, sp, #16
 8023976:	60f8      	str	r0, [r7, #12]
 8023978:	60b9      	str	r1, [r7, #8]
 802397a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 802397c:	2300      	movs	r3, #0
 802397e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8023980:	f3ef 8305 	mrs	r3, IPSR
 8023984:	617b      	str	r3, [r7, #20]
  return(result);
 8023986:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8023988:	2b00      	cmp	r3, #0
 802398a:	d17e      	bne.n	8023a8a <osThreadNew+0x11a>
 802398c:	68fb      	ldr	r3, [r7, #12]
 802398e:	2b00      	cmp	r3, #0
 8023990:	d07b      	beq.n	8023a8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8023992:	2380      	movs	r3, #128	@ 0x80
 8023994:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8023996:	2318      	movs	r3, #24
 8023998:	61fb      	str	r3, [r7, #28]

    name = NULL;
 802399a:	2300      	movs	r3, #0
 802399c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 802399e:	f04f 33ff 	mov.w	r3, #4294967295
 80239a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80239a4:	687b      	ldr	r3, [r7, #4]
 80239a6:	2b00      	cmp	r3, #0
 80239a8:	d045      	beq.n	8023a36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80239aa:	687b      	ldr	r3, [r7, #4]
 80239ac:	681b      	ldr	r3, [r3, #0]
 80239ae:	2b00      	cmp	r3, #0
 80239b0:	d002      	beq.n	80239b8 <osThreadNew+0x48>
        name = attr->name;
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	681b      	ldr	r3, [r3, #0]
 80239b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	699b      	ldr	r3, [r3, #24]
 80239bc:	2b00      	cmp	r3, #0
 80239be:	d002      	beq.n	80239c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80239c0:	687b      	ldr	r3, [r7, #4]
 80239c2:	699b      	ldr	r3, [r3, #24]
 80239c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80239c6:	69fb      	ldr	r3, [r7, #28]
 80239c8:	2b00      	cmp	r3, #0
 80239ca:	d008      	beq.n	80239de <osThreadNew+0x6e>
 80239cc:	69fb      	ldr	r3, [r7, #28]
 80239ce:	2b38      	cmp	r3, #56	@ 0x38
 80239d0:	d805      	bhi.n	80239de <osThreadNew+0x6e>
 80239d2:	687b      	ldr	r3, [r7, #4]
 80239d4:	685b      	ldr	r3, [r3, #4]
 80239d6:	f003 0301 	and.w	r3, r3, #1
 80239da:	2b00      	cmp	r3, #0
 80239dc:	d001      	beq.n	80239e2 <osThreadNew+0x72>
        return (NULL);
 80239de:	2300      	movs	r3, #0
 80239e0:	e054      	b.n	8023a8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80239e2:	687b      	ldr	r3, [r7, #4]
 80239e4:	695b      	ldr	r3, [r3, #20]
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	d003      	beq.n	80239f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80239ea:	687b      	ldr	r3, [r7, #4]
 80239ec:	695b      	ldr	r3, [r3, #20]
 80239ee:	089b      	lsrs	r3, r3, #2
 80239f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80239f2:	687b      	ldr	r3, [r7, #4]
 80239f4:	689b      	ldr	r3, [r3, #8]
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	d00e      	beq.n	8023a18 <osThreadNew+0xa8>
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	68db      	ldr	r3, [r3, #12]
 80239fe:	2b5b      	cmp	r3, #91	@ 0x5b
 8023a00:	d90a      	bls.n	8023a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8023a02:	687b      	ldr	r3, [r7, #4]
 8023a04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8023a06:	2b00      	cmp	r3, #0
 8023a08:	d006      	beq.n	8023a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8023a0a:	687b      	ldr	r3, [r7, #4]
 8023a0c:	695b      	ldr	r3, [r3, #20]
 8023a0e:	2b00      	cmp	r3, #0
 8023a10:	d002      	beq.n	8023a18 <osThreadNew+0xa8>
        mem = 1;
 8023a12:	2301      	movs	r3, #1
 8023a14:	61bb      	str	r3, [r7, #24]
 8023a16:	e010      	b.n	8023a3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	689b      	ldr	r3, [r3, #8]
 8023a1c:	2b00      	cmp	r3, #0
 8023a1e:	d10c      	bne.n	8023a3a <osThreadNew+0xca>
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	68db      	ldr	r3, [r3, #12]
 8023a24:	2b00      	cmp	r3, #0
 8023a26:	d108      	bne.n	8023a3a <osThreadNew+0xca>
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	691b      	ldr	r3, [r3, #16]
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	d104      	bne.n	8023a3a <osThreadNew+0xca>
          mem = 0;
 8023a30:	2300      	movs	r3, #0
 8023a32:	61bb      	str	r3, [r7, #24]
 8023a34:	e001      	b.n	8023a3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8023a36:	2300      	movs	r3, #0
 8023a38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8023a3a:	69bb      	ldr	r3, [r7, #24]
 8023a3c:	2b01      	cmp	r3, #1
 8023a3e:	d110      	bne.n	8023a62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8023a40:	687b      	ldr	r3, [r7, #4]
 8023a42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8023a44:	687a      	ldr	r2, [r7, #4]
 8023a46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8023a48:	9202      	str	r2, [sp, #8]
 8023a4a:	9301      	str	r3, [sp, #4]
 8023a4c:	69fb      	ldr	r3, [r7, #28]
 8023a4e:	9300      	str	r3, [sp, #0]
 8023a50:	68bb      	ldr	r3, [r7, #8]
 8023a52:	6a3a      	ldr	r2, [r7, #32]
 8023a54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8023a56:	68f8      	ldr	r0, [r7, #12]
 8023a58:	f000 fe1a 	bl	8024690 <xTaskCreateStatic>
 8023a5c:	4603      	mov	r3, r0
 8023a5e:	613b      	str	r3, [r7, #16]
 8023a60:	e013      	b.n	8023a8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8023a62:	69bb      	ldr	r3, [r7, #24]
 8023a64:	2b00      	cmp	r3, #0
 8023a66:	d110      	bne.n	8023a8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8023a68:	6a3b      	ldr	r3, [r7, #32]
 8023a6a:	b29a      	uxth	r2, r3
 8023a6c:	f107 0310 	add.w	r3, r7, #16
 8023a70:	9301      	str	r3, [sp, #4]
 8023a72:	69fb      	ldr	r3, [r7, #28]
 8023a74:	9300      	str	r3, [sp, #0]
 8023a76:	68bb      	ldr	r3, [r7, #8]
 8023a78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8023a7a:	68f8      	ldr	r0, [r7, #12]
 8023a7c:	f000 fe68 	bl	8024750 <xTaskCreate>
 8023a80:	4603      	mov	r3, r0
 8023a82:	2b01      	cmp	r3, #1
 8023a84:	d001      	beq.n	8023a8a <osThreadNew+0x11a>
            hTask = NULL;
 8023a86:	2300      	movs	r3, #0
 8023a88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8023a8a:	693b      	ldr	r3, [r7, #16]
}
 8023a8c:	4618      	mov	r0, r3
 8023a8e:	3728      	adds	r7, #40	@ 0x28
 8023a90:	46bd      	mov	sp, r7
 8023a92:	bd80      	pop	{r7, pc}

08023a94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8023a94:	b580      	push	{r7, lr}
 8023a96:	b084      	sub	sp, #16
 8023a98:	af00      	add	r7, sp, #0
 8023a9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8023a9c:	f3ef 8305 	mrs	r3, IPSR
 8023aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8023aa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8023aa4:	2b00      	cmp	r3, #0
 8023aa6:	d003      	beq.n	8023ab0 <osDelay+0x1c>
    stat = osErrorISR;
 8023aa8:	f06f 0305 	mvn.w	r3, #5
 8023aac:	60fb      	str	r3, [r7, #12]
 8023aae:	e007      	b.n	8023ac0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8023ab0:	2300      	movs	r3, #0
 8023ab2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	2b00      	cmp	r3, #0
 8023ab8:	d002      	beq.n	8023ac0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8023aba:	6878      	ldr	r0, [r7, #4]
 8023abc:	f000 ff8e 	bl	80249dc <vTaskDelay>
    }
  }

  return (stat);
 8023ac0:	68fb      	ldr	r3, [r7, #12]
}
 8023ac2:	4618      	mov	r0, r3
 8023ac4:	3710      	adds	r7, #16
 8023ac6:	46bd      	mov	sp, r7
 8023ac8:	bd80      	pop	{r7, pc}
	...

08023acc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8023acc:	b480      	push	{r7}
 8023ace:	b085      	sub	sp, #20
 8023ad0:	af00      	add	r7, sp, #0
 8023ad2:	60f8      	str	r0, [r7, #12]
 8023ad4:	60b9      	str	r1, [r7, #8]
 8023ad6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8023ad8:	68fb      	ldr	r3, [r7, #12]
 8023ada:	4a07      	ldr	r2, [pc, #28]	@ (8023af8 <vApplicationGetIdleTaskMemory+0x2c>)
 8023adc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8023ade:	68bb      	ldr	r3, [r7, #8]
 8023ae0:	4a06      	ldr	r2, [pc, #24]	@ (8023afc <vApplicationGetIdleTaskMemory+0x30>)
 8023ae2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8023ae4:	687b      	ldr	r3, [r7, #4]
 8023ae6:	2280      	movs	r2, #128	@ 0x80
 8023ae8:	601a      	str	r2, [r3, #0]
}
 8023aea:	bf00      	nop
 8023aec:	3714      	adds	r7, #20
 8023aee:	46bd      	mov	sp, r7
 8023af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023af4:	4770      	bx	lr
 8023af6:	bf00      	nop
 8023af8:	20000160 	.word	0x20000160
 8023afc:	200001bc 	.word	0x200001bc

08023b00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8023b00:	b480      	push	{r7}
 8023b02:	b085      	sub	sp, #20
 8023b04:	af00      	add	r7, sp, #0
 8023b06:	60f8      	str	r0, [r7, #12]
 8023b08:	60b9      	str	r1, [r7, #8]
 8023b0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8023b0c:	68fb      	ldr	r3, [r7, #12]
 8023b0e:	4a07      	ldr	r2, [pc, #28]	@ (8023b2c <vApplicationGetTimerTaskMemory+0x2c>)
 8023b10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8023b12:	68bb      	ldr	r3, [r7, #8]
 8023b14:	4a06      	ldr	r2, [pc, #24]	@ (8023b30 <vApplicationGetTimerTaskMemory+0x30>)
 8023b16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8023b18:	687b      	ldr	r3, [r7, #4]
 8023b1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8023b1e:	601a      	str	r2, [r3, #0]
}
 8023b20:	bf00      	nop
 8023b22:	3714      	adds	r7, #20
 8023b24:	46bd      	mov	sp, r7
 8023b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b2a:	4770      	bx	lr
 8023b2c:	200003bc 	.word	0x200003bc
 8023b30:	20000418 	.word	0x20000418

08023b34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8023b34:	b480      	push	{r7}
 8023b36:	b083      	sub	sp, #12
 8023b38:	af00      	add	r7, sp, #0
 8023b3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	f103 0208 	add.w	r2, r3, #8
 8023b42:	687b      	ldr	r3, [r7, #4]
 8023b44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8023b46:	687b      	ldr	r3, [r7, #4]
 8023b48:	f04f 32ff 	mov.w	r2, #4294967295
 8023b4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8023b4e:	687b      	ldr	r3, [r7, #4]
 8023b50:	f103 0208 	add.w	r2, r3, #8
 8023b54:	687b      	ldr	r3, [r7, #4]
 8023b56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	f103 0208 	add.w	r2, r3, #8
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8023b62:	687b      	ldr	r3, [r7, #4]
 8023b64:	2200      	movs	r2, #0
 8023b66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8023b68:	bf00      	nop
 8023b6a:	370c      	adds	r7, #12
 8023b6c:	46bd      	mov	sp, r7
 8023b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b72:	4770      	bx	lr

08023b74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8023b74:	b480      	push	{r7}
 8023b76:	b083      	sub	sp, #12
 8023b78:	af00      	add	r7, sp, #0
 8023b7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	2200      	movs	r2, #0
 8023b80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8023b82:	bf00      	nop
 8023b84:	370c      	adds	r7, #12
 8023b86:	46bd      	mov	sp, r7
 8023b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b8c:	4770      	bx	lr

08023b8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8023b8e:	b480      	push	{r7}
 8023b90:	b085      	sub	sp, #20
 8023b92:	af00      	add	r7, sp, #0
 8023b94:	6078      	str	r0, [r7, #4]
 8023b96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8023b98:	687b      	ldr	r3, [r7, #4]
 8023b9a:	685b      	ldr	r3, [r3, #4]
 8023b9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8023b9e:	683b      	ldr	r3, [r7, #0]
 8023ba0:	68fa      	ldr	r2, [r7, #12]
 8023ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8023ba4:	68fb      	ldr	r3, [r7, #12]
 8023ba6:	689a      	ldr	r2, [r3, #8]
 8023ba8:	683b      	ldr	r3, [r7, #0]
 8023baa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8023bac:	68fb      	ldr	r3, [r7, #12]
 8023bae:	689b      	ldr	r3, [r3, #8]
 8023bb0:	683a      	ldr	r2, [r7, #0]
 8023bb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8023bb4:	68fb      	ldr	r3, [r7, #12]
 8023bb6:	683a      	ldr	r2, [r7, #0]
 8023bb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8023bba:	683b      	ldr	r3, [r7, #0]
 8023bbc:	687a      	ldr	r2, [r7, #4]
 8023bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8023bc0:	687b      	ldr	r3, [r7, #4]
 8023bc2:	681b      	ldr	r3, [r3, #0]
 8023bc4:	1c5a      	adds	r2, r3, #1
 8023bc6:	687b      	ldr	r3, [r7, #4]
 8023bc8:	601a      	str	r2, [r3, #0]
}
 8023bca:	bf00      	nop
 8023bcc:	3714      	adds	r7, #20
 8023bce:	46bd      	mov	sp, r7
 8023bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bd4:	4770      	bx	lr

08023bd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8023bd6:	b480      	push	{r7}
 8023bd8:	b085      	sub	sp, #20
 8023bda:	af00      	add	r7, sp, #0
 8023bdc:	6078      	str	r0, [r7, #4]
 8023bde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8023be0:	683b      	ldr	r3, [r7, #0]
 8023be2:	681b      	ldr	r3, [r3, #0]
 8023be4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8023be6:	68bb      	ldr	r3, [r7, #8]
 8023be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023bec:	d103      	bne.n	8023bf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8023bee:	687b      	ldr	r3, [r7, #4]
 8023bf0:	691b      	ldr	r3, [r3, #16]
 8023bf2:	60fb      	str	r3, [r7, #12]
 8023bf4:	e00c      	b.n	8023c10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8023bf6:	687b      	ldr	r3, [r7, #4]
 8023bf8:	3308      	adds	r3, #8
 8023bfa:	60fb      	str	r3, [r7, #12]
 8023bfc:	e002      	b.n	8023c04 <vListInsert+0x2e>
 8023bfe:	68fb      	ldr	r3, [r7, #12]
 8023c00:	685b      	ldr	r3, [r3, #4]
 8023c02:	60fb      	str	r3, [r7, #12]
 8023c04:	68fb      	ldr	r3, [r7, #12]
 8023c06:	685b      	ldr	r3, [r3, #4]
 8023c08:	681b      	ldr	r3, [r3, #0]
 8023c0a:	68ba      	ldr	r2, [r7, #8]
 8023c0c:	429a      	cmp	r2, r3
 8023c0e:	d2f6      	bcs.n	8023bfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8023c10:	68fb      	ldr	r3, [r7, #12]
 8023c12:	685a      	ldr	r2, [r3, #4]
 8023c14:	683b      	ldr	r3, [r7, #0]
 8023c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8023c18:	683b      	ldr	r3, [r7, #0]
 8023c1a:	685b      	ldr	r3, [r3, #4]
 8023c1c:	683a      	ldr	r2, [r7, #0]
 8023c1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8023c20:	683b      	ldr	r3, [r7, #0]
 8023c22:	68fa      	ldr	r2, [r7, #12]
 8023c24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8023c26:	68fb      	ldr	r3, [r7, #12]
 8023c28:	683a      	ldr	r2, [r7, #0]
 8023c2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8023c2c:	683b      	ldr	r3, [r7, #0]
 8023c2e:	687a      	ldr	r2, [r7, #4]
 8023c30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8023c32:	687b      	ldr	r3, [r7, #4]
 8023c34:	681b      	ldr	r3, [r3, #0]
 8023c36:	1c5a      	adds	r2, r3, #1
 8023c38:	687b      	ldr	r3, [r7, #4]
 8023c3a:	601a      	str	r2, [r3, #0]
}
 8023c3c:	bf00      	nop
 8023c3e:	3714      	adds	r7, #20
 8023c40:	46bd      	mov	sp, r7
 8023c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c46:	4770      	bx	lr

08023c48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8023c48:	b480      	push	{r7}
 8023c4a:	b085      	sub	sp, #20
 8023c4c:	af00      	add	r7, sp, #0
 8023c4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8023c50:	687b      	ldr	r3, [r7, #4]
 8023c52:	691b      	ldr	r3, [r3, #16]
 8023c54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8023c56:	687b      	ldr	r3, [r7, #4]
 8023c58:	685b      	ldr	r3, [r3, #4]
 8023c5a:	687a      	ldr	r2, [r7, #4]
 8023c5c:	6892      	ldr	r2, [r2, #8]
 8023c5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8023c60:	687b      	ldr	r3, [r7, #4]
 8023c62:	689b      	ldr	r3, [r3, #8]
 8023c64:	687a      	ldr	r2, [r7, #4]
 8023c66:	6852      	ldr	r2, [r2, #4]
 8023c68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8023c6a:	68fb      	ldr	r3, [r7, #12]
 8023c6c:	685b      	ldr	r3, [r3, #4]
 8023c6e:	687a      	ldr	r2, [r7, #4]
 8023c70:	429a      	cmp	r2, r3
 8023c72:	d103      	bne.n	8023c7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8023c74:	687b      	ldr	r3, [r7, #4]
 8023c76:	689a      	ldr	r2, [r3, #8]
 8023c78:	68fb      	ldr	r3, [r7, #12]
 8023c7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8023c7c:	687b      	ldr	r3, [r7, #4]
 8023c7e:	2200      	movs	r2, #0
 8023c80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8023c82:	68fb      	ldr	r3, [r7, #12]
 8023c84:	681b      	ldr	r3, [r3, #0]
 8023c86:	1e5a      	subs	r2, r3, #1
 8023c88:	68fb      	ldr	r3, [r7, #12]
 8023c8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8023c8c:	68fb      	ldr	r3, [r7, #12]
 8023c8e:	681b      	ldr	r3, [r3, #0]
}
 8023c90:	4618      	mov	r0, r3
 8023c92:	3714      	adds	r7, #20
 8023c94:	46bd      	mov	sp, r7
 8023c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c9a:	4770      	bx	lr

08023c9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8023c9c:	b580      	push	{r7, lr}
 8023c9e:	b084      	sub	sp, #16
 8023ca0:	af00      	add	r7, sp, #0
 8023ca2:	6078      	str	r0, [r7, #4]
 8023ca4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8023ca6:	687b      	ldr	r3, [r7, #4]
 8023ca8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8023caa:	68fb      	ldr	r3, [r7, #12]
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	d10b      	bne.n	8023cc8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8023cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023cb4:	f383 8811 	msr	BASEPRI, r3
 8023cb8:	f3bf 8f6f 	isb	sy
 8023cbc:	f3bf 8f4f 	dsb	sy
 8023cc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8023cc2:	bf00      	nop
 8023cc4:	bf00      	nop
 8023cc6:	e7fd      	b.n	8023cc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8023cc8:	f002 f876 	bl	8025db8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8023ccc:	68fb      	ldr	r3, [r7, #12]
 8023cce:	681a      	ldr	r2, [r3, #0]
 8023cd0:	68fb      	ldr	r3, [r7, #12]
 8023cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023cd4:	68f9      	ldr	r1, [r7, #12]
 8023cd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8023cd8:	fb01 f303 	mul.w	r3, r1, r3
 8023cdc:	441a      	add	r2, r3
 8023cde:	68fb      	ldr	r3, [r7, #12]
 8023ce0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8023ce2:	68fb      	ldr	r3, [r7, #12]
 8023ce4:	2200      	movs	r2, #0
 8023ce6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8023ce8:	68fb      	ldr	r3, [r7, #12]
 8023cea:	681a      	ldr	r2, [r3, #0]
 8023cec:	68fb      	ldr	r3, [r7, #12]
 8023cee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8023cf0:	68fb      	ldr	r3, [r7, #12]
 8023cf2:	681a      	ldr	r2, [r3, #0]
 8023cf4:	68fb      	ldr	r3, [r7, #12]
 8023cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023cf8:	3b01      	subs	r3, #1
 8023cfa:	68f9      	ldr	r1, [r7, #12]
 8023cfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8023cfe:	fb01 f303 	mul.w	r3, r1, r3
 8023d02:	441a      	add	r2, r3
 8023d04:	68fb      	ldr	r3, [r7, #12]
 8023d06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8023d08:	68fb      	ldr	r3, [r7, #12]
 8023d0a:	22ff      	movs	r2, #255	@ 0xff
 8023d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8023d10:	68fb      	ldr	r3, [r7, #12]
 8023d12:	22ff      	movs	r2, #255	@ 0xff
 8023d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8023d18:	683b      	ldr	r3, [r7, #0]
 8023d1a:	2b00      	cmp	r3, #0
 8023d1c:	d114      	bne.n	8023d48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8023d1e:	68fb      	ldr	r3, [r7, #12]
 8023d20:	691b      	ldr	r3, [r3, #16]
 8023d22:	2b00      	cmp	r3, #0
 8023d24:	d01a      	beq.n	8023d5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8023d26:	68fb      	ldr	r3, [r7, #12]
 8023d28:	3310      	adds	r3, #16
 8023d2a:	4618      	mov	r0, r3
 8023d2c:	f001 f91a 	bl	8024f64 <xTaskRemoveFromEventList>
 8023d30:	4603      	mov	r3, r0
 8023d32:	2b00      	cmp	r3, #0
 8023d34:	d012      	beq.n	8023d5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8023d36:	4b0d      	ldr	r3, [pc, #52]	@ (8023d6c <xQueueGenericReset+0xd0>)
 8023d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8023d3c:	601a      	str	r2, [r3, #0]
 8023d3e:	f3bf 8f4f 	dsb	sy
 8023d42:	f3bf 8f6f 	isb	sy
 8023d46:	e009      	b.n	8023d5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8023d48:	68fb      	ldr	r3, [r7, #12]
 8023d4a:	3310      	adds	r3, #16
 8023d4c:	4618      	mov	r0, r3
 8023d4e:	f7ff fef1 	bl	8023b34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8023d52:	68fb      	ldr	r3, [r7, #12]
 8023d54:	3324      	adds	r3, #36	@ 0x24
 8023d56:	4618      	mov	r0, r3
 8023d58:	f7ff feec 	bl	8023b34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8023d5c:	f002 f85e 	bl	8025e1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8023d60:	2301      	movs	r3, #1
}
 8023d62:	4618      	mov	r0, r3
 8023d64:	3710      	adds	r7, #16
 8023d66:	46bd      	mov	sp, r7
 8023d68:	bd80      	pop	{r7, pc}
 8023d6a:	bf00      	nop
 8023d6c:	e000ed04 	.word	0xe000ed04

08023d70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8023d70:	b580      	push	{r7, lr}
 8023d72:	b08e      	sub	sp, #56	@ 0x38
 8023d74:	af02      	add	r7, sp, #8
 8023d76:	60f8      	str	r0, [r7, #12]
 8023d78:	60b9      	str	r1, [r7, #8]
 8023d7a:	607a      	str	r2, [r7, #4]
 8023d7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8023d7e:	68fb      	ldr	r3, [r7, #12]
 8023d80:	2b00      	cmp	r3, #0
 8023d82:	d10b      	bne.n	8023d9c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8023d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023d88:	f383 8811 	msr	BASEPRI, r3
 8023d8c:	f3bf 8f6f 	isb	sy
 8023d90:	f3bf 8f4f 	dsb	sy
 8023d94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8023d96:	bf00      	nop
 8023d98:	bf00      	nop
 8023d9a:	e7fd      	b.n	8023d98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8023d9c:	683b      	ldr	r3, [r7, #0]
 8023d9e:	2b00      	cmp	r3, #0
 8023da0:	d10b      	bne.n	8023dba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8023da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023da6:	f383 8811 	msr	BASEPRI, r3
 8023daa:	f3bf 8f6f 	isb	sy
 8023dae:	f3bf 8f4f 	dsb	sy
 8023db2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8023db4:	bf00      	nop
 8023db6:	bf00      	nop
 8023db8:	e7fd      	b.n	8023db6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	d002      	beq.n	8023dc6 <xQueueGenericCreateStatic+0x56>
 8023dc0:	68bb      	ldr	r3, [r7, #8]
 8023dc2:	2b00      	cmp	r3, #0
 8023dc4:	d001      	beq.n	8023dca <xQueueGenericCreateStatic+0x5a>
 8023dc6:	2301      	movs	r3, #1
 8023dc8:	e000      	b.n	8023dcc <xQueueGenericCreateStatic+0x5c>
 8023dca:	2300      	movs	r3, #0
 8023dcc:	2b00      	cmp	r3, #0
 8023dce:	d10b      	bne.n	8023de8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8023dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023dd4:	f383 8811 	msr	BASEPRI, r3
 8023dd8:	f3bf 8f6f 	isb	sy
 8023ddc:	f3bf 8f4f 	dsb	sy
 8023de0:	623b      	str	r3, [r7, #32]
}
 8023de2:	bf00      	nop
 8023de4:	bf00      	nop
 8023de6:	e7fd      	b.n	8023de4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8023de8:	687b      	ldr	r3, [r7, #4]
 8023dea:	2b00      	cmp	r3, #0
 8023dec:	d102      	bne.n	8023df4 <xQueueGenericCreateStatic+0x84>
 8023dee:	68bb      	ldr	r3, [r7, #8]
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	d101      	bne.n	8023df8 <xQueueGenericCreateStatic+0x88>
 8023df4:	2301      	movs	r3, #1
 8023df6:	e000      	b.n	8023dfa <xQueueGenericCreateStatic+0x8a>
 8023df8:	2300      	movs	r3, #0
 8023dfa:	2b00      	cmp	r3, #0
 8023dfc:	d10b      	bne.n	8023e16 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8023dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023e02:	f383 8811 	msr	BASEPRI, r3
 8023e06:	f3bf 8f6f 	isb	sy
 8023e0a:	f3bf 8f4f 	dsb	sy
 8023e0e:	61fb      	str	r3, [r7, #28]
}
 8023e10:	bf00      	nop
 8023e12:	bf00      	nop
 8023e14:	e7fd      	b.n	8023e12 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8023e16:	2350      	movs	r3, #80	@ 0x50
 8023e18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8023e1a:	697b      	ldr	r3, [r7, #20]
 8023e1c:	2b50      	cmp	r3, #80	@ 0x50
 8023e1e:	d00b      	beq.n	8023e38 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8023e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023e24:	f383 8811 	msr	BASEPRI, r3
 8023e28:	f3bf 8f6f 	isb	sy
 8023e2c:	f3bf 8f4f 	dsb	sy
 8023e30:	61bb      	str	r3, [r7, #24]
}
 8023e32:	bf00      	nop
 8023e34:	bf00      	nop
 8023e36:	e7fd      	b.n	8023e34 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8023e38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8023e3a:	683b      	ldr	r3, [r7, #0]
 8023e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8023e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023e40:	2b00      	cmp	r3, #0
 8023e42:	d00d      	beq.n	8023e60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8023e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023e46:	2201      	movs	r2, #1
 8023e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8023e4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8023e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023e52:	9300      	str	r3, [sp, #0]
 8023e54:	4613      	mov	r3, r2
 8023e56:	687a      	ldr	r2, [r7, #4]
 8023e58:	68b9      	ldr	r1, [r7, #8]
 8023e5a:	68f8      	ldr	r0, [r7, #12]
 8023e5c:	f000 f805 	bl	8023e6a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8023e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8023e62:	4618      	mov	r0, r3
 8023e64:	3730      	adds	r7, #48	@ 0x30
 8023e66:	46bd      	mov	sp, r7
 8023e68:	bd80      	pop	{r7, pc}

08023e6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8023e6a:	b580      	push	{r7, lr}
 8023e6c:	b084      	sub	sp, #16
 8023e6e:	af00      	add	r7, sp, #0
 8023e70:	60f8      	str	r0, [r7, #12]
 8023e72:	60b9      	str	r1, [r7, #8]
 8023e74:	607a      	str	r2, [r7, #4]
 8023e76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8023e78:	68bb      	ldr	r3, [r7, #8]
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	d103      	bne.n	8023e86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8023e7e:	69bb      	ldr	r3, [r7, #24]
 8023e80:	69ba      	ldr	r2, [r7, #24]
 8023e82:	601a      	str	r2, [r3, #0]
 8023e84:	e002      	b.n	8023e8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8023e86:	69bb      	ldr	r3, [r7, #24]
 8023e88:	687a      	ldr	r2, [r7, #4]
 8023e8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8023e8c:	69bb      	ldr	r3, [r7, #24]
 8023e8e:	68fa      	ldr	r2, [r7, #12]
 8023e90:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8023e92:	69bb      	ldr	r3, [r7, #24]
 8023e94:	68ba      	ldr	r2, [r7, #8]
 8023e96:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8023e98:	2101      	movs	r1, #1
 8023e9a:	69b8      	ldr	r0, [r7, #24]
 8023e9c:	f7ff fefe 	bl	8023c9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8023ea0:	69bb      	ldr	r3, [r7, #24]
 8023ea2:	78fa      	ldrb	r2, [r7, #3]
 8023ea4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8023ea8:	bf00      	nop
 8023eaa:	3710      	adds	r7, #16
 8023eac:	46bd      	mov	sp, r7
 8023eae:	bd80      	pop	{r7, pc}

08023eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8023eb0:	b580      	push	{r7, lr}
 8023eb2:	b08e      	sub	sp, #56	@ 0x38
 8023eb4:	af00      	add	r7, sp, #0
 8023eb6:	60f8      	str	r0, [r7, #12]
 8023eb8:	60b9      	str	r1, [r7, #8]
 8023eba:	607a      	str	r2, [r7, #4]
 8023ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8023ebe:	2300      	movs	r3, #0
 8023ec0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8023ec2:	68fb      	ldr	r3, [r7, #12]
 8023ec4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8023ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023ec8:	2b00      	cmp	r3, #0
 8023eca:	d10b      	bne.n	8023ee4 <xQueueGenericSend+0x34>
	__asm volatile
 8023ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023ed0:	f383 8811 	msr	BASEPRI, r3
 8023ed4:	f3bf 8f6f 	isb	sy
 8023ed8:	f3bf 8f4f 	dsb	sy
 8023edc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8023ede:	bf00      	nop
 8023ee0:	bf00      	nop
 8023ee2:	e7fd      	b.n	8023ee0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8023ee4:	68bb      	ldr	r3, [r7, #8]
 8023ee6:	2b00      	cmp	r3, #0
 8023ee8:	d103      	bne.n	8023ef2 <xQueueGenericSend+0x42>
 8023eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8023eee:	2b00      	cmp	r3, #0
 8023ef0:	d101      	bne.n	8023ef6 <xQueueGenericSend+0x46>
 8023ef2:	2301      	movs	r3, #1
 8023ef4:	e000      	b.n	8023ef8 <xQueueGenericSend+0x48>
 8023ef6:	2300      	movs	r3, #0
 8023ef8:	2b00      	cmp	r3, #0
 8023efa:	d10b      	bne.n	8023f14 <xQueueGenericSend+0x64>
	__asm volatile
 8023efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023f00:	f383 8811 	msr	BASEPRI, r3
 8023f04:	f3bf 8f6f 	isb	sy
 8023f08:	f3bf 8f4f 	dsb	sy
 8023f0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8023f0e:	bf00      	nop
 8023f10:	bf00      	nop
 8023f12:	e7fd      	b.n	8023f10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8023f14:	683b      	ldr	r3, [r7, #0]
 8023f16:	2b02      	cmp	r3, #2
 8023f18:	d103      	bne.n	8023f22 <xQueueGenericSend+0x72>
 8023f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023f1e:	2b01      	cmp	r3, #1
 8023f20:	d101      	bne.n	8023f26 <xQueueGenericSend+0x76>
 8023f22:	2301      	movs	r3, #1
 8023f24:	e000      	b.n	8023f28 <xQueueGenericSend+0x78>
 8023f26:	2300      	movs	r3, #0
 8023f28:	2b00      	cmp	r3, #0
 8023f2a:	d10b      	bne.n	8023f44 <xQueueGenericSend+0x94>
	__asm volatile
 8023f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023f30:	f383 8811 	msr	BASEPRI, r3
 8023f34:	f3bf 8f6f 	isb	sy
 8023f38:	f3bf 8f4f 	dsb	sy
 8023f3c:	623b      	str	r3, [r7, #32]
}
 8023f3e:	bf00      	nop
 8023f40:	bf00      	nop
 8023f42:	e7fd      	b.n	8023f40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8023f44:	f001 f9ce 	bl	80252e4 <xTaskGetSchedulerState>
 8023f48:	4603      	mov	r3, r0
 8023f4a:	2b00      	cmp	r3, #0
 8023f4c:	d102      	bne.n	8023f54 <xQueueGenericSend+0xa4>
 8023f4e:	687b      	ldr	r3, [r7, #4]
 8023f50:	2b00      	cmp	r3, #0
 8023f52:	d101      	bne.n	8023f58 <xQueueGenericSend+0xa8>
 8023f54:	2301      	movs	r3, #1
 8023f56:	e000      	b.n	8023f5a <xQueueGenericSend+0xaa>
 8023f58:	2300      	movs	r3, #0
 8023f5a:	2b00      	cmp	r3, #0
 8023f5c:	d10b      	bne.n	8023f76 <xQueueGenericSend+0xc6>
	__asm volatile
 8023f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023f62:	f383 8811 	msr	BASEPRI, r3
 8023f66:	f3bf 8f6f 	isb	sy
 8023f6a:	f3bf 8f4f 	dsb	sy
 8023f6e:	61fb      	str	r3, [r7, #28]
}
 8023f70:	bf00      	nop
 8023f72:	bf00      	nop
 8023f74:	e7fd      	b.n	8023f72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8023f76:	f001 ff1f 	bl	8025db8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8023f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023f7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8023f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023f82:	429a      	cmp	r2, r3
 8023f84:	d302      	bcc.n	8023f8c <xQueueGenericSend+0xdc>
 8023f86:	683b      	ldr	r3, [r7, #0]
 8023f88:	2b02      	cmp	r3, #2
 8023f8a:	d129      	bne.n	8023fe0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8023f8c:	683a      	ldr	r2, [r7, #0]
 8023f8e:	68b9      	ldr	r1, [r7, #8]
 8023f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8023f92:	f000 fa0f 	bl	80243b4 <prvCopyDataToQueue>
 8023f96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8023f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	d010      	beq.n	8023fc2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8023fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fa2:	3324      	adds	r3, #36	@ 0x24
 8023fa4:	4618      	mov	r0, r3
 8023fa6:	f000 ffdd 	bl	8024f64 <xTaskRemoveFromEventList>
 8023faa:	4603      	mov	r3, r0
 8023fac:	2b00      	cmp	r3, #0
 8023fae:	d013      	beq.n	8023fd8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8023fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80240b0 <xQueueGenericSend+0x200>)
 8023fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8023fb6:	601a      	str	r2, [r3, #0]
 8023fb8:	f3bf 8f4f 	dsb	sy
 8023fbc:	f3bf 8f6f 	isb	sy
 8023fc0:	e00a      	b.n	8023fd8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8023fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	d007      	beq.n	8023fd8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8023fc8:	4b39      	ldr	r3, [pc, #228]	@ (80240b0 <xQueueGenericSend+0x200>)
 8023fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8023fce:	601a      	str	r2, [r3, #0]
 8023fd0:	f3bf 8f4f 	dsb	sy
 8023fd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8023fd8:	f001 ff20 	bl	8025e1c <vPortExitCritical>
				return pdPASS;
 8023fdc:	2301      	movs	r3, #1
 8023fde:	e063      	b.n	80240a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8023fe0:	687b      	ldr	r3, [r7, #4]
 8023fe2:	2b00      	cmp	r3, #0
 8023fe4:	d103      	bne.n	8023fee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8023fe6:	f001 ff19 	bl	8025e1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8023fea:	2300      	movs	r3, #0
 8023fec:	e05c      	b.n	80240a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8023fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023ff0:	2b00      	cmp	r3, #0
 8023ff2:	d106      	bne.n	8024002 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8023ff4:	f107 0314 	add.w	r3, r7, #20
 8023ff8:	4618      	mov	r0, r3
 8023ffa:	f001 f817 	bl	802502c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8023ffe:	2301      	movs	r3, #1
 8024000:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8024002:	f001 ff0b 	bl	8025e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8024006:	f000 fd87 	bl	8024b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802400a:	f001 fed5 	bl	8025db8 <vPortEnterCritical>
 802400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024010:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8024014:	b25b      	sxtb	r3, r3
 8024016:	f1b3 3fff 	cmp.w	r3, #4294967295
 802401a:	d103      	bne.n	8024024 <xQueueGenericSend+0x174>
 802401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802401e:	2200      	movs	r2, #0
 8024020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8024024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024026:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 802402a:	b25b      	sxtb	r3, r3
 802402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024030:	d103      	bne.n	802403a <xQueueGenericSend+0x18a>
 8024032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024034:	2200      	movs	r2, #0
 8024036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 802403a:	f001 feef 	bl	8025e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802403e:	1d3a      	adds	r2, r7, #4
 8024040:	f107 0314 	add.w	r3, r7, #20
 8024044:	4611      	mov	r1, r2
 8024046:	4618      	mov	r0, r3
 8024048:	f001 f806 	bl	8025058 <xTaskCheckForTimeOut>
 802404c:	4603      	mov	r3, r0
 802404e:	2b00      	cmp	r3, #0
 8024050:	d124      	bne.n	802409c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8024052:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8024054:	f000 faa6 	bl	80245a4 <prvIsQueueFull>
 8024058:	4603      	mov	r3, r0
 802405a:	2b00      	cmp	r3, #0
 802405c:	d018      	beq.n	8024090 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 802405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024060:	3310      	adds	r3, #16
 8024062:	687a      	ldr	r2, [r7, #4]
 8024064:	4611      	mov	r1, r2
 8024066:	4618      	mov	r0, r3
 8024068:	f000 ff2a 	bl	8024ec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 802406c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802406e:	f000 fa31 	bl	80244d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8024072:	f000 fd5f 	bl	8024b34 <xTaskResumeAll>
 8024076:	4603      	mov	r3, r0
 8024078:	2b00      	cmp	r3, #0
 802407a:	f47f af7c 	bne.w	8023f76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 802407e:	4b0c      	ldr	r3, [pc, #48]	@ (80240b0 <xQueueGenericSend+0x200>)
 8024080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8024084:	601a      	str	r2, [r3, #0]
 8024086:	f3bf 8f4f 	dsb	sy
 802408a:	f3bf 8f6f 	isb	sy
 802408e:	e772      	b.n	8023f76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8024090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8024092:	f000 fa1f 	bl	80244d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8024096:	f000 fd4d 	bl	8024b34 <xTaskResumeAll>
 802409a:	e76c      	b.n	8023f76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 802409c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802409e:	f000 fa19 	bl	80244d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80240a2:	f000 fd47 	bl	8024b34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80240a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80240a8:	4618      	mov	r0, r3
 80240aa:	3738      	adds	r7, #56	@ 0x38
 80240ac:	46bd      	mov	sp, r7
 80240ae:	bd80      	pop	{r7, pc}
 80240b0:	e000ed04 	.word	0xe000ed04

080240b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80240b4:	b580      	push	{r7, lr}
 80240b6:	b090      	sub	sp, #64	@ 0x40
 80240b8:	af00      	add	r7, sp, #0
 80240ba:	60f8      	str	r0, [r7, #12]
 80240bc:	60b9      	str	r1, [r7, #8]
 80240be:	607a      	str	r2, [r7, #4]
 80240c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80240c2:	68fb      	ldr	r3, [r7, #12]
 80240c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80240c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80240c8:	2b00      	cmp	r3, #0
 80240ca:	d10b      	bne.n	80240e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80240cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80240d0:	f383 8811 	msr	BASEPRI, r3
 80240d4:	f3bf 8f6f 	isb	sy
 80240d8:	f3bf 8f4f 	dsb	sy
 80240dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80240de:	bf00      	nop
 80240e0:	bf00      	nop
 80240e2:	e7fd      	b.n	80240e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80240e4:	68bb      	ldr	r3, [r7, #8]
 80240e6:	2b00      	cmp	r3, #0
 80240e8:	d103      	bne.n	80240f2 <xQueueGenericSendFromISR+0x3e>
 80240ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80240ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	d101      	bne.n	80240f6 <xQueueGenericSendFromISR+0x42>
 80240f2:	2301      	movs	r3, #1
 80240f4:	e000      	b.n	80240f8 <xQueueGenericSendFromISR+0x44>
 80240f6:	2300      	movs	r3, #0
 80240f8:	2b00      	cmp	r3, #0
 80240fa:	d10b      	bne.n	8024114 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80240fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024100:	f383 8811 	msr	BASEPRI, r3
 8024104:	f3bf 8f6f 	isb	sy
 8024108:	f3bf 8f4f 	dsb	sy
 802410c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 802410e:	bf00      	nop
 8024110:	bf00      	nop
 8024112:	e7fd      	b.n	8024110 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8024114:	683b      	ldr	r3, [r7, #0]
 8024116:	2b02      	cmp	r3, #2
 8024118:	d103      	bne.n	8024122 <xQueueGenericSendFromISR+0x6e>
 802411a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802411c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802411e:	2b01      	cmp	r3, #1
 8024120:	d101      	bne.n	8024126 <xQueueGenericSendFromISR+0x72>
 8024122:	2301      	movs	r3, #1
 8024124:	e000      	b.n	8024128 <xQueueGenericSendFromISR+0x74>
 8024126:	2300      	movs	r3, #0
 8024128:	2b00      	cmp	r3, #0
 802412a:	d10b      	bne.n	8024144 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 802412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024130:	f383 8811 	msr	BASEPRI, r3
 8024134:	f3bf 8f6f 	isb	sy
 8024138:	f3bf 8f4f 	dsb	sy
 802413c:	623b      	str	r3, [r7, #32]
}
 802413e:	bf00      	nop
 8024140:	bf00      	nop
 8024142:	e7fd      	b.n	8024140 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8024144:	f001 ff18 	bl	8025f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8024148:	f3ef 8211 	mrs	r2, BASEPRI
 802414c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024150:	f383 8811 	msr	BASEPRI, r3
 8024154:	f3bf 8f6f 	isb	sy
 8024158:	f3bf 8f4f 	dsb	sy
 802415c:	61fa      	str	r2, [r7, #28]
 802415e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8024160:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8024162:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8024164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8024168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802416a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802416c:	429a      	cmp	r2, r3
 802416e:	d302      	bcc.n	8024176 <xQueueGenericSendFromISR+0xc2>
 8024170:	683b      	ldr	r3, [r7, #0]
 8024172:	2b02      	cmp	r3, #2
 8024174:	d12f      	bne.n	80241d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8024176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 802417c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8024180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024184:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8024186:	683a      	ldr	r2, [r7, #0]
 8024188:	68b9      	ldr	r1, [r7, #8]
 802418a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 802418c:	f000 f912 	bl	80243b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8024190:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8024194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024198:	d112      	bne.n	80241c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802419e:	2b00      	cmp	r3, #0
 80241a0:	d016      	beq.n	80241d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80241a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80241a4:	3324      	adds	r3, #36	@ 0x24
 80241a6:	4618      	mov	r0, r3
 80241a8:	f000 fedc 	bl	8024f64 <xTaskRemoveFromEventList>
 80241ac:	4603      	mov	r3, r0
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	d00e      	beq.n	80241d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80241b2:	687b      	ldr	r3, [r7, #4]
 80241b4:	2b00      	cmp	r3, #0
 80241b6:	d00b      	beq.n	80241d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80241b8:	687b      	ldr	r3, [r7, #4]
 80241ba:	2201      	movs	r2, #1
 80241bc:	601a      	str	r2, [r3, #0]
 80241be:	e007      	b.n	80241d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80241c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80241c4:	3301      	adds	r3, #1
 80241c6:	b2db      	uxtb	r3, r3
 80241c8:	b25a      	sxtb	r2, r3
 80241ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80241cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80241d0:	2301      	movs	r3, #1
 80241d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80241d4:	e001      	b.n	80241da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80241d6:	2300      	movs	r3, #0
 80241d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80241da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80241dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80241de:	697b      	ldr	r3, [r7, #20]
 80241e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80241e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80241e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80241e8:	4618      	mov	r0, r3
 80241ea:	3740      	adds	r7, #64	@ 0x40
 80241ec:	46bd      	mov	sp, r7
 80241ee:	bd80      	pop	{r7, pc}

080241f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80241f0:	b580      	push	{r7, lr}
 80241f2:	b08c      	sub	sp, #48	@ 0x30
 80241f4:	af00      	add	r7, sp, #0
 80241f6:	60f8      	str	r0, [r7, #12]
 80241f8:	60b9      	str	r1, [r7, #8]
 80241fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80241fc:	2300      	movs	r3, #0
 80241fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8024200:	68fb      	ldr	r3, [r7, #12]
 8024202:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8024204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024206:	2b00      	cmp	r3, #0
 8024208:	d10b      	bne.n	8024222 <xQueueReceive+0x32>
	__asm volatile
 802420a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802420e:	f383 8811 	msr	BASEPRI, r3
 8024212:	f3bf 8f6f 	isb	sy
 8024216:	f3bf 8f4f 	dsb	sy
 802421a:	623b      	str	r3, [r7, #32]
}
 802421c:	bf00      	nop
 802421e:	bf00      	nop
 8024220:	e7fd      	b.n	802421e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8024222:	68bb      	ldr	r3, [r7, #8]
 8024224:	2b00      	cmp	r3, #0
 8024226:	d103      	bne.n	8024230 <xQueueReceive+0x40>
 8024228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802422c:	2b00      	cmp	r3, #0
 802422e:	d101      	bne.n	8024234 <xQueueReceive+0x44>
 8024230:	2301      	movs	r3, #1
 8024232:	e000      	b.n	8024236 <xQueueReceive+0x46>
 8024234:	2300      	movs	r3, #0
 8024236:	2b00      	cmp	r3, #0
 8024238:	d10b      	bne.n	8024252 <xQueueReceive+0x62>
	__asm volatile
 802423a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802423e:	f383 8811 	msr	BASEPRI, r3
 8024242:	f3bf 8f6f 	isb	sy
 8024246:	f3bf 8f4f 	dsb	sy
 802424a:	61fb      	str	r3, [r7, #28]
}
 802424c:	bf00      	nop
 802424e:	bf00      	nop
 8024250:	e7fd      	b.n	802424e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8024252:	f001 f847 	bl	80252e4 <xTaskGetSchedulerState>
 8024256:	4603      	mov	r3, r0
 8024258:	2b00      	cmp	r3, #0
 802425a:	d102      	bne.n	8024262 <xQueueReceive+0x72>
 802425c:	687b      	ldr	r3, [r7, #4]
 802425e:	2b00      	cmp	r3, #0
 8024260:	d101      	bne.n	8024266 <xQueueReceive+0x76>
 8024262:	2301      	movs	r3, #1
 8024264:	e000      	b.n	8024268 <xQueueReceive+0x78>
 8024266:	2300      	movs	r3, #0
 8024268:	2b00      	cmp	r3, #0
 802426a:	d10b      	bne.n	8024284 <xQueueReceive+0x94>
	__asm volatile
 802426c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024270:	f383 8811 	msr	BASEPRI, r3
 8024274:	f3bf 8f6f 	isb	sy
 8024278:	f3bf 8f4f 	dsb	sy
 802427c:	61bb      	str	r3, [r7, #24]
}
 802427e:	bf00      	nop
 8024280:	bf00      	nop
 8024282:	e7fd      	b.n	8024280 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8024284:	f001 fd98 	bl	8025db8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8024288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802428c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024290:	2b00      	cmp	r3, #0
 8024292:	d01f      	beq.n	80242d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8024294:	68b9      	ldr	r1, [r7, #8]
 8024296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8024298:	f000 f8f6 	bl	8024488 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 802429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802429e:	1e5a      	subs	r2, r3, #1
 80242a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80242a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80242a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80242a6:	691b      	ldr	r3, [r3, #16]
 80242a8:	2b00      	cmp	r3, #0
 80242aa:	d00f      	beq.n	80242cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80242ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80242ae:	3310      	adds	r3, #16
 80242b0:	4618      	mov	r0, r3
 80242b2:	f000 fe57 	bl	8024f64 <xTaskRemoveFromEventList>
 80242b6:	4603      	mov	r3, r0
 80242b8:	2b00      	cmp	r3, #0
 80242ba:	d007      	beq.n	80242cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80242bc:	4b3c      	ldr	r3, [pc, #240]	@ (80243b0 <xQueueReceive+0x1c0>)
 80242be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80242c2:	601a      	str	r2, [r3, #0]
 80242c4:	f3bf 8f4f 	dsb	sy
 80242c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80242cc:	f001 fda6 	bl	8025e1c <vPortExitCritical>
				return pdPASS;
 80242d0:	2301      	movs	r3, #1
 80242d2:	e069      	b.n	80243a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80242d4:	687b      	ldr	r3, [r7, #4]
 80242d6:	2b00      	cmp	r3, #0
 80242d8:	d103      	bne.n	80242e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80242da:	f001 fd9f 	bl	8025e1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80242de:	2300      	movs	r3, #0
 80242e0:	e062      	b.n	80243a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80242e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80242e4:	2b00      	cmp	r3, #0
 80242e6:	d106      	bne.n	80242f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80242e8:	f107 0310 	add.w	r3, r7, #16
 80242ec:	4618      	mov	r0, r3
 80242ee:	f000 fe9d 	bl	802502c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80242f2:	2301      	movs	r3, #1
 80242f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80242f6:	f001 fd91 	bl	8025e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80242fa:	f000 fc0d 	bl	8024b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80242fe:	f001 fd5b 	bl	8025db8 <vPortEnterCritical>
 8024302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8024308:	b25b      	sxtb	r3, r3
 802430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802430e:	d103      	bne.n	8024318 <xQueueReceive+0x128>
 8024310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024312:	2200      	movs	r2, #0
 8024314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8024318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802431a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 802431e:	b25b      	sxtb	r3, r3
 8024320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024324:	d103      	bne.n	802432e <xQueueReceive+0x13e>
 8024326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024328:	2200      	movs	r2, #0
 802432a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 802432e:	f001 fd75 	bl	8025e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8024332:	1d3a      	adds	r2, r7, #4
 8024334:	f107 0310 	add.w	r3, r7, #16
 8024338:	4611      	mov	r1, r2
 802433a:	4618      	mov	r0, r3
 802433c:	f000 fe8c 	bl	8025058 <xTaskCheckForTimeOut>
 8024340:	4603      	mov	r3, r0
 8024342:	2b00      	cmp	r3, #0
 8024344:	d123      	bne.n	802438e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8024346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8024348:	f000 f916 	bl	8024578 <prvIsQueueEmpty>
 802434c:	4603      	mov	r3, r0
 802434e:	2b00      	cmp	r3, #0
 8024350:	d017      	beq.n	8024382 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8024352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024354:	3324      	adds	r3, #36	@ 0x24
 8024356:	687a      	ldr	r2, [r7, #4]
 8024358:	4611      	mov	r1, r2
 802435a:	4618      	mov	r0, r3
 802435c:	f000 fdb0 	bl	8024ec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8024360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8024362:	f000 f8b7 	bl	80244d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8024366:	f000 fbe5 	bl	8024b34 <xTaskResumeAll>
 802436a:	4603      	mov	r3, r0
 802436c:	2b00      	cmp	r3, #0
 802436e:	d189      	bne.n	8024284 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8024370:	4b0f      	ldr	r3, [pc, #60]	@ (80243b0 <xQueueReceive+0x1c0>)
 8024372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8024376:	601a      	str	r2, [r3, #0]
 8024378:	f3bf 8f4f 	dsb	sy
 802437c:	f3bf 8f6f 	isb	sy
 8024380:	e780      	b.n	8024284 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8024382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8024384:	f000 f8a6 	bl	80244d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8024388:	f000 fbd4 	bl	8024b34 <xTaskResumeAll>
 802438c:	e77a      	b.n	8024284 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 802438e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8024390:	f000 f8a0 	bl	80244d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8024394:	f000 fbce 	bl	8024b34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8024398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802439a:	f000 f8ed 	bl	8024578 <prvIsQueueEmpty>
 802439e:	4603      	mov	r3, r0
 80243a0:	2b00      	cmp	r3, #0
 80243a2:	f43f af6f 	beq.w	8024284 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80243a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80243a8:	4618      	mov	r0, r3
 80243aa:	3730      	adds	r7, #48	@ 0x30
 80243ac:	46bd      	mov	sp, r7
 80243ae:	bd80      	pop	{r7, pc}
 80243b0:	e000ed04 	.word	0xe000ed04

080243b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80243b4:	b580      	push	{r7, lr}
 80243b6:	b086      	sub	sp, #24
 80243b8:	af00      	add	r7, sp, #0
 80243ba:	60f8      	str	r0, [r7, #12]
 80243bc:	60b9      	str	r1, [r7, #8]
 80243be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80243c0:	2300      	movs	r3, #0
 80243c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80243c4:	68fb      	ldr	r3, [r7, #12]
 80243c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80243c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80243ca:	68fb      	ldr	r3, [r7, #12]
 80243cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80243ce:	2b00      	cmp	r3, #0
 80243d0:	d10d      	bne.n	80243ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80243d2:	68fb      	ldr	r3, [r7, #12]
 80243d4:	681b      	ldr	r3, [r3, #0]
 80243d6:	2b00      	cmp	r3, #0
 80243d8:	d14d      	bne.n	8024476 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80243da:	68fb      	ldr	r3, [r7, #12]
 80243dc:	689b      	ldr	r3, [r3, #8]
 80243de:	4618      	mov	r0, r3
 80243e0:	f000 ff9e 	bl	8025320 <xTaskPriorityDisinherit>
 80243e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80243e6:	68fb      	ldr	r3, [r7, #12]
 80243e8:	2200      	movs	r2, #0
 80243ea:	609a      	str	r2, [r3, #8]
 80243ec:	e043      	b.n	8024476 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80243ee:	687b      	ldr	r3, [r7, #4]
 80243f0:	2b00      	cmp	r3, #0
 80243f2:	d119      	bne.n	8024428 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80243f4:	68fb      	ldr	r3, [r7, #12]
 80243f6:	6858      	ldr	r0, [r3, #4]
 80243f8:	68fb      	ldr	r3, [r7, #12]
 80243fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80243fc:	461a      	mov	r2, r3
 80243fe:	68b9      	ldr	r1, [r7, #8]
 8024400:	f002 f946 	bl	8026690 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8024404:	68fb      	ldr	r3, [r7, #12]
 8024406:	685a      	ldr	r2, [r3, #4]
 8024408:	68fb      	ldr	r3, [r7, #12]
 802440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802440c:	441a      	add	r2, r3
 802440e:	68fb      	ldr	r3, [r7, #12]
 8024410:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8024412:	68fb      	ldr	r3, [r7, #12]
 8024414:	685a      	ldr	r2, [r3, #4]
 8024416:	68fb      	ldr	r3, [r7, #12]
 8024418:	689b      	ldr	r3, [r3, #8]
 802441a:	429a      	cmp	r2, r3
 802441c:	d32b      	bcc.n	8024476 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802441e:	68fb      	ldr	r3, [r7, #12]
 8024420:	681a      	ldr	r2, [r3, #0]
 8024422:	68fb      	ldr	r3, [r7, #12]
 8024424:	605a      	str	r2, [r3, #4]
 8024426:	e026      	b.n	8024476 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8024428:	68fb      	ldr	r3, [r7, #12]
 802442a:	68d8      	ldr	r0, [r3, #12]
 802442c:	68fb      	ldr	r3, [r7, #12]
 802442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024430:	461a      	mov	r2, r3
 8024432:	68b9      	ldr	r1, [r7, #8]
 8024434:	f002 f92c 	bl	8026690 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8024438:	68fb      	ldr	r3, [r7, #12]
 802443a:	68da      	ldr	r2, [r3, #12]
 802443c:	68fb      	ldr	r3, [r7, #12]
 802443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024440:	425b      	negs	r3, r3
 8024442:	441a      	add	r2, r3
 8024444:	68fb      	ldr	r3, [r7, #12]
 8024446:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8024448:	68fb      	ldr	r3, [r7, #12]
 802444a:	68da      	ldr	r2, [r3, #12]
 802444c:	68fb      	ldr	r3, [r7, #12]
 802444e:	681b      	ldr	r3, [r3, #0]
 8024450:	429a      	cmp	r2, r3
 8024452:	d207      	bcs.n	8024464 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8024454:	68fb      	ldr	r3, [r7, #12]
 8024456:	689a      	ldr	r2, [r3, #8]
 8024458:	68fb      	ldr	r3, [r7, #12]
 802445a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802445c:	425b      	negs	r3, r3
 802445e:	441a      	add	r2, r3
 8024460:	68fb      	ldr	r3, [r7, #12]
 8024462:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	2b02      	cmp	r3, #2
 8024468:	d105      	bne.n	8024476 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802446a:	693b      	ldr	r3, [r7, #16]
 802446c:	2b00      	cmp	r3, #0
 802446e:	d002      	beq.n	8024476 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8024470:	693b      	ldr	r3, [r7, #16]
 8024472:	3b01      	subs	r3, #1
 8024474:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8024476:	693b      	ldr	r3, [r7, #16]
 8024478:	1c5a      	adds	r2, r3, #1
 802447a:	68fb      	ldr	r3, [r7, #12]
 802447c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 802447e:	697b      	ldr	r3, [r7, #20]
}
 8024480:	4618      	mov	r0, r3
 8024482:	3718      	adds	r7, #24
 8024484:	46bd      	mov	sp, r7
 8024486:	bd80      	pop	{r7, pc}

08024488 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8024488:	b580      	push	{r7, lr}
 802448a:	b082      	sub	sp, #8
 802448c:	af00      	add	r7, sp, #0
 802448e:	6078      	str	r0, [r7, #4]
 8024490:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8024492:	687b      	ldr	r3, [r7, #4]
 8024494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024496:	2b00      	cmp	r3, #0
 8024498:	d018      	beq.n	80244cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802449a:	687b      	ldr	r3, [r7, #4]
 802449c:	68da      	ldr	r2, [r3, #12]
 802449e:	687b      	ldr	r3, [r7, #4]
 80244a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80244a2:	441a      	add	r2, r3
 80244a4:	687b      	ldr	r3, [r7, #4]
 80244a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80244a8:	687b      	ldr	r3, [r7, #4]
 80244aa:	68da      	ldr	r2, [r3, #12]
 80244ac:	687b      	ldr	r3, [r7, #4]
 80244ae:	689b      	ldr	r3, [r3, #8]
 80244b0:	429a      	cmp	r2, r3
 80244b2:	d303      	bcc.n	80244bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	681a      	ldr	r2, [r3, #0]
 80244b8:	687b      	ldr	r3, [r7, #4]
 80244ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80244bc:	687b      	ldr	r3, [r7, #4]
 80244be:	68d9      	ldr	r1, [r3, #12]
 80244c0:	687b      	ldr	r3, [r7, #4]
 80244c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80244c4:	461a      	mov	r2, r3
 80244c6:	6838      	ldr	r0, [r7, #0]
 80244c8:	f002 f8e2 	bl	8026690 <memcpy>
	}
}
 80244cc:	bf00      	nop
 80244ce:	3708      	adds	r7, #8
 80244d0:	46bd      	mov	sp, r7
 80244d2:	bd80      	pop	{r7, pc}

080244d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80244d4:	b580      	push	{r7, lr}
 80244d6:	b084      	sub	sp, #16
 80244d8:	af00      	add	r7, sp, #0
 80244da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80244dc:	f001 fc6c 	bl	8025db8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80244e0:	687b      	ldr	r3, [r7, #4]
 80244e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80244e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80244e8:	e011      	b.n	802450e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80244ea:	687b      	ldr	r3, [r7, #4]
 80244ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80244ee:	2b00      	cmp	r3, #0
 80244f0:	d012      	beq.n	8024518 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80244f2:	687b      	ldr	r3, [r7, #4]
 80244f4:	3324      	adds	r3, #36	@ 0x24
 80244f6:	4618      	mov	r0, r3
 80244f8:	f000 fd34 	bl	8024f64 <xTaskRemoveFromEventList>
 80244fc:	4603      	mov	r3, r0
 80244fe:	2b00      	cmp	r3, #0
 8024500:	d001      	beq.n	8024506 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8024502:	f000 fe0d 	bl	8025120 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8024506:	7bfb      	ldrb	r3, [r7, #15]
 8024508:	3b01      	subs	r3, #1
 802450a:	b2db      	uxtb	r3, r3
 802450c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802450e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8024512:	2b00      	cmp	r3, #0
 8024514:	dce9      	bgt.n	80244ea <prvUnlockQueue+0x16>
 8024516:	e000      	b.n	802451a <prvUnlockQueue+0x46>
					break;
 8024518:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 802451a:	687b      	ldr	r3, [r7, #4]
 802451c:	22ff      	movs	r2, #255	@ 0xff
 802451e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8024522:	f001 fc7b 	bl	8025e1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8024526:	f001 fc47 	bl	8025db8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 802452a:	687b      	ldr	r3, [r7, #4]
 802452c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8024530:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8024532:	e011      	b.n	8024558 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8024534:	687b      	ldr	r3, [r7, #4]
 8024536:	691b      	ldr	r3, [r3, #16]
 8024538:	2b00      	cmp	r3, #0
 802453a:	d012      	beq.n	8024562 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802453c:	687b      	ldr	r3, [r7, #4]
 802453e:	3310      	adds	r3, #16
 8024540:	4618      	mov	r0, r3
 8024542:	f000 fd0f 	bl	8024f64 <xTaskRemoveFromEventList>
 8024546:	4603      	mov	r3, r0
 8024548:	2b00      	cmp	r3, #0
 802454a:	d001      	beq.n	8024550 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 802454c:	f000 fde8 	bl	8025120 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8024550:	7bbb      	ldrb	r3, [r7, #14]
 8024552:	3b01      	subs	r3, #1
 8024554:	b2db      	uxtb	r3, r3
 8024556:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8024558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802455c:	2b00      	cmp	r3, #0
 802455e:	dce9      	bgt.n	8024534 <prvUnlockQueue+0x60>
 8024560:	e000      	b.n	8024564 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8024562:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8024564:	687b      	ldr	r3, [r7, #4]
 8024566:	22ff      	movs	r2, #255	@ 0xff
 8024568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 802456c:	f001 fc56 	bl	8025e1c <vPortExitCritical>
}
 8024570:	bf00      	nop
 8024572:	3710      	adds	r7, #16
 8024574:	46bd      	mov	sp, r7
 8024576:	bd80      	pop	{r7, pc}

08024578 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8024578:	b580      	push	{r7, lr}
 802457a:	b084      	sub	sp, #16
 802457c:	af00      	add	r7, sp, #0
 802457e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8024580:	f001 fc1a 	bl	8025db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8024584:	687b      	ldr	r3, [r7, #4]
 8024586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024588:	2b00      	cmp	r3, #0
 802458a:	d102      	bne.n	8024592 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 802458c:	2301      	movs	r3, #1
 802458e:	60fb      	str	r3, [r7, #12]
 8024590:	e001      	b.n	8024596 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8024592:	2300      	movs	r3, #0
 8024594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8024596:	f001 fc41 	bl	8025e1c <vPortExitCritical>

	return xReturn;
 802459a:	68fb      	ldr	r3, [r7, #12]
}
 802459c:	4618      	mov	r0, r3
 802459e:	3710      	adds	r7, #16
 80245a0:	46bd      	mov	sp, r7
 80245a2:	bd80      	pop	{r7, pc}

080245a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80245a4:	b580      	push	{r7, lr}
 80245a6:	b084      	sub	sp, #16
 80245a8:	af00      	add	r7, sp, #0
 80245aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80245ac:	f001 fc04 	bl	8025db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80245b0:	687b      	ldr	r3, [r7, #4]
 80245b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80245b8:	429a      	cmp	r2, r3
 80245ba:	d102      	bne.n	80245c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80245bc:	2301      	movs	r3, #1
 80245be:	60fb      	str	r3, [r7, #12]
 80245c0:	e001      	b.n	80245c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80245c2:	2300      	movs	r3, #0
 80245c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80245c6:	f001 fc29 	bl	8025e1c <vPortExitCritical>

	return xReturn;
 80245ca:	68fb      	ldr	r3, [r7, #12]
}
 80245cc:	4618      	mov	r0, r3
 80245ce:	3710      	adds	r7, #16
 80245d0:	46bd      	mov	sp, r7
 80245d2:	bd80      	pop	{r7, pc}

080245d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80245d4:	b480      	push	{r7}
 80245d6:	b085      	sub	sp, #20
 80245d8:	af00      	add	r7, sp, #0
 80245da:	6078      	str	r0, [r7, #4]
 80245dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80245de:	2300      	movs	r3, #0
 80245e0:	60fb      	str	r3, [r7, #12]
 80245e2:	e014      	b.n	802460e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80245e4:	4a0f      	ldr	r2, [pc, #60]	@ (8024624 <vQueueAddToRegistry+0x50>)
 80245e6:	68fb      	ldr	r3, [r7, #12]
 80245e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80245ec:	2b00      	cmp	r3, #0
 80245ee:	d10b      	bne.n	8024608 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80245f0:	490c      	ldr	r1, [pc, #48]	@ (8024624 <vQueueAddToRegistry+0x50>)
 80245f2:	68fb      	ldr	r3, [r7, #12]
 80245f4:	683a      	ldr	r2, [r7, #0]
 80245f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80245fa:	4a0a      	ldr	r2, [pc, #40]	@ (8024624 <vQueueAddToRegistry+0x50>)
 80245fc:	68fb      	ldr	r3, [r7, #12]
 80245fe:	00db      	lsls	r3, r3, #3
 8024600:	4413      	add	r3, r2
 8024602:	687a      	ldr	r2, [r7, #4]
 8024604:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8024606:	e006      	b.n	8024616 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8024608:	68fb      	ldr	r3, [r7, #12]
 802460a:	3301      	adds	r3, #1
 802460c:	60fb      	str	r3, [r7, #12]
 802460e:	68fb      	ldr	r3, [r7, #12]
 8024610:	2b07      	cmp	r3, #7
 8024612:	d9e7      	bls.n	80245e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8024614:	bf00      	nop
 8024616:	bf00      	nop
 8024618:	3714      	adds	r7, #20
 802461a:	46bd      	mov	sp, r7
 802461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024620:	4770      	bx	lr
 8024622:	bf00      	nop
 8024624:	20000818 	.word	0x20000818

08024628 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8024628:	b580      	push	{r7, lr}
 802462a:	b086      	sub	sp, #24
 802462c:	af00      	add	r7, sp, #0
 802462e:	60f8      	str	r0, [r7, #12]
 8024630:	60b9      	str	r1, [r7, #8]
 8024632:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8024634:	68fb      	ldr	r3, [r7, #12]
 8024636:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8024638:	f001 fbbe 	bl	8025db8 <vPortEnterCritical>
 802463c:	697b      	ldr	r3, [r7, #20]
 802463e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8024642:	b25b      	sxtb	r3, r3
 8024644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024648:	d103      	bne.n	8024652 <vQueueWaitForMessageRestricted+0x2a>
 802464a:	697b      	ldr	r3, [r7, #20]
 802464c:	2200      	movs	r2, #0
 802464e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8024652:	697b      	ldr	r3, [r7, #20]
 8024654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8024658:	b25b      	sxtb	r3, r3
 802465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802465e:	d103      	bne.n	8024668 <vQueueWaitForMessageRestricted+0x40>
 8024660:	697b      	ldr	r3, [r7, #20]
 8024662:	2200      	movs	r2, #0
 8024664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8024668:	f001 fbd8 	bl	8025e1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 802466c:	697b      	ldr	r3, [r7, #20]
 802466e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024670:	2b00      	cmp	r3, #0
 8024672:	d106      	bne.n	8024682 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8024674:	697b      	ldr	r3, [r7, #20]
 8024676:	3324      	adds	r3, #36	@ 0x24
 8024678:	687a      	ldr	r2, [r7, #4]
 802467a:	68b9      	ldr	r1, [r7, #8]
 802467c:	4618      	mov	r0, r3
 802467e:	f000 fc45 	bl	8024f0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8024682:	6978      	ldr	r0, [r7, #20]
 8024684:	f7ff ff26 	bl	80244d4 <prvUnlockQueue>
	}
 8024688:	bf00      	nop
 802468a:	3718      	adds	r7, #24
 802468c:	46bd      	mov	sp, r7
 802468e:	bd80      	pop	{r7, pc}

08024690 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8024690:	b580      	push	{r7, lr}
 8024692:	b08e      	sub	sp, #56	@ 0x38
 8024694:	af04      	add	r7, sp, #16
 8024696:	60f8      	str	r0, [r7, #12]
 8024698:	60b9      	str	r1, [r7, #8]
 802469a:	607a      	str	r2, [r7, #4]
 802469c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 802469e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80246a0:	2b00      	cmp	r3, #0
 80246a2:	d10b      	bne.n	80246bc <xTaskCreateStatic+0x2c>
	__asm volatile
 80246a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80246a8:	f383 8811 	msr	BASEPRI, r3
 80246ac:	f3bf 8f6f 	isb	sy
 80246b0:	f3bf 8f4f 	dsb	sy
 80246b4:	623b      	str	r3, [r7, #32]
}
 80246b6:	bf00      	nop
 80246b8:	bf00      	nop
 80246ba:	e7fd      	b.n	80246b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80246bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80246be:	2b00      	cmp	r3, #0
 80246c0:	d10b      	bne.n	80246da <xTaskCreateStatic+0x4a>
	__asm volatile
 80246c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80246c6:	f383 8811 	msr	BASEPRI, r3
 80246ca:	f3bf 8f6f 	isb	sy
 80246ce:	f3bf 8f4f 	dsb	sy
 80246d2:	61fb      	str	r3, [r7, #28]
}
 80246d4:	bf00      	nop
 80246d6:	bf00      	nop
 80246d8:	e7fd      	b.n	80246d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80246da:	235c      	movs	r3, #92	@ 0x5c
 80246dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80246de:	693b      	ldr	r3, [r7, #16]
 80246e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80246e2:	d00b      	beq.n	80246fc <xTaskCreateStatic+0x6c>
	__asm volatile
 80246e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80246e8:	f383 8811 	msr	BASEPRI, r3
 80246ec:	f3bf 8f6f 	isb	sy
 80246f0:	f3bf 8f4f 	dsb	sy
 80246f4:	61bb      	str	r3, [r7, #24]
}
 80246f6:	bf00      	nop
 80246f8:	bf00      	nop
 80246fa:	e7fd      	b.n	80246f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80246fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80246fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024700:	2b00      	cmp	r3, #0
 8024702:	d01e      	beq.n	8024742 <xTaskCreateStatic+0xb2>
 8024704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024706:	2b00      	cmp	r3, #0
 8024708:	d01b      	beq.n	8024742 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802470a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802470c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 802470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024712:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8024714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024716:	2202      	movs	r2, #2
 8024718:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 802471c:	2300      	movs	r3, #0
 802471e:	9303      	str	r3, [sp, #12]
 8024720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024722:	9302      	str	r3, [sp, #8]
 8024724:	f107 0314 	add.w	r3, r7, #20
 8024728:	9301      	str	r3, [sp, #4]
 802472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802472c:	9300      	str	r3, [sp, #0]
 802472e:	683b      	ldr	r3, [r7, #0]
 8024730:	687a      	ldr	r2, [r7, #4]
 8024732:	68b9      	ldr	r1, [r7, #8]
 8024734:	68f8      	ldr	r0, [r7, #12]
 8024736:	f000 f850 	bl	80247da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802473a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802473c:	f000 f8de 	bl	80248fc <prvAddNewTaskToReadyList>
 8024740:	e001      	b.n	8024746 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8024742:	2300      	movs	r3, #0
 8024744:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8024746:	697b      	ldr	r3, [r7, #20]
	}
 8024748:	4618      	mov	r0, r3
 802474a:	3728      	adds	r7, #40	@ 0x28
 802474c:	46bd      	mov	sp, r7
 802474e:	bd80      	pop	{r7, pc}

08024750 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8024750:	b580      	push	{r7, lr}
 8024752:	b08c      	sub	sp, #48	@ 0x30
 8024754:	af04      	add	r7, sp, #16
 8024756:	60f8      	str	r0, [r7, #12]
 8024758:	60b9      	str	r1, [r7, #8]
 802475a:	603b      	str	r3, [r7, #0]
 802475c:	4613      	mov	r3, r2
 802475e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8024760:	88fb      	ldrh	r3, [r7, #6]
 8024762:	009b      	lsls	r3, r3, #2
 8024764:	4618      	mov	r0, r3
 8024766:	f001 fc49 	bl	8025ffc <pvPortMalloc>
 802476a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 802476c:	697b      	ldr	r3, [r7, #20]
 802476e:	2b00      	cmp	r3, #0
 8024770:	d00e      	beq.n	8024790 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8024772:	205c      	movs	r0, #92	@ 0x5c
 8024774:	f001 fc42 	bl	8025ffc <pvPortMalloc>
 8024778:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 802477a:	69fb      	ldr	r3, [r7, #28]
 802477c:	2b00      	cmp	r3, #0
 802477e:	d003      	beq.n	8024788 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8024780:	69fb      	ldr	r3, [r7, #28]
 8024782:	697a      	ldr	r2, [r7, #20]
 8024784:	631a      	str	r2, [r3, #48]	@ 0x30
 8024786:	e005      	b.n	8024794 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8024788:	6978      	ldr	r0, [r7, #20]
 802478a:	f001 fd05 	bl	8026198 <vPortFree>
 802478e:	e001      	b.n	8024794 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8024790:	2300      	movs	r3, #0
 8024792:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8024794:	69fb      	ldr	r3, [r7, #28]
 8024796:	2b00      	cmp	r3, #0
 8024798:	d017      	beq.n	80247ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802479a:	69fb      	ldr	r3, [r7, #28]
 802479c:	2200      	movs	r2, #0
 802479e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80247a2:	88fa      	ldrh	r2, [r7, #6]
 80247a4:	2300      	movs	r3, #0
 80247a6:	9303      	str	r3, [sp, #12]
 80247a8:	69fb      	ldr	r3, [r7, #28]
 80247aa:	9302      	str	r3, [sp, #8]
 80247ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80247ae:	9301      	str	r3, [sp, #4]
 80247b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80247b2:	9300      	str	r3, [sp, #0]
 80247b4:	683b      	ldr	r3, [r7, #0]
 80247b6:	68b9      	ldr	r1, [r7, #8]
 80247b8:	68f8      	ldr	r0, [r7, #12]
 80247ba:	f000 f80e 	bl	80247da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80247be:	69f8      	ldr	r0, [r7, #28]
 80247c0:	f000 f89c 	bl	80248fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80247c4:	2301      	movs	r3, #1
 80247c6:	61bb      	str	r3, [r7, #24]
 80247c8:	e002      	b.n	80247d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80247ca:	f04f 33ff 	mov.w	r3, #4294967295
 80247ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80247d0:	69bb      	ldr	r3, [r7, #24]
	}
 80247d2:	4618      	mov	r0, r3
 80247d4:	3720      	adds	r7, #32
 80247d6:	46bd      	mov	sp, r7
 80247d8:	bd80      	pop	{r7, pc}

080247da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80247da:	b580      	push	{r7, lr}
 80247dc:	b088      	sub	sp, #32
 80247de:	af00      	add	r7, sp, #0
 80247e0:	60f8      	str	r0, [r7, #12]
 80247e2:	60b9      	str	r1, [r7, #8]
 80247e4:	607a      	str	r2, [r7, #4]
 80247e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80247e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80247ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80247ec:	687b      	ldr	r3, [r7, #4]
 80247ee:	009b      	lsls	r3, r3, #2
 80247f0:	461a      	mov	r2, r3
 80247f2:	21a5      	movs	r1, #165	@ 0xa5
 80247f4:	f001 fef2 	bl	80265dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80247f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80247fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80247fc:	687b      	ldr	r3, [r7, #4]
 80247fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8024802:	3b01      	subs	r3, #1
 8024804:	009b      	lsls	r3, r3, #2
 8024806:	4413      	add	r3, r2
 8024808:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 802480a:	69bb      	ldr	r3, [r7, #24]
 802480c:	f023 0307 	bic.w	r3, r3, #7
 8024810:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8024812:	69bb      	ldr	r3, [r7, #24]
 8024814:	f003 0307 	and.w	r3, r3, #7
 8024818:	2b00      	cmp	r3, #0
 802481a:	d00b      	beq.n	8024834 <prvInitialiseNewTask+0x5a>
	__asm volatile
 802481c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024820:	f383 8811 	msr	BASEPRI, r3
 8024824:	f3bf 8f6f 	isb	sy
 8024828:	f3bf 8f4f 	dsb	sy
 802482c:	617b      	str	r3, [r7, #20]
}
 802482e:	bf00      	nop
 8024830:	bf00      	nop
 8024832:	e7fd      	b.n	8024830 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8024834:	68bb      	ldr	r3, [r7, #8]
 8024836:	2b00      	cmp	r3, #0
 8024838:	d01f      	beq.n	802487a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802483a:	2300      	movs	r3, #0
 802483c:	61fb      	str	r3, [r7, #28]
 802483e:	e012      	b.n	8024866 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8024840:	68ba      	ldr	r2, [r7, #8]
 8024842:	69fb      	ldr	r3, [r7, #28]
 8024844:	4413      	add	r3, r2
 8024846:	7819      	ldrb	r1, [r3, #0]
 8024848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802484a:	69fb      	ldr	r3, [r7, #28]
 802484c:	4413      	add	r3, r2
 802484e:	3334      	adds	r3, #52	@ 0x34
 8024850:	460a      	mov	r2, r1
 8024852:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8024854:	68ba      	ldr	r2, [r7, #8]
 8024856:	69fb      	ldr	r3, [r7, #28]
 8024858:	4413      	add	r3, r2
 802485a:	781b      	ldrb	r3, [r3, #0]
 802485c:	2b00      	cmp	r3, #0
 802485e:	d006      	beq.n	802486e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8024860:	69fb      	ldr	r3, [r7, #28]
 8024862:	3301      	adds	r3, #1
 8024864:	61fb      	str	r3, [r7, #28]
 8024866:	69fb      	ldr	r3, [r7, #28]
 8024868:	2b0f      	cmp	r3, #15
 802486a:	d9e9      	bls.n	8024840 <prvInitialiseNewTask+0x66>
 802486c:	e000      	b.n	8024870 <prvInitialiseNewTask+0x96>
			{
				break;
 802486e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8024870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024872:	2200      	movs	r2, #0
 8024874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8024878:	e003      	b.n	8024882 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 802487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802487c:	2200      	movs	r2, #0
 802487e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8024882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024884:	2b37      	cmp	r3, #55	@ 0x37
 8024886:	d901      	bls.n	802488c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8024888:	2337      	movs	r3, #55	@ 0x37
 802488a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 802488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802488e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8024890:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8024892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8024896:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8024898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802489a:	2200      	movs	r2, #0
 802489c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80248a0:	3304      	adds	r3, #4
 80248a2:	4618      	mov	r0, r3
 80248a4:	f7ff f966 	bl	8023b74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80248a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80248aa:	3318      	adds	r3, #24
 80248ac:	4618      	mov	r0, r3
 80248ae:	f7ff f961 	bl	8023b74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80248b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80248b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80248b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80248b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80248ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80248be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80248c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80248c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80248c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80248c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80248c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80248ca:	2200      	movs	r2, #0
 80248cc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80248ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80248d0:	2200      	movs	r2, #0
 80248d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80248d6:	683a      	ldr	r2, [r7, #0]
 80248d8:	68f9      	ldr	r1, [r7, #12]
 80248da:	69b8      	ldr	r0, [r7, #24]
 80248dc:	f001 f93e 	bl	8025b5c <pxPortInitialiseStack>
 80248e0:	4602      	mov	r2, r0
 80248e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80248e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80248e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80248e8:	2b00      	cmp	r3, #0
 80248ea:	d002      	beq.n	80248f2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80248ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80248ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80248f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80248f2:	bf00      	nop
 80248f4:	3720      	adds	r7, #32
 80248f6:	46bd      	mov	sp, r7
 80248f8:	bd80      	pop	{r7, pc}
	...

080248fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80248fc:	b580      	push	{r7, lr}
 80248fe:	b082      	sub	sp, #8
 8024900:	af00      	add	r7, sp, #0
 8024902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8024904:	f001 fa58 	bl	8025db8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8024908:	4b2d      	ldr	r3, [pc, #180]	@ (80249c0 <prvAddNewTaskToReadyList+0xc4>)
 802490a:	681b      	ldr	r3, [r3, #0]
 802490c:	3301      	adds	r3, #1
 802490e:	4a2c      	ldr	r2, [pc, #176]	@ (80249c0 <prvAddNewTaskToReadyList+0xc4>)
 8024910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8024912:	4b2c      	ldr	r3, [pc, #176]	@ (80249c4 <prvAddNewTaskToReadyList+0xc8>)
 8024914:	681b      	ldr	r3, [r3, #0]
 8024916:	2b00      	cmp	r3, #0
 8024918:	d109      	bne.n	802492e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802491a:	4a2a      	ldr	r2, [pc, #168]	@ (80249c4 <prvAddNewTaskToReadyList+0xc8>)
 802491c:	687b      	ldr	r3, [r7, #4]
 802491e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8024920:	4b27      	ldr	r3, [pc, #156]	@ (80249c0 <prvAddNewTaskToReadyList+0xc4>)
 8024922:	681b      	ldr	r3, [r3, #0]
 8024924:	2b01      	cmp	r3, #1
 8024926:	d110      	bne.n	802494a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8024928:	f000 fc1e 	bl	8025168 <prvInitialiseTaskLists>
 802492c:	e00d      	b.n	802494a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802492e:	4b26      	ldr	r3, [pc, #152]	@ (80249c8 <prvAddNewTaskToReadyList+0xcc>)
 8024930:	681b      	ldr	r3, [r3, #0]
 8024932:	2b00      	cmp	r3, #0
 8024934:	d109      	bne.n	802494a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8024936:	4b23      	ldr	r3, [pc, #140]	@ (80249c4 <prvAddNewTaskToReadyList+0xc8>)
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802493c:	687b      	ldr	r3, [r7, #4]
 802493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024940:	429a      	cmp	r2, r3
 8024942:	d802      	bhi.n	802494a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8024944:	4a1f      	ldr	r2, [pc, #124]	@ (80249c4 <prvAddNewTaskToReadyList+0xc8>)
 8024946:	687b      	ldr	r3, [r7, #4]
 8024948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 802494a:	4b20      	ldr	r3, [pc, #128]	@ (80249cc <prvAddNewTaskToReadyList+0xd0>)
 802494c:	681b      	ldr	r3, [r3, #0]
 802494e:	3301      	adds	r3, #1
 8024950:	4a1e      	ldr	r2, [pc, #120]	@ (80249cc <prvAddNewTaskToReadyList+0xd0>)
 8024952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8024954:	4b1d      	ldr	r3, [pc, #116]	@ (80249cc <prvAddNewTaskToReadyList+0xd0>)
 8024956:	681a      	ldr	r2, [r3, #0]
 8024958:	687b      	ldr	r3, [r7, #4]
 802495a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 802495c:	687b      	ldr	r3, [r7, #4]
 802495e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024960:	4b1b      	ldr	r3, [pc, #108]	@ (80249d0 <prvAddNewTaskToReadyList+0xd4>)
 8024962:	681b      	ldr	r3, [r3, #0]
 8024964:	429a      	cmp	r2, r3
 8024966:	d903      	bls.n	8024970 <prvAddNewTaskToReadyList+0x74>
 8024968:	687b      	ldr	r3, [r7, #4]
 802496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802496c:	4a18      	ldr	r2, [pc, #96]	@ (80249d0 <prvAddNewTaskToReadyList+0xd4>)
 802496e:	6013      	str	r3, [r2, #0]
 8024970:	687b      	ldr	r3, [r7, #4]
 8024972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024974:	4613      	mov	r3, r2
 8024976:	009b      	lsls	r3, r3, #2
 8024978:	4413      	add	r3, r2
 802497a:	009b      	lsls	r3, r3, #2
 802497c:	4a15      	ldr	r2, [pc, #84]	@ (80249d4 <prvAddNewTaskToReadyList+0xd8>)
 802497e:	441a      	add	r2, r3
 8024980:	687b      	ldr	r3, [r7, #4]
 8024982:	3304      	adds	r3, #4
 8024984:	4619      	mov	r1, r3
 8024986:	4610      	mov	r0, r2
 8024988:	f7ff f901 	bl	8023b8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 802498c:	f001 fa46 	bl	8025e1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8024990:	4b0d      	ldr	r3, [pc, #52]	@ (80249c8 <prvAddNewTaskToReadyList+0xcc>)
 8024992:	681b      	ldr	r3, [r3, #0]
 8024994:	2b00      	cmp	r3, #0
 8024996:	d00e      	beq.n	80249b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8024998:	4b0a      	ldr	r3, [pc, #40]	@ (80249c4 <prvAddNewTaskToReadyList+0xc8>)
 802499a:	681b      	ldr	r3, [r3, #0]
 802499c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802499e:	687b      	ldr	r3, [r7, #4]
 80249a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80249a2:	429a      	cmp	r2, r3
 80249a4:	d207      	bcs.n	80249b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80249a6:	4b0c      	ldr	r3, [pc, #48]	@ (80249d8 <prvAddNewTaskToReadyList+0xdc>)
 80249a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80249ac:	601a      	str	r2, [r3, #0]
 80249ae:	f3bf 8f4f 	dsb	sy
 80249b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80249b6:	bf00      	nop
 80249b8:	3708      	adds	r7, #8
 80249ba:	46bd      	mov	sp, r7
 80249bc:	bd80      	pop	{r7, pc}
 80249be:	bf00      	nop
 80249c0:	20000d2c 	.word	0x20000d2c
 80249c4:	20000858 	.word	0x20000858
 80249c8:	20000d38 	.word	0x20000d38
 80249cc:	20000d48 	.word	0x20000d48
 80249d0:	20000d34 	.word	0x20000d34
 80249d4:	2000085c 	.word	0x2000085c
 80249d8:	e000ed04 	.word	0xe000ed04

080249dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80249dc:	b580      	push	{r7, lr}
 80249de:	b084      	sub	sp, #16
 80249e0:	af00      	add	r7, sp, #0
 80249e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80249e4:	2300      	movs	r3, #0
 80249e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80249e8:	687b      	ldr	r3, [r7, #4]
 80249ea:	2b00      	cmp	r3, #0
 80249ec:	d018      	beq.n	8024a20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80249ee:	4b14      	ldr	r3, [pc, #80]	@ (8024a40 <vTaskDelay+0x64>)
 80249f0:	681b      	ldr	r3, [r3, #0]
 80249f2:	2b00      	cmp	r3, #0
 80249f4:	d00b      	beq.n	8024a0e <vTaskDelay+0x32>
	__asm volatile
 80249f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80249fa:	f383 8811 	msr	BASEPRI, r3
 80249fe:	f3bf 8f6f 	isb	sy
 8024a02:	f3bf 8f4f 	dsb	sy
 8024a06:	60bb      	str	r3, [r7, #8]
}
 8024a08:	bf00      	nop
 8024a0a:	bf00      	nop
 8024a0c:	e7fd      	b.n	8024a0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8024a0e:	f000 f883 	bl	8024b18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8024a12:	2100      	movs	r1, #0
 8024a14:	6878      	ldr	r0, [r7, #4]
 8024a16:	f000 fcf3 	bl	8025400 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8024a1a:	f000 f88b 	bl	8024b34 <xTaskResumeAll>
 8024a1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8024a20:	68fb      	ldr	r3, [r7, #12]
 8024a22:	2b00      	cmp	r3, #0
 8024a24:	d107      	bne.n	8024a36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8024a26:	4b07      	ldr	r3, [pc, #28]	@ (8024a44 <vTaskDelay+0x68>)
 8024a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8024a2c:	601a      	str	r2, [r3, #0]
 8024a2e:	f3bf 8f4f 	dsb	sy
 8024a32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8024a36:	bf00      	nop
 8024a38:	3710      	adds	r7, #16
 8024a3a:	46bd      	mov	sp, r7
 8024a3c:	bd80      	pop	{r7, pc}
 8024a3e:	bf00      	nop
 8024a40:	20000d54 	.word	0x20000d54
 8024a44:	e000ed04 	.word	0xe000ed04

08024a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8024a48:	b580      	push	{r7, lr}
 8024a4a:	b08a      	sub	sp, #40	@ 0x28
 8024a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8024a4e:	2300      	movs	r3, #0
 8024a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8024a52:	2300      	movs	r3, #0
 8024a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8024a56:	463a      	mov	r2, r7
 8024a58:	1d39      	adds	r1, r7, #4
 8024a5a:	f107 0308 	add.w	r3, r7, #8
 8024a5e:	4618      	mov	r0, r3
 8024a60:	f7ff f834 	bl	8023acc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8024a64:	6839      	ldr	r1, [r7, #0]
 8024a66:	687b      	ldr	r3, [r7, #4]
 8024a68:	68ba      	ldr	r2, [r7, #8]
 8024a6a:	9202      	str	r2, [sp, #8]
 8024a6c:	9301      	str	r3, [sp, #4]
 8024a6e:	2300      	movs	r3, #0
 8024a70:	9300      	str	r3, [sp, #0]
 8024a72:	2300      	movs	r3, #0
 8024a74:	460a      	mov	r2, r1
 8024a76:	4922      	ldr	r1, [pc, #136]	@ (8024b00 <vTaskStartScheduler+0xb8>)
 8024a78:	4822      	ldr	r0, [pc, #136]	@ (8024b04 <vTaskStartScheduler+0xbc>)
 8024a7a:	f7ff fe09 	bl	8024690 <xTaskCreateStatic>
 8024a7e:	4603      	mov	r3, r0
 8024a80:	4a21      	ldr	r2, [pc, #132]	@ (8024b08 <vTaskStartScheduler+0xc0>)
 8024a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8024a84:	4b20      	ldr	r3, [pc, #128]	@ (8024b08 <vTaskStartScheduler+0xc0>)
 8024a86:	681b      	ldr	r3, [r3, #0]
 8024a88:	2b00      	cmp	r3, #0
 8024a8a:	d002      	beq.n	8024a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8024a8c:	2301      	movs	r3, #1
 8024a8e:	617b      	str	r3, [r7, #20]
 8024a90:	e001      	b.n	8024a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8024a92:	2300      	movs	r3, #0
 8024a94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8024a96:	697b      	ldr	r3, [r7, #20]
 8024a98:	2b01      	cmp	r3, #1
 8024a9a:	d102      	bne.n	8024aa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8024a9c:	f000 fd04 	bl	80254a8 <xTimerCreateTimerTask>
 8024aa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8024aa2:	697b      	ldr	r3, [r7, #20]
 8024aa4:	2b01      	cmp	r3, #1
 8024aa6:	d116      	bne.n	8024ad6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8024aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024aac:	f383 8811 	msr	BASEPRI, r3
 8024ab0:	f3bf 8f6f 	isb	sy
 8024ab4:	f3bf 8f4f 	dsb	sy
 8024ab8:	613b      	str	r3, [r7, #16]
}
 8024aba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8024abc:	4b13      	ldr	r3, [pc, #76]	@ (8024b0c <vTaskStartScheduler+0xc4>)
 8024abe:	f04f 32ff 	mov.w	r2, #4294967295
 8024ac2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8024ac4:	4b12      	ldr	r3, [pc, #72]	@ (8024b10 <vTaskStartScheduler+0xc8>)
 8024ac6:	2201      	movs	r2, #1
 8024ac8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8024aca:	4b12      	ldr	r3, [pc, #72]	@ (8024b14 <vTaskStartScheduler+0xcc>)
 8024acc:	2200      	movs	r2, #0
 8024ace:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8024ad0:	f001 f8ce 	bl	8025c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8024ad4:	e00f      	b.n	8024af6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8024ad6:	697b      	ldr	r3, [r7, #20]
 8024ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024adc:	d10b      	bne.n	8024af6 <vTaskStartScheduler+0xae>
	__asm volatile
 8024ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024ae2:	f383 8811 	msr	BASEPRI, r3
 8024ae6:	f3bf 8f6f 	isb	sy
 8024aea:	f3bf 8f4f 	dsb	sy
 8024aee:	60fb      	str	r3, [r7, #12]
}
 8024af0:	bf00      	nop
 8024af2:	bf00      	nop
 8024af4:	e7fd      	b.n	8024af2 <vTaskStartScheduler+0xaa>
}
 8024af6:	bf00      	nop
 8024af8:	3718      	adds	r7, #24
 8024afa:	46bd      	mov	sp, r7
 8024afc:	bd80      	pop	{r7, pc}
 8024afe:	bf00      	nop
 8024b00:	080277a4 	.word	0x080277a4
 8024b04:	08025139 	.word	0x08025139
 8024b08:	20000d50 	.word	0x20000d50
 8024b0c:	20000d4c 	.word	0x20000d4c
 8024b10:	20000d38 	.word	0x20000d38
 8024b14:	20000d30 	.word	0x20000d30

08024b18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8024b18:	b480      	push	{r7}
 8024b1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8024b1c:	4b04      	ldr	r3, [pc, #16]	@ (8024b30 <vTaskSuspendAll+0x18>)
 8024b1e:	681b      	ldr	r3, [r3, #0]
 8024b20:	3301      	adds	r3, #1
 8024b22:	4a03      	ldr	r2, [pc, #12]	@ (8024b30 <vTaskSuspendAll+0x18>)
 8024b24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8024b26:	bf00      	nop
 8024b28:	46bd      	mov	sp, r7
 8024b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b2e:	4770      	bx	lr
 8024b30:	20000d54 	.word	0x20000d54

08024b34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8024b34:	b580      	push	{r7, lr}
 8024b36:	b084      	sub	sp, #16
 8024b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8024b3a:	2300      	movs	r3, #0
 8024b3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8024b3e:	2300      	movs	r3, #0
 8024b40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8024b42:	4b42      	ldr	r3, [pc, #264]	@ (8024c4c <xTaskResumeAll+0x118>)
 8024b44:	681b      	ldr	r3, [r3, #0]
 8024b46:	2b00      	cmp	r3, #0
 8024b48:	d10b      	bne.n	8024b62 <xTaskResumeAll+0x2e>
	__asm volatile
 8024b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024b4e:	f383 8811 	msr	BASEPRI, r3
 8024b52:	f3bf 8f6f 	isb	sy
 8024b56:	f3bf 8f4f 	dsb	sy
 8024b5a:	603b      	str	r3, [r7, #0]
}
 8024b5c:	bf00      	nop
 8024b5e:	bf00      	nop
 8024b60:	e7fd      	b.n	8024b5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8024b62:	f001 f929 	bl	8025db8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8024b66:	4b39      	ldr	r3, [pc, #228]	@ (8024c4c <xTaskResumeAll+0x118>)
 8024b68:	681b      	ldr	r3, [r3, #0]
 8024b6a:	3b01      	subs	r3, #1
 8024b6c:	4a37      	ldr	r2, [pc, #220]	@ (8024c4c <xTaskResumeAll+0x118>)
 8024b6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8024b70:	4b36      	ldr	r3, [pc, #216]	@ (8024c4c <xTaskResumeAll+0x118>)
 8024b72:	681b      	ldr	r3, [r3, #0]
 8024b74:	2b00      	cmp	r3, #0
 8024b76:	d162      	bne.n	8024c3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8024b78:	4b35      	ldr	r3, [pc, #212]	@ (8024c50 <xTaskResumeAll+0x11c>)
 8024b7a:	681b      	ldr	r3, [r3, #0]
 8024b7c:	2b00      	cmp	r3, #0
 8024b7e:	d05e      	beq.n	8024c3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8024b80:	e02f      	b.n	8024be2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8024b82:	4b34      	ldr	r3, [pc, #208]	@ (8024c54 <xTaskResumeAll+0x120>)
 8024b84:	68db      	ldr	r3, [r3, #12]
 8024b86:	68db      	ldr	r3, [r3, #12]
 8024b88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8024b8a:	68fb      	ldr	r3, [r7, #12]
 8024b8c:	3318      	adds	r3, #24
 8024b8e:	4618      	mov	r0, r3
 8024b90:	f7ff f85a 	bl	8023c48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8024b94:	68fb      	ldr	r3, [r7, #12]
 8024b96:	3304      	adds	r3, #4
 8024b98:	4618      	mov	r0, r3
 8024b9a:	f7ff f855 	bl	8023c48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8024b9e:	68fb      	ldr	r3, [r7, #12]
 8024ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8024c58 <xTaskResumeAll+0x124>)
 8024ba4:	681b      	ldr	r3, [r3, #0]
 8024ba6:	429a      	cmp	r2, r3
 8024ba8:	d903      	bls.n	8024bb2 <xTaskResumeAll+0x7e>
 8024baa:	68fb      	ldr	r3, [r7, #12]
 8024bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024bae:	4a2a      	ldr	r2, [pc, #168]	@ (8024c58 <xTaskResumeAll+0x124>)
 8024bb0:	6013      	str	r3, [r2, #0]
 8024bb2:	68fb      	ldr	r3, [r7, #12]
 8024bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024bb6:	4613      	mov	r3, r2
 8024bb8:	009b      	lsls	r3, r3, #2
 8024bba:	4413      	add	r3, r2
 8024bbc:	009b      	lsls	r3, r3, #2
 8024bbe:	4a27      	ldr	r2, [pc, #156]	@ (8024c5c <xTaskResumeAll+0x128>)
 8024bc0:	441a      	add	r2, r3
 8024bc2:	68fb      	ldr	r3, [r7, #12]
 8024bc4:	3304      	adds	r3, #4
 8024bc6:	4619      	mov	r1, r3
 8024bc8:	4610      	mov	r0, r2
 8024bca:	f7fe ffe0 	bl	8023b8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8024bce:	68fb      	ldr	r3, [r7, #12]
 8024bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024bd2:	4b23      	ldr	r3, [pc, #140]	@ (8024c60 <xTaskResumeAll+0x12c>)
 8024bd4:	681b      	ldr	r3, [r3, #0]
 8024bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024bd8:	429a      	cmp	r2, r3
 8024bda:	d302      	bcc.n	8024be2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8024bdc:	4b21      	ldr	r3, [pc, #132]	@ (8024c64 <xTaskResumeAll+0x130>)
 8024bde:	2201      	movs	r2, #1
 8024be0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8024be2:	4b1c      	ldr	r3, [pc, #112]	@ (8024c54 <xTaskResumeAll+0x120>)
 8024be4:	681b      	ldr	r3, [r3, #0]
 8024be6:	2b00      	cmp	r3, #0
 8024be8:	d1cb      	bne.n	8024b82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8024bea:	68fb      	ldr	r3, [r7, #12]
 8024bec:	2b00      	cmp	r3, #0
 8024bee:	d001      	beq.n	8024bf4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8024bf0:	f000 fb58 	bl	80252a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8024bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8024c68 <xTaskResumeAll+0x134>)
 8024bf6:	681b      	ldr	r3, [r3, #0]
 8024bf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8024bfa:	687b      	ldr	r3, [r7, #4]
 8024bfc:	2b00      	cmp	r3, #0
 8024bfe:	d010      	beq.n	8024c22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8024c00:	f000 f846 	bl	8024c90 <xTaskIncrementTick>
 8024c04:	4603      	mov	r3, r0
 8024c06:	2b00      	cmp	r3, #0
 8024c08:	d002      	beq.n	8024c10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8024c0a:	4b16      	ldr	r3, [pc, #88]	@ (8024c64 <xTaskResumeAll+0x130>)
 8024c0c:	2201      	movs	r2, #1
 8024c0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8024c10:	687b      	ldr	r3, [r7, #4]
 8024c12:	3b01      	subs	r3, #1
 8024c14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8024c16:	687b      	ldr	r3, [r7, #4]
 8024c18:	2b00      	cmp	r3, #0
 8024c1a:	d1f1      	bne.n	8024c00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8024c1c:	4b12      	ldr	r3, [pc, #72]	@ (8024c68 <xTaskResumeAll+0x134>)
 8024c1e:	2200      	movs	r2, #0
 8024c20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8024c22:	4b10      	ldr	r3, [pc, #64]	@ (8024c64 <xTaskResumeAll+0x130>)
 8024c24:	681b      	ldr	r3, [r3, #0]
 8024c26:	2b00      	cmp	r3, #0
 8024c28:	d009      	beq.n	8024c3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8024c2a:	2301      	movs	r3, #1
 8024c2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8024c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8024c6c <xTaskResumeAll+0x138>)
 8024c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8024c34:	601a      	str	r2, [r3, #0]
 8024c36:	f3bf 8f4f 	dsb	sy
 8024c3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8024c3e:	f001 f8ed 	bl	8025e1c <vPortExitCritical>

	return xAlreadyYielded;
 8024c42:	68bb      	ldr	r3, [r7, #8]
}
 8024c44:	4618      	mov	r0, r3
 8024c46:	3710      	adds	r7, #16
 8024c48:	46bd      	mov	sp, r7
 8024c4a:	bd80      	pop	{r7, pc}
 8024c4c:	20000d54 	.word	0x20000d54
 8024c50:	20000d2c 	.word	0x20000d2c
 8024c54:	20000cec 	.word	0x20000cec
 8024c58:	20000d34 	.word	0x20000d34
 8024c5c:	2000085c 	.word	0x2000085c
 8024c60:	20000858 	.word	0x20000858
 8024c64:	20000d40 	.word	0x20000d40
 8024c68:	20000d3c 	.word	0x20000d3c
 8024c6c:	e000ed04 	.word	0xe000ed04

08024c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8024c70:	b480      	push	{r7}
 8024c72:	b083      	sub	sp, #12
 8024c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8024c76:	4b05      	ldr	r3, [pc, #20]	@ (8024c8c <xTaskGetTickCount+0x1c>)
 8024c78:	681b      	ldr	r3, [r3, #0]
 8024c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8024c7c:	687b      	ldr	r3, [r7, #4]
}
 8024c7e:	4618      	mov	r0, r3
 8024c80:	370c      	adds	r7, #12
 8024c82:	46bd      	mov	sp, r7
 8024c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c88:	4770      	bx	lr
 8024c8a:	bf00      	nop
 8024c8c:	20000d30 	.word	0x20000d30

08024c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8024c90:	b580      	push	{r7, lr}
 8024c92:	b086      	sub	sp, #24
 8024c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8024c96:	2300      	movs	r3, #0
 8024c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8024c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8024dd8 <xTaskIncrementTick+0x148>)
 8024c9c:	681b      	ldr	r3, [r3, #0]
 8024c9e:	2b00      	cmp	r3, #0
 8024ca0:	f040 8090 	bne.w	8024dc4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8024ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8024ddc <xTaskIncrementTick+0x14c>)
 8024ca6:	681b      	ldr	r3, [r3, #0]
 8024ca8:	3301      	adds	r3, #1
 8024caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8024cac:	4a4b      	ldr	r2, [pc, #300]	@ (8024ddc <xTaskIncrementTick+0x14c>)
 8024cae:	693b      	ldr	r3, [r7, #16]
 8024cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8024cb2:	693b      	ldr	r3, [r7, #16]
 8024cb4:	2b00      	cmp	r3, #0
 8024cb6:	d121      	bne.n	8024cfc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8024cb8:	4b49      	ldr	r3, [pc, #292]	@ (8024de0 <xTaskIncrementTick+0x150>)
 8024cba:	681b      	ldr	r3, [r3, #0]
 8024cbc:	681b      	ldr	r3, [r3, #0]
 8024cbe:	2b00      	cmp	r3, #0
 8024cc0:	d00b      	beq.n	8024cda <xTaskIncrementTick+0x4a>
	__asm volatile
 8024cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024cc6:	f383 8811 	msr	BASEPRI, r3
 8024cca:	f3bf 8f6f 	isb	sy
 8024cce:	f3bf 8f4f 	dsb	sy
 8024cd2:	603b      	str	r3, [r7, #0]
}
 8024cd4:	bf00      	nop
 8024cd6:	bf00      	nop
 8024cd8:	e7fd      	b.n	8024cd6 <xTaskIncrementTick+0x46>
 8024cda:	4b41      	ldr	r3, [pc, #260]	@ (8024de0 <xTaskIncrementTick+0x150>)
 8024cdc:	681b      	ldr	r3, [r3, #0]
 8024cde:	60fb      	str	r3, [r7, #12]
 8024ce0:	4b40      	ldr	r3, [pc, #256]	@ (8024de4 <xTaskIncrementTick+0x154>)
 8024ce2:	681b      	ldr	r3, [r3, #0]
 8024ce4:	4a3e      	ldr	r2, [pc, #248]	@ (8024de0 <xTaskIncrementTick+0x150>)
 8024ce6:	6013      	str	r3, [r2, #0]
 8024ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8024de4 <xTaskIncrementTick+0x154>)
 8024cea:	68fb      	ldr	r3, [r7, #12]
 8024cec:	6013      	str	r3, [r2, #0]
 8024cee:	4b3e      	ldr	r3, [pc, #248]	@ (8024de8 <xTaskIncrementTick+0x158>)
 8024cf0:	681b      	ldr	r3, [r3, #0]
 8024cf2:	3301      	adds	r3, #1
 8024cf4:	4a3c      	ldr	r2, [pc, #240]	@ (8024de8 <xTaskIncrementTick+0x158>)
 8024cf6:	6013      	str	r3, [r2, #0]
 8024cf8:	f000 fad4 	bl	80252a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8024cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8024dec <xTaskIncrementTick+0x15c>)
 8024cfe:	681b      	ldr	r3, [r3, #0]
 8024d00:	693a      	ldr	r2, [r7, #16]
 8024d02:	429a      	cmp	r2, r3
 8024d04:	d349      	bcc.n	8024d9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8024d06:	4b36      	ldr	r3, [pc, #216]	@ (8024de0 <xTaskIncrementTick+0x150>)
 8024d08:	681b      	ldr	r3, [r3, #0]
 8024d0a:	681b      	ldr	r3, [r3, #0]
 8024d0c:	2b00      	cmp	r3, #0
 8024d0e:	d104      	bne.n	8024d1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8024d10:	4b36      	ldr	r3, [pc, #216]	@ (8024dec <xTaskIncrementTick+0x15c>)
 8024d12:	f04f 32ff 	mov.w	r2, #4294967295
 8024d16:	601a      	str	r2, [r3, #0]
					break;
 8024d18:	e03f      	b.n	8024d9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8024d1a:	4b31      	ldr	r3, [pc, #196]	@ (8024de0 <xTaskIncrementTick+0x150>)
 8024d1c:	681b      	ldr	r3, [r3, #0]
 8024d1e:	68db      	ldr	r3, [r3, #12]
 8024d20:	68db      	ldr	r3, [r3, #12]
 8024d22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8024d24:	68bb      	ldr	r3, [r7, #8]
 8024d26:	685b      	ldr	r3, [r3, #4]
 8024d28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8024d2a:	693a      	ldr	r2, [r7, #16]
 8024d2c:	687b      	ldr	r3, [r7, #4]
 8024d2e:	429a      	cmp	r2, r3
 8024d30:	d203      	bcs.n	8024d3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8024d32:	4a2e      	ldr	r2, [pc, #184]	@ (8024dec <xTaskIncrementTick+0x15c>)
 8024d34:	687b      	ldr	r3, [r7, #4]
 8024d36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8024d38:	e02f      	b.n	8024d9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8024d3a:	68bb      	ldr	r3, [r7, #8]
 8024d3c:	3304      	adds	r3, #4
 8024d3e:	4618      	mov	r0, r3
 8024d40:	f7fe ff82 	bl	8023c48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8024d44:	68bb      	ldr	r3, [r7, #8]
 8024d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024d48:	2b00      	cmp	r3, #0
 8024d4a:	d004      	beq.n	8024d56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8024d4c:	68bb      	ldr	r3, [r7, #8]
 8024d4e:	3318      	adds	r3, #24
 8024d50:	4618      	mov	r0, r3
 8024d52:	f7fe ff79 	bl	8023c48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8024d56:	68bb      	ldr	r3, [r7, #8]
 8024d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024d5a:	4b25      	ldr	r3, [pc, #148]	@ (8024df0 <xTaskIncrementTick+0x160>)
 8024d5c:	681b      	ldr	r3, [r3, #0]
 8024d5e:	429a      	cmp	r2, r3
 8024d60:	d903      	bls.n	8024d6a <xTaskIncrementTick+0xda>
 8024d62:	68bb      	ldr	r3, [r7, #8]
 8024d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024d66:	4a22      	ldr	r2, [pc, #136]	@ (8024df0 <xTaskIncrementTick+0x160>)
 8024d68:	6013      	str	r3, [r2, #0]
 8024d6a:	68bb      	ldr	r3, [r7, #8]
 8024d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024d6e:	4613      	mov	r3, r2
 8024d70:	009b      	lsls	r3, r3, #2
 8024d72:	4413      	add	r3, r2
 8024d74:	009b      	lsls	r3, r3, #2
 8024d76:	4a1f      	ldr	r2, [pc, #124]	@ (8024df4 <xTaskIncrementTick+0x164>)
 8024d78:	441a      	add	r2, r3
 8024d7a:	68bb      	ldr	r3, [r7, #8]
 8024d7c:	3304      	adds	r3, #4
 8024d7e:	4619      	mov	r1, r3
 8024d80:	4610      	mov	r0, r2
 8024d82:	f7fe ff04 	bl	8023b8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8024d86:	68bb      	ldr	r3, [r7, #8]
 8024d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8024df8 <xTaskIncrementTick+0x168>)
 8024d8c:	681b      	ldr	r3, [r3, #0]
 8024d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024d90:	429a      	cmp	r2, r3
 8024d92:	d3b8      	bcc.n	8024d06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8024d94:	2301      	movs	r3, #1
 8024d96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8024d98:	e7b5      	b.n	8024d06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8024d9a:	4b17      	ldr	r3, [pc, #92]	@ (8024df8 <xTaskIncrementTick+0x168>)
 8024d9c:	681b      	ldr	r3, [r3, #0]
 8024d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024da0:	4914      	ldr	r1, [pc, #80]	@ (8024df4 <xTaskIncrementTick+0x164>)
 8024da2:	4613      	mov	r3, r2
 8024da4:	009b      	lsls	r3, r3, #2
 8024da6:	4413      	add	r3, r2
 8024da8:	009b      	lsls	r3, r3, #2
 8024daa:	440b      	add	r3, r1
 8024dac:	681b      	ldr	r3, [r3, #0]
 8024dae:	2b01      	cmp	r3, #1
 8024db0:	d901      	bls.n	8024db6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8024db2:	2301      	movs	r3, #1
 8024db4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8024db6:	4b11      	ldr	r3, [pc, #68]	@ (8024dfc <xTaskIncrementTick+0x16c>)
 8024db8:	681b      	ldr	r3, [r3, #0]
 8024dba:	2b00      	cmp	r3, #0
 8024dbc:	d007      	beq.n	8024dce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8024dbe:	2301      	movs	r3, #1
 8024dc0:	617b      	str	r3, [r7, #20]
 8024dc2:	e004      	b.n	8024dce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8024dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8024e00 <xTaskIncrementTick+0x170>)
 8024dc6:	681b      	ldr	r3, [r3, #0]
 8024dc8:	3301      	adds	r3, #1
 8024dca:	4a0d      	ldr	r2, [pc, #52]	@ (8024e00 <xTaskIncrementTick+0x170>)
 8024dcc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8024dce:	697b      	ldr	r3, [r7, #20]
}
 8024dd0:	4618      	mov	r0, r3
 8024dd2:	3718      	adds	r7, #24
 8024dd4:	46bd      	mov	sp, r7
 8024dd6:	bd80      	pop	{r7, pc}
 8024dd8:	20000d54 	.word	0x20000d54
 8024ddc:	20000d30 	.word	0x20000d30
 8024de0:	20000ce4 	.word	0x20000ce4
 8024de4:	20000ce8 	.word	0x20000ce8
 8024de8:	20000d44 	.word	0x20000d44
 8024dec:	20000d4c 	.word	0x20000d4c
 8024df0:	20000d34 	.word	0x20000d34
 8024df4:	2000085c 	.word	0x2000085c
 8024df8:	20000858 	.word	0x20000858
 8024dfc:	20000d40 	.word	0x20000d40
 8024e00:	20000d3c 	.word	0x20000d3c

08024e04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8024e04:	b480      	push	{r7}
 8024e06:	b085      	sub	sp, #20
 8024e08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8024e0a:	4b28      	ldr	r3, [pc, #160]	@ (8024eac <vTaskSwitchContext+0xa8>)
 8024e0c:	681b      	ldr	r3, [r3, #0]
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	d003      	beq.n	8024e1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8024e12:	4b27      	ldr	r3, [pc, #156]	@ (8024eb0 <vTaskSwitchContext+0xac>)
 8024e14:	2201      	movs	r2, #1
 8024e16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8024e18:	e042      	b.n	8024ea0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8024e1a:	4b25      	ldr	r3, [pc, #148]	@ (8024eb0 <vTaskSwitchContext+0xac>)
 8024e1c:	2200      	movs	r2, #0
 8024e1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8024e20:	4b24      	ldr	r3, [pc, #144]	@ (8024eb4 <vTaskSwitchContext+0xb0>)
 8024e22:	681b      	ldr	r3, [r3, #0]
 8024e24:	60fb      	str	r3, [r7, #12]
 8024e26:	e011      	b.n	8024e4c <vTaskSwitchContext+0x48>
 8024e28:	68fb      	ldr	r3, [r7, #12]
 8024e2a:	2b00      	cmp	r3, #0
 8024e2c:	d10b      	bne.n	8024e46 <vTaskSwitchContext+0x42>
	__asm volatile
 8024e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024e32:	f383 8811 	msr	BASEPRI, r3
 8024e36:	f3bf 8f6f 	isb	sy
 8024e3a:	f3bf 8f4f 	dsb	sy
 8024e3e:	607b      	str	r3, [r7, #4]
}
 8024e40:	bf00      	nop
 8024e42:	bf00      	nop
 8024e44:	e7fd      	b.n	8024e42 <vTaskSwitchContext+0x3e>
 8024e46:	68fb      	ldr	r3, [r7, #12]
 8024e48:	3b01      	subs	r3, #1
 8024e4a:	60fb      	str	r3, [r7, #12]
 8024e4c:	491a      	ldr	r1, [pc, #104]	@ (8024eb8 <vTaskSwitchContext+0xb4>)
 8024e4e:	68fa      	ldr	r2, [r7, #12]
 8024e50:	4613      	mov	r3, r2
 8024e52:	009b      	lsls	r3, r3, #2
 8024e54:	4413      	add	r3, r2
 8024e56:	009b      	lsls	r3, r3, #2
 8024e58:	440b      	add	r3, r1
 8024e5a:	681b      	ldr	r3, [r3, #0]
 8024e5c:	2b00      	cmp	r3, #0
 8024e5e:	d0e3      	beq.n	8024e28 <vTaskSwitchContext+0x24>
 8024e60:	68fa      	ldr	r2, [r7, #12]
 8024e62:	4613      	mov	r3, r2
 8024e64:	009b      	lsls	r3, r3, #2
 8024e66:	4413      	add	r3, r2
 8024e68:	009b      	lsls	r3, r3, #2
 8024e6a:	4a13      	ldr	r2, [pc, #76]	@ (8024eb8 <vTaskSwitchContext+0xb4>)
 8024e6c:	4413      	add	r3, r2
 8024e6e:	60bb      	str	r3, [r7, #8]
 8024e70:	68bb      	ldr	r3, [r7, #8]
 8024e72:	685b      	ldr	r3, [r3, #4]
 8024e74:	685a      	ldr	r2, [r3, #4]
 8024e76:	68bb      	ldr	r3, [r7, #8]
 8024e78:	605a      	str	r2, [r3, #4]
 8024e7a:	68bb      	ldr	r3, [r7, #8]
 8024e7c:	685a      	ldr	r2, [r3, #4]
 8024e7e:	68bb      	ldr	r3, [r7, #8]
 8024e80:	3308      	adds	r3, #8
 8024e82:	429a      	cmp	r2, r3
 8024e84:	d104      	bne.n	8024e90 <vTaskSwitchContext+0x8c>
 8024e86:	68bb      	ldr	r3, [r7, #8]
 8024e88:	685b      	ldr	r3, [r3, #4]
 8024e8a:	685a      	ldr	r2, [r3, #4]
 8024e8c:	68bb      	ldr	r3, [r7, #8]
 8024e8e:	605a      	str	r2, [r3, #4]
 8024e90:	68bb      	ldr	r3, [r7, #8]
 8024e92:	685b      	ldr	r3, [r3, #4]
 8024e94:	68db      	ldr	r3, [r3, #12]
 8024e96:	4a09      	ldr	r2, [pc, #36]	@ (8024ebc <vTaskSwitchContext+0xb8>)
 8024e98:	6013      	str	r3, [r2, #0]
 8024e9a:	4a06      	ldr	r2, [pc, #24]	@ (8024eb4 <vTaskSwitchContext+0xb0>)
 8024e9c:	68fb      	ldr	r3, [r7, #12]
 8024e9e:	6013      	str	r3, [r2, #0]
}
 8024ea0:	bf00      	nop
 8024ea2:	3714      	adds	r7, #20
 8024ea4:	46bd      	mov	sp, r7
 8024ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024eaa:	4770      	bx	lr
 8024eac:	20000d54 	.word	0x20000d54
 8024eb0:	20000d40 	.word	0x20000d40
 8024eb4:	20000d34 	.word	0x20000d34
 8024eb8:	2000085c 	.word	0x2000085c
 8024ebc:	20000858 	.word	0x20000858

08024ec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8024ec0:	b580      	push	{r7, lr}
 8024ec2:	b084      	sub	sp, #16
 8024ec4:	af00      	add	r7, sp, #0
 8024ec6:	6078      	str	r0, [r7, #4]
 8024ec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8024eca:	687b      	ldr	r3, [r7, #4]
 8024ecc:	2b00      	cmp	r3, #0
 8024ece:	d10b      	bne.n	8024ee8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8024ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024ed4:	f383 8811 	msr	BASEPRI, r3
 8024ed8:	f3bf 8f6f 	isb	sy
 8024edc:	f3bf 8f4f 	dsb	sy
 8024ee0:	60fb      	str	r3, [r7, #12]
}
 8024ee2:	bf00      	nop
 8024ee4:	bf00      	nop
 8024ee6:	e7fd      	b.n	8024ee4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8024ee8:	4b07      	ldr	r3, [pc, #28]	@ (8024f08 <vTaskPlaceOnEventList+0x48>)
 8024eea:	681b      	ldr	r3, [r3, #0]
 8024eec:	3318      	adds	r3, #24
 8024eee:	4619      	mov	r1, r3
 8024ef0:	6878      	ldr	r0, [r7, #4]
 8024ef2:	f7fe fe70 	bl	8023bd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8024ef6:	2101      	movs	r1, #1
 8024ef8:	6838      	ldr	r0, [r7, #0]
 8024efa:	f000 fa81 	bl	8025400 <prvAddCurrentTaskToDelayedList>
}
 8024efe:	bf00      	nop
 8024f00:	3710      	adds	r7, #16
 8024f02:	46bd      	mov	sp, r7
 8024f04:	bd80      	pop	{r7, pc}
 8024f06:	bf00      	nop
 8024f08:	20000858 	.word	0x20000858

08024f0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8024f0c:	b580      	push	{r7, lr}
 8024f0e:	b086      	sub	sp, #24
 8024f10:	af00      	add	r7, sp, #0
 8024f12:	60f8      	str	r0, [r7, #12]
 8024f14:	60b9      	str	r1, [r7, #8]
 8024f16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8024f18:	68fb      	ldr	r3, [r7, #12]
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	d10b      	bne.n	8024f36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8024f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024f22:	f383 8811 	msr	BASEPRI, r3
 8024f26:	f3bf 8f6f 	isb	sy
 8024f2a:	f3bf 8f4f 	dsb	sy
 8024f2e:	617b      	str	r3, [r7, #20]
}
 8024f30:	bf00      	nop
 8024f32:	bf00      	nop
 8024f34:	e7fd      	b.n	8024f32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8024f36:	4b0a      	ldr	r3, [pc, #40]	@ (8024f60 <vTaskPlaceOnEventListRestricted+0x54>)
 8024f38:	681b      	ldr	r3, [r3, #0]
 8024f3a:	3318      	adds	r3, #24
 8024f3c:	4619      	mov	r1, r3
 8024f3e:	68f8      	ldr	r0, [r7, #12]
 8024f40:	f7fe fe25 	bl	8023b8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8024f44:	687b      	ldr	r3, [r7, #4]
 8024f46:	2b00      	cmp	r3, #0
 8024f48:	d002      	beq.n	8024f50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8024f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8024f4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8024f50:	6879      	ldr	r1, [r7, #4]
 8024f52:	68b8      	ldr	r0, [r7, #8]
 8024f54:	f000 fa54 	bl	8025400 <prvAddCurrentTaskToDelayedList>
	}
 8024f58:	bf00      	nop
 8024f5a:	3718      	adds	r7, #24
 8024f5c:	46bd      	mov	sp, r7
 8024f5e:	bd80      	pop	{r7, pc}
 8024f60:	20000858 	.word	0x20000858

08024f64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8024f64:	b580      	push	{r7, lr}
 8024f66:	b086      	sub	sp, #24
 8024f68:	af00      	add	r7, sp, #0
 8024f6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8024f6c:	687b      	ldr	r3, [r7, #4]
 8024f6e:	68db      	ldr	r3, [r3, #12]
 8024f70:	68db      	ldr	r3, [r3, #12]
 8024f72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8024f74:	693b      	ldr	r3, [r7, #16]
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	d10b      	bne.n	8024f92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8024f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8024f7e:	f383 8811 	msr	BASEPRI, r3
 8024f82:	f3bf 8f6f 	isb	sy
 8024f86:	f3bf 8f4f 	dsb	sy
 8024f8a:	60fb      	str	r3, [r7, #12]
}
 8024f8c:	bf00      	nop
 8024f8e:	bf00      	nop
 8024f90:	e7fd      	b.n	8024f8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8024f92:	693b      	ldr	r3, [r7, #16]
 8024f94:	3318      	adds	r3, #24
 8024f96:	4618      	mov	r0, r3
 8024f98:	f7fe fe56 	bl	8023c48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8024f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8025014 <xTaskRemoveFromEventList+0xb0>)
 8024f9e:	681b      	ldr	r3, [r3, #0]
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	d11d      	bne.n	8024fe0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8024fa4:	693b      	ldr	r3, [r7, #16]
 8024fa6:	3304      	adds	r3, #4
 8024fa8:	4618      	mov	r0, r3
 8024faa:	f7fe fe4d 	bl	8023c48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8024fae:	693b      	ldr	r3, [r7, #16]
 8024fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024fb2:	4b19      	ldr	r3, [pc, #100]	@ (8025018 <xTaskRemoveFromEventList+0xb4>)
 8024fb4:	681b      	ldr	r3, [r3, #0]
 8024fb6:	429a      	cmp	r2, r3
 8024fb8:	d903      	bls.n	8024fc2 <xTaskRemoveFromEventList+0x5e>
 8024fba:	693b      	ldr	r3, [r7, #16]
 8024fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024fbe:	4a16      	ldr	r2, [pc, #88]	@ (8025018 <xTaskRemoveFromEventList+0xb4>)
 8024fc0:	6013      	str	r3, [r2, #0]
 8024fc2:	693b      	ldr	r3, [r7, #16]
 8024fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024fc6:	4613      	mov	r3, r2
 8024fc8:	009b      	lsls	r3, r3, #2
 8024fca:	4413      	add	r3, r2
 8024fcc:	009b      	lsls	r3, r3, #2
 8024fce:	4a13      	ldr	r2, [pc, #76]	@ (802501c <xTaskRemoveFromEventList+0xb8>)
 8024fd0:	441a      	add	r2, r3
 8024fd2:	693b      	ldr	r3, [r7, #16]
 8024fd4:	3304      	adds	r3, #4
 8024fd6:	4619      	mov	r1, r3
 8024fd8:	4610      	mov	r0, r2
 8024fda:	f7fe fdd8 	bl	8023b8e <vListInsertEnd>
 8024fde:	e005      	b.n	8024fec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8024fe0:	693b      	ldr	r3, [r7, #16]
 8024fe2:	3318      	adds	r3, #24
 8024fe4:	4619      	mov	r1, r3
 8024fe6:	480e      	ldr	r0, [pc, #56]	@ (8025020 <xTaskRemoveFromEventList+0xbc>)
 8024fe8:	f7fe fdd1 	bl	8023b8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8024fec:	693b      	ldr	r3, [r7, #16]
 8024fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8025024 <xTaskRemoveFromEventList+0xc0>)
 8024ff2:	681b      	ldr	r3, [r3, #0]
 8024ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024ff6:	429a      	cmp	r2, r3
 8024ff8:	d905      	bls.n	8025006 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8024ffa:	2301      	movs	r3, #1
 8024ffc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8024ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8025028 <xTaskRemoveFromEventList+0xc4>)
 8025000:	2201      	movs	r2, #1
 8025002:	601a      	str	r2, [r3, #0]
 8025004:	e001      	b.n	802500a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8025006:	2300      	movs	r3, #0
 8025008:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 802500a:	697b      	ldr	r3, [r7, #20]
}
 802500c:	4618      	mov	r0, r3
 802500e:	3718      	adds	r7, #24
 8025010:	46bd      	mov	sp, r7
 8025012:	bd80      	pop	{r7, pc}
 8025014:	20000d54 	.word	0x20000d54
 8025018:	20000d34 	.word	0x20000d34
 802501c:	2000085c 	.word	0x2000085c
 8025020:	20000cec 	.word	0x20000cec
 8025024:	20000858 	.word	0x20000858
 8025028:	20000d40 	.word	0x20000d40

0802502c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 802502c:	b480      	push	{r7}
 802502e:	b083      	sub	sp, #12
 8025030:	af00      	add	r7, sp, #0
 8025032:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8025034:	4b06      	ldr	r3, [pc, #24]	@ (8025050 <vTaskInternalSetTimeOutState+0x24>)
 8025036:	681a      	ldr	r2, [r3, #0]
 8025038:	687b      	ldr	r3, [r7, #4]
 802503a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 802503c:	4b05      	ldr	r3, [pc, #20]	@ (8025054 <vTaskInternalSetTimeOutState+0x28>)
 802503e:	681a      	ldr	r2, [r3, #0]
 8025040:	687b      	ldr	r3, [r7, #4]
 8025042:	605a      	str	r2, [r3, #4]
}
 8025044:	bf00      	nop
 8025046:	370c      	adds	r7, #12
 8025048:	46bd      	mov	sp, r7
 802504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802504e:	4770      	bx	lr
 8025050:	20000d44 	.word	0x20000d44
 8025054:	20000d30 	.word	0x20000d30

08025058 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8025058:	b580      	push	{r7, lr}
 802505a:	b088      	sub	sp, #32
 802505c:	af00      	add	r7, sp, #0
 802505e:	6078      	str	r0, [r7, #4]
 8025060:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8025062:	687b      	ldr	r3, [r7, #4]
 8025064:	2b00      	cmp	r3, #0
 8025066:	d10b      	bne.n	8025080 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8025068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802506c:	f383 8811 	msr	BASEPRI, r3
 8025070:	f3bf 8f6f 	isb	sy
 8025074:	f3bf 8f4f 	dsb	sy
 8025078:	613b      	str	r3, [r7, #16]
}
 802507a:	bf00      	nop
 802507c:	bf00      	nop
 802507e:	e7fd      	b.n	802507c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8025080:	683b      	ldr	r3, [r7, #0]
 8025082:	2b00      	cmp	r3, #0
 8025084:	d10b      	bne.n	802509e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8025086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802508a:	f383 8811 	msr	BASEPRI, r3
 802508e:	f3bf 8f6f 	isb	sy
 8025092:	f3bf 8f4f 	dsb	sy
 8025096:	60fb      	str	r3, [r7, #12]
}
 8025098:	bf00      	nop
 802509a:	bf00      	nop
 802509c:	e7fd      	b.n	802509a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 802509e:	f000 fe8b 	bl	8025db8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80250a2:	4b1d      	ldr	r3, [pc, #116]	@ (8025118 <xTaskCheckForTimeOut+0xc0>)
 80250a4:	681b      	ldr	r3, [r3, #0]
 80250a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80250a8:	687b      	ldr	r3, [r7, #4]
 80250aa:	685b      	ldr	r3, [r3, #4]
 80250ac:	69ba      	ldr	r2, [r7, #24]
 80250ae:	1ad3      	subs	r3, r2, r3
 80250b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80250b2:	683b      	ldr	r3, [r7, #0]
 80250b4:	681b      	ldr	r3, [r3, #0]
 80250b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80250ba:	d102      	bne.n	80250c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80250bc:	2300      	movs	r3, #0
 80250be:	61fb      	str	r3, [r7, #28]
 80250c0:	e023      	b.n	802510a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80250c2:	687b      	ldr	r3, [r7, #4]
 80250c4:	681a      	ldr	r2, [r3, #0]
 80250c6:	4b15      	ldr	r3, [pc, #84]	@ (802511c <xTaskCheckForTimeOut+0xc4>)
 80250c8:	681b      	ldr	r3, [r3, #0]
 80250ca:	429a      	cmp	r2, r3
 80250cc:	d007      	beq.n	80250de <xTaskCheckForTimeOut+0x86>
 80250ce:	687b      	ldr	r3, [r7, #4]
 80250d0:	685b      	ldr	r3, [r3, #4]
 80250d2:	69ba      	ldr	r2, [r7, #24]
 80250d4:	429a      	cmp	r2, r3
 80250d6:	d302      	bcc.n	80250de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80250d8:	2301      	movs	r3, #1
 80250da:	61fb      	str	r3, [r7, #28]
 80250dc:	e015      	b.n	802510a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80250de:	683b      	ldr	r3, [r7, #0]
 80250e0:	681b      	ldr	r3, [r3, #0]
 80250e2:	697a      	ldr	r2, [r7, #20]
 80250e4:	429a      	cmp	r2, r3
 80250e6:	d20b      	bcs.n	8025100 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80250e8:	683b      	ldr	r3, [r7, #0]
 80250ea:	681a      	ldr	r2, [r3, #0]
 80250ec:	697b      	ldr	r3, [r7, #20]
 80250ee:	1ad2      	subs	r2, r2, r3
 80250f0:	683b      	ldr	r3, [r7, #0]
 80250f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80250f4:	6878      	ldr	r0, [r7, #4]
 80250f6:	f7ff ff99 	bl	802502c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80250fa:	2300      	movs	r3, #0
 80250fc:	61fb      	str	r3, [r7, #28]
 80250fe:	e004      	b.n	802510a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8025100:	683b      	ldr	r3, [r7, #0]
 8025102:	2200      	movs	r2, #0
 8025104:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8025106:	2301      	movs	r3, #1
 8025108:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802510a:	f000 fe87 	bl	8025e1c <vPortExitCritical>

	return xReturn;
 802510e:	69fb      	ldr	r3, [r7, #28]
}
 8025110:	4618      	mov	r0, r3
 8025112:	3720      	adds	r7, #32
 8025114:	46bd      	mov	sp, r7
 8025116:	bd80      	pop	{r7, pc}
 8025118:	20000d30 	.word	0x20000d30
 802511c:	20000d44 	.word	0x20000d44

08025120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8025120:	b480      	push	{r7}
 8025122:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8025124:	4b03      	ldr	r3, [pc, #12]	@ (8025134 <vTaskMissedYield+0x14>)
 8025126:	2201      	movs	r2, #1
 8025128:	601a      	str	r2, [r3, #0]
}
 802512a:	bf00      	nop
 802512c:	46bd      	mov	sp, r7
 802512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025132:	4770      	bx	lr
 8025134:	20000d40 	.word	0x20000d40

08025138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8025138:	b580      	push	{r7, lr}
 802513a:	b082      	sub	sp, #8
 802513c:	af00      	add	r7, sp, #0
 802513e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8025140:	f000 f852 	bl	80251e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8025144:	4b06      	ldr	r3, [pc, #24]	@ (8025160 <prvIdleTask+0x28>)
 8025146:	681b      	ldr	r3, [r3, #0]
 8025148:	2b01      	cmp	r3, #1
 802514a:	d9f9      	bls.n	8025140 <prvIdleTask+0x8>
			{
				taskYIELD();
 802514c:	4b05      	ldr	r3, [pc, #20]	@ (8025164 <prvIdleTask+0x2c>)
 802514e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8025152:	601a      	str	r2, [r3, #0]
 8025154:	f3bf 8f4f 	dsb	sy
 8025158:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 802515c:	e7f0      	b.n	8025140 <prvIdleTask+0x8>
 802515e:	bf00      	nop
 8025160:	2000085c 	.word	0x2000085c
 8025164:	e000ed04 	.word	0xe000ed04

08025168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8025168:	b580      	push	{r7, lr}
 802516a:	b082      	sub	sp, #8
 802516c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802516e:	2300      	movs	r3, #0
 8025170:	607b      	str	r3, [r7, #4]
 8025172:	e00c      	b.n	802518e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8025174:	687a      	ldr	r2, [r7, #4]
 8025176:	4613      	mov	r3, r2
 8025178:	009b      	lsls	r3, r3, #2
 802517a:	4413      	add	r3, r2
 802517c:	009b      	lsls	r3, r3, #2
 802517e:	4a12      	ldr	r2, [pc, #72]	@ (80251c8 <prvInitialiseTaskLists+0x60>)
 8025180:	4413      	add	r3, r2
 8025182:	4618      	mov	r0, r3
 8025184:	f7fe fcd6 	bl	8023b34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8025188:	687b      	ldr	r3, [r7, #4]
 802518a:	3301      	adds	r3, #1
 802518c:	607b      	str	r3, [r7, #4]
 802518e:	687b      	ldr	r3, [r7, #4]
 8025190:	2b37      	cmp	r3, #55	@ 0x37
 8025192:	d9ef      	bls.n	8025174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8025194:	480d      	ldr	r0, [pc, #52]	@ (80251cc <prvInitialiseTaskLists+0x64>)
 8025196:	f7fe fccd 	bl	8023b34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802519a:	480d      	ldr	r0, [pc, #52]	@ (80251d0 <prvInitialiseTaskLists+0x68>)
 802519c:	f7fe fcca 	bl	8023b34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80251a0:	480c      	ldr	r0, [pc, #48]	@ (80251d4 <prvInitialiseTaskLists+0x6c>)
 80251a2:	f7fe fcc7 	bl	8023b34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80251a6:	480c      	ldr	r0, [pc, #48]	@ (80251d8 <prvInitialiseTaskLists+0x70>)
 80251a8:	f7fe fcc4 	bl	8023b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80251ac:	480b      	ldr	r0, [pc, #44]	@ (80251dc <prvInitialiseTaskLists+0x74>)
 80251ae:	f7fe fcc1 	bl	8023b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80251b2:	4b0b      	ldr	r3, [pc, #44]	@ (80251e0 <prvInitialiseTaskLists+0x78>)
 80251b4:	4a05      	ldr	r2, [pc, #20]	@ (80251cc <prvInitialiseTaskLists+0x64>)
 80251b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80251b8:	4b0a      	ldr	r3, [pc, #40]	@ (80251e4 <prvInitialiseTaskLists+0x7c>)
 80251ba:	4a05      	ldr	r2, [pc, #20]	@ (80251d0 <prvInitialiseTaskLists+0x68>)
 80251bc:	601a      	str	r2, [r3, #0]
}
 80251be:	bf00      	nop
 80251c0:	3708      	adds	r7, #8
 80251c2:	46bd      	mov	sp, r7
 80251c4:	bd80      	pop	{r7, pc}
 80251c6:	bf00      	nop
 80251c8:	2000085c 	.word	0x2000085c
 80251cc:	20000cbc 	.word	0x20000cbc
 80251d0:	20000cd0 	.word	0x20000cd0
 80251d4:	20000cec 	.word	0x20000cec
 80251d8:	20000d00 	.word	0x20000d00
 80251dc:	20000d18 	.word	0x20000d18
 80251e0:	20000ce4 	.word	0x20000ce4
 80251e4:	20000ce8 	.word	0x20000ce8

080251e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80251e8:	b580      	push	{r7, lr}
 80251ea:	b082      	sub	sp, #8
 80251ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80251ee:	e019      	b.n	8025224 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80251f0:	f000 fde2 	bl	8025db8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80251f4:	4b10      	ldr	r3, [pc, #64]	@ (8025238 <prvCheckTasksWaitingTermination+0x50>)
 80251f6:	68db      	ldr	r3, [r3, #12]
 80251f8:	68db      	ldr	r3, [r3, #12]
 80251fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80251fc:	687b      	ldr	r3, [r7, #4]
 80251fe:	3304      	adds	r3, #4
 8025200:	4618      	mov	r0, r3
 8025202:	f7fe fd21 	bl	8023c48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8025206:	4b0d      	ldr	r3, [pc, #52]	@ (802523c <prvCheckTasksWaitingTermination+0x54>)
 8025208:	681b      	ldr	r3, [r3, #0]
 802520a:	3b01      	subs	r3, #1
 802520c:	4a0b      	ldr	r2, [pc, #44]	@ (802523c <prvCheckTasksWaitingTermination+0x54>)
 802520e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8025210:	4b0b      	ldr	r3, [pc, #44]	@ (8025240 <prvCheckTasksWaitingTermination+0x58>)
 8025212:	681b      	ldr	r3, [r3, #0]
 8025214:	3b01      	subs	r3, #1
 8025216:	4a0a      	ldr	r2, [pc, #40]	@ (8025240 <prvCheckTasksWaitingTermination+0x58>)
 8025218:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802521a:	f000 fdff 	bl	8025e1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802521e:	6878      	ldr	r0, [r7, #4]
 8025220:	f000 f810 	bl	8025244 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8025224:	4b06      	ldr	r3, [pc, #24]	@ (8025240 <prvCheckTasksWaitingTermination+0x58>)
 8025226:	681b      	ldr	r3, [r3, #0]
 8025228:	2b00      	cmp	r3, #0
 802522a:	d1e1      	bne.n	80251f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 802522c:	bf00      	nop
 802522e:	bf00      	nop
 8025230:	3708      	adds	r7, #8
 8025232:	46bd      	mov	sp, r7
 8025234:	bd80      	pop	{r7, pc}
 8025236:	bf00      	nop
 8025238:	20000d00 	.word	0x20000d00
 802523c:	20000d2c 	.word	0x20000d2c
 8025240:	20000d14 	.word	0x20000d14

08025244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8025244:	b580      	push	{r7, lr}
 8025246:	b084      	sub	sp, #16
 8025248:	af00      	add	r7, sp, #0
 802524a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802524c:	687b      	ldr	r3, [r7, #4]
 802524e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8025252:	2b00      	cmp	r3, #0
 8025254:	d108      	bne.n	8025268 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8025256:	687b      	ldr	r3, [r7, #4]
 8025258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802525a:	4618      	mov	r0, r3
 802525c:	f000 ff9c 	bl	8026198 <vPortFree>
				vPortFree( pxTCB );
 8025260:	6878      	ldr	r0, [r7, #4]
 8025262:	f000 ff99 	bl	8026198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8025266:	e019      	b.n	802529c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8025268:	687b      	ldr	r3, [r7, #4]
 802526a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 802526e:	2b01      	cmp	r3, #1
 8025270:	d103      	bne.n	802527a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8025272:	6878      	ldr	r0, [r7, #4]
 8025274:	f000 ff90 	bl	8026198 <vPortFree>
	}
 8025278:	e010      	b.n	802529c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 802527a:	687b      	ldr	r3, [r7, #4]
 802527c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8025280:	2b02      	cmp	r3, #2
 8025282:	d00b      	beq.n	802529c <prvDeleteTCB+0x58>
	__asm volatile
 8025284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025288:	f383 8811 	msr	BASEPRI, r3
 802528c:	f3bf 8f6f 	isb	sy
 8025290:	f3bf 8f4f 	dsb	sy
 8025294:	60fb      	str	r3, [r7, #12]
}
 8025296:	bf00      	nop
 8025298:	bf00      	nop
 802529a:	e7fd      	b.n	8025298 <prvDeleteTCB+0x54>
	}
 802529c:	bf00      	nop
 802529e:	3710      	adds	r7, #16
 80252a0:	46bd      	mov	sp, r7
 80252a2:	bd80      	pop	{r7, pc}

080252a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80252a4:	b480      	push	{r7}
 80252a6:	b083      	sub	sp, #12
 80252a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80252aa:	4b0c      	ldr	r3, [pc, #48]	@ (80252dc <prvResetNextTaskUnblockTime+0x38>)
 80252ac:	681b      	ldr	r3, [r3, #0]
 80252ae:	681b      	ldr	r3, [r3, #0]
 80252b0:	2b00      	cmp	r3, #0
 80252b2:	d104      	bne.n	80252be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80252b4:	4b0a      	ldr	r3, [pc, #40]	@ (80252e0 <prvResetNextTaskUnblockTime+0x3c>)
 80252b6:	f04f 32ff 	mov.w	r2, #4294967295
 80252ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80252bc:	e008      	b.n	80252d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80252be:	4b07      	ldr	r3, [pc, #28]	@ (80252dc <prvResetNextTaskUnblockTime+0x38>)
 80252c0:	681b      	ldr	r3, [r3, #0]
 80252c2:	68db      	ldr	r3, [r3, #12]
 80252c4:	68db      	ldr	r3, [r3, #12]
 80252c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80252c8:	687b      	ldr	r3, [r7, #4]
 80252ca:	685b      	ldr	r3, [r3, #4]
 80252cc:	4a04      	ldr	r2, [pc, #16]	@ (80252e0 <prvResetNextTaskUnblockTime+0x3c>)
 80252ce:	6013      	str	r3, [r2, #0]
}
 80252d0:	bf00      	nop
 80252d2:	370c      	adds	r7, #12
 80252d4:	46bd      	mov	sp, r7
 80252d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252da:	4770      	bx	lr
 80252dc:	20000ce4 	.word	0x20000ce4
 80252e0:	20000d4c 	.word	0x20000d4c

080252e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80252e4:	b480      	push	{r7}
 80252e6:	b083      	sub	sp, #12
 80252e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80252ea:	4b0b      	ldr	r3, [pc, #44]	@ (8025318 <xTaskGetSchedulerState+0x34>)
 80252ec:	681b      	ldr	r3, [r3, #0]
 80252ee:	2b00      	cmp	r3, #0
 80252f0:	d102      	bne.n	80252f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80252f2:	2301      	movs	r3, #1
 80252f4:	607b      	str	r3, [r7, #4]
 80252f6:	e008      	b.n	802530a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80252f8:	4b08      	ldr	r3, [pc, #32]	@ (802531c <xTaskGetSchedulerState+0x38>)
 80252fa:	681b      	ldr	r3, [r3, #0]
 80252fc:	2b00      	cmp	r3, #0
 80252fe:	d102      	bne.n	8025306 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8025300:	2302      	movs	r3, #2
 8025302:	607b      	str	r3, [r7, #4]
 8025304:	e001      	b.n	802530a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8025306:	2300      	movs	r3, #0
 8025308:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802530a:	687b      	ldr	r3, [r7, #4]
	}
 802530c:	4618      	mov	r0, r3
 802530e:	370c      	adds	r7, #12
 8025310:	46bd      	mov	sp, r7
 8025312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025316:	4770      	bx	lr
 8025318:	20000d38 	.word	0x20000d38
 802531c:	20000d54 	.word	0x20000d54

08025320 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8025320:	b580      	push	{r7, lr}
 8025322:	b086      	sub	sp, #24
 8025324:	af00      	add	r7, sp, #0
 8025326:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8025328:	687b      	ldr	r3, [r7, #4]
 802532a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 802532c:	2300      	movs	r3, #0
 802532e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8025330:	687b      	ldr	r3, [r7, #4]
 8025332:	2b00      	cmp	r3, #0
 8025334:	d058      	beq.n	80253e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8025336:	4b2f      	ldr	r3, [pc, #188]	@ (80253f4 <xTaskPriorityDisinherit+0xd4>)
 8025338:	681b      	ldr	r3, [r3, #0]
 802533a:	693a      	ldr	r2, [r7, #16]
 802533c:	429a      	cmp	r2, r3
 802533e:	d00b      	beq.n	8025358 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8025340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025344:	f383 8811 	msr	BASEPRI, r3
 8025348:	f3bf 8f6f 	isb	sy
 802534c:	f3bf 8f4f 	dsb	sy
 8025350:	60fb      	str	r3, [r7, #12]
}
 8025352:	bf00      	nop
 8025354:	bf00      	nop
 8025356:	e7fd      	b.n	8025354 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8025358:	693b      	ldr	r3, [r7, #16]
 802535a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802535c:	2b00      	cmp	r3, #0
 802535e:	d10b      	bne.n	8025378 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8025360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025364:	f383 8811 	msr	BASEPRI, r3
 8025368:	f3bf 8f6f 	isb	sy
 802536c:	f3bf 8f4f 	dsb	sy
 8025370:	60bb      	str	r3, [r7, #8]
}
 8025372:	bf00      	nop
 8025374:	bf00      	nop
 8025376:	e7fd      	b.n	8025374 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8025378:	693b      	ldr	r3, [r7, #16]
 802537a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802537c:	1e5a      	subs	r2, r3, #1
 802537e:	693b      	ldr	r3, [r7, #16]
 8025380:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8025382:	693b      	ldr	r3, [r7, #16]
 8025384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8025386:	693b      	ldr	r3, [r7, #16]
 8025388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802538a:	429a      	cmp	r2, r3
 802538c:	d02c      	beq.n	80253e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802538e:	693b      	ldr	r3, [r7, #16]
 8025390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8025392:	2b00      	cmp	r3, #0
 8025394:	d128      	bne.n	80253e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8025396:	693b      	ldr	r3, [r7, #16]
 8025398:	3304      	adds	r3, #4
 802539a:	4618      	mov	r0, r3
 802539c:	f7fe fc54 	bl	8023c48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80253a0:	693b      	ldr	r3, [r7, #16]
 80253a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80253a4:	693b      	ldr	r3, [r7, #16]
 80253a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80253a8:	693b      	ldr	r3, [r7, #16]
 80253aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80253ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80253b0:	693b      	ldr	r3, [r7, #16]
 80253b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80253b4:	693b      	ldr	r3, [r7, #16]
 80253b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80253b8:	4b0f      	ldr	r3, [pc, #60]	@ (80253f8 <xTaskPriorityDisinherit+0xd8>)
 80253ba:	681b      	ldr	r3, [r3, #0]
 80253bc:	429a      	cmp	r2, r3
 80253be:	d903      	bls.n	80253c8 <xTaskPriorityDisinherit+0xa8>
 80253c0:	693b      	ldr	r3, [r7, #16]
 80253c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80253c4:	4a0c      	ldr	r2, [pc, #48]	@ (80253f8 <xTaskPriorityDisinherit+0xd8>)
 80253c6:	6013      	str	r3, [r2, #0]
 80253c8:	693b      	ldr	r3, [r7, #16]
 80253ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80253cc:	4613      	mov	r3, r2
 80253ce:	009b      	lsls	r3, r3, #2
 80253d0:	4413      	add	r3, r2
 80253d2:	009b      	lsls	r3, r3, #2
 80253d4:	4a09      	ldr	r2, [pc, #36]	@ (80253fc <xTaskPriorityDisinherit+0xdc>)
 80253d6:	441a      	add	r2, r3
 80253d8:	693b      	ldr	r3, [r7, #16]
 80253da:	3304      	adds	r3, #4
 80253dc:	4619      	mov	r1, r3
 80253de:	4610      	mov	r0, r2
 80253e0:	f7fe fbd5 	bl	8023b8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80253e4:	2301      	movs	r3, #1
 80253e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80253e8:	697b      	ldr	r3, [r7, #20]
	}
 80253ea:	4618      	mov	r0, r3
 80253ec:	3718      	adds	r7, #24
 80253ee:	46bd      	mov	sp, r7
 80253f0:	bd80      	pop	{r7, pc}
 80253f2:	bf00      	nop
 80253f4:	20000858 	.word	0x20000858
 80253f8:	20000d34 	.word	0x20000d34
 80253fc:	2000085c 	.word	0x2000085c

08025400 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8025400:	b580      	push	{r7, lr}
 8025402:	b084      	sub	sp, #16
 8025404:	af00      	add	r7, sp, #0
 8025406:	6078      	str	r0, [r7, #4]
 8025408:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 802540a:	4b21      	ldr	r3, [pc, #132]	@ (8025490 <prvAddCurrentTaskToDelayedList+0x90>)
 802540c:	681b      	ldr	r3, [r3, #0]
 802540e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8025410:	4b20      	ldr	r3, [pc, #128]	@ (8025494 <prvAddCurrentTaskToDelayedList+0x94>)
 8025412:	681b      	ldr	r3, [r3, #0]
 8025414:	3304      	adds	r3, #4
 8025416:	4618      	mov	r0, r3
 8025418:	f7fe fc16 	bl	8023c48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802541c:	687b      	ldr	r3, [r7, #4]
 802541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025422:	d10a      	bne.n	802543a <prvAddCurrentTaskToDelayedList+0x3a>
 8025424:	683b      	ldr	r3, [r7, #0]
 8025426:	2b00      	cmp	r3, #0
 8025428:	d007      	beq.n	802543a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802542a:	4b1a      	ldr	r3, [pc, #104]	@ (8025494 <prvAddCurrentTaskToDelayedList+0x94>)
 802542c:	681b      	ldr	r3, [r3, #0]
 802542e:	3304      	adds	r3, #4
 8025430:	4619      	mov	r1, r3
 8025432:	4819      	ldr	r0, [pc, #100]	@ (8025498 <prvAddCurrentTaskToDelayedList+0x98>)
 8025434:	f7fe fbab 	bl	8023b8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8025438:	e026      	b.n	8025488 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 802543a:	68fa      	ldr	r2, [r7, #12]
 802543c:	687b      	ldr	r3, [r7, #4]
 802543e:	4413      	add	r3, r2
 8025440:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8025442:	4b14      	ldr	r3, [pc, #80]	@ (8025494 <prvAddCurrentTaskToDelayedList+0x94>)
 8025444:	681b      	ldr	r3, [r3, #0]
 8025446:	68ba      	ldr	r2, [r7, #8]
 8025448:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 802544a:	68ba      	ldr	r2, [r7, #8]
 802544c:	68fb      	ldr	r3, [r7, #12]
 802544e:	429a      	cmp	r2, r3
 8025450:	d209      	bcs.n	8025466 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8025452:	4b12      	ldr	r3, [pc, #72]	@ (802549c <prvAddCurrentTaskToDelayedList+0x9c>)
 8025454:	681a      	ldr	r2, [r3, #0]
 8025456:	4b0f      	ldr	r3, [pc, #60]	@ (8025494 <prvAddCurrentTaskToDelayedList+0x94>)
 8025458:	681b      	ldr	r3, [r3, #0]
 802545a:	3304      	adds	r3, #4
 802545c:	4619      	mov	r1, r3
 802545e:	4610      	mov	r0, r2
 8025460:	f7fe fbb9 	bl	8023bd6 <vListInsert>
}
 8025464:	e010      	b.n	8025488 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8025466:	4b0e      	ldr	r3, [pc, #56]	@ (80254a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8025468:	681a      	ldr	r2, [r3, #0]
 802546a:	4b0a      	ldr	r3, [pc, #40]	@ (8025494 <prvAddCurrentTaskToDelayedList+0x94>)
 802546c:	681b      	ldr	r3, [r3, #0]
 802546e:	3304      	adds	r3, #4
 8025470:	4619      	mov	r1, r3
 8025472:	4610      	mov	r0, r2
 8025474:	f7fe fbaf 	bl	8023bd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8025478:	4b0a      	ldr	r3, [pc, #40]	@ (80254a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 802547a:	681b      	ldr	r3, [r3, #0]
 802547c:	68ba      	ldr	r2, [r7, #8]
 802547e:	429a      	cmp	r2, r3
 8025480:	d202      	bcs.n	8025488 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8025482:	4a08      	ldr	r2, [pc, #32]	@ (80254a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8025484:	68bb      	ldr	r3, [r7, #8]
 8025486:	6013      	str	r3, [r2, #0]
}
 8025488:	bf00      	nop
 802548a:	3710      	adds	r7, #16
 802548c:	46bd      	mov	sp, r7
 802548e:	bd80      	pop	{r7, pc}
 8025490:	20000d30 	.word	0x20000d30
 8025494:	20000858 	.word	0x20000858
 8025498:	20000d18 	.word	0x20000d18
 802549c:	20000ce8 	.word	0x20000ce8
 80254a0:	20000ce4 	.word	0x20000ce4
 80254a4:	20000d4c 	.word	0x20000d4c

080254a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80254a8:	b580      	push	{r7, lr}
 80254aa:	b08a      	sub	sp, #40	@ 0x28
 80254ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80254ae:	2300      	movs	r3, #0
 80254b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80254b2:	f000 fb13 	bl	8025adc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80254b6:	4b1d      	ldr	r3, [pc, #116]	@ (802552c <xTimerCreateTimerTask+0x84>)
 80254b8:	681b      	ldr	r3, [r3, #0]
 80254ba:	2b00      	cmp	r3, #0
 80254bc:	d021      	beq.n	8025502 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80254be:	2300      	movs	r3, #0
 80254c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80254c2:	2300      	movs	r3, #0
 80254c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80254c6:	1d3a      	adds	r2, r7, #4
 80254c8:	f107 0108 	add.w	r1, r7, #8
 80254cc:	f107 030c 	add.w	r3, r7, #12
 80254d0:	4618      	mov	r0, r3
 80254d2:	f7fe fb15 	bl	8023b00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80254d6:	6879      	ldr	r1, [r7, #4]
 80254d8:	68bb      	ldr	r3, [r7, #8]
 80254da:	68fa      	ldr	r2, [r7, #12]
 80254dc:	9202      	str	r2, [sp, #8]
 80254de:	9301      	str	r3, [sp, #4]
 80254e0:	2302      	movs	r3, #2
 80254e2:	9300      	str	r3, [sp, #0]
 80254e4:	2300      	movs	r3, #0
 80254e6:	460a      	mov	r2, r1
 80254e8:	4911      	ldr	r1, [pc, #68]	@ (8025530 <xTimerCreateTimerTask+0x88>)
 80254ea:	4812      	ldr	r0, [pc, #72]	@ (8025534 <xTimerCreateTimerTask+0x8c>)
 80254ec:	f7ff f8d0 	bl	8024690 <xTaskCreateStatic>
 80254f0:	4603      	mov	r3, r0
 80254f2:	4a11      	ldr	r2, [pc, #68]	@ (8025538 <xTimerCreateTimerTask+0x90>)
 80254f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80254f6:	4b10      	ldr	r3, [pc, #64]	@ (8025538 <xTimerCreateTimerTask+0x90>)
 80254f8:	681b      	ldr	r3, [r3, #0]
 80254fa:	2b00      	cmp	r3, #0
 80254fc:	d001      	beq.n	8025502 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80254fe:	2301      	movs	r3, #1
 8025500:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8025502:	697b      	ldr	r3, [r7, #20]
 8025504:	2b00      	cmp	r3, #0
 8025506:	d10b      	bne.n	8025520 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8025508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802550c:	f383 8811 	msr	BASEPRI, r3
 8025510:	f3bf 8f6f 	isb	sy
 8025514:	f3bf 8f4f 	dsb	sy
 8025518:	613b      	str	r3, [r7, #16]
}
 802551a:	bf00      	nop
 802551c:	bf00      	nop
 802551e:	e7fd      	b.n	802551c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8025520:	697b      	ldr	r3, [r7, #20]
}
 8025522:	4618      	mov	r0, r3
 8025524:	3718      	adds	r7, #24
 8025526:	46bd      	mov	sp, r7
 8025528:	bd80      	pop	{r7, pc}
 802552a:	bf00      	nop
 802552c:	20000d88 	.word	0x20000d88
 8025530:	080277ac 	.word	0x080277ac
 8025534:	08025675 	.word	0x08025675
 8025538:	20000d8c 	.word	0x20000d8c

0802553c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802553c:	b580      	push	{r7, lr}
 802553e:	b08a      	sub	sp, #40	@ 0x28
 8025540:	af00      	add	r7, sp, #0
 8025542:	60f8      	str	r0, [r7, #12]
 8025544:	60b9      	str	r1, [r7, #8]
 8025546:	607a      	str	r2, [r7, #4]
 8025548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802554a:	2300      	movs	r3, #0
 802554c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802554e:	68fb      	ldr	r3, [r7, #12]
 8025550:	2b00      	cmp	r3, #0
 8025552:	d10b      	bne.n	802556c <xTimerGenericCommand+0x30>
	__asm volatile
 8025554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025558:	f383 8811 	msr	BASEPRI, r3
 802555c:	f3bf 8f6f 	isb	sy
 8025560:	f3bf 8f4f 	dsb	sy
 8025564:	623b      	str	r3, [r7, #32]
}
 8025566:	bf00      	nop
 8025568:	bf00      	nop
 802556a:	e7fd      	b.n	8025568 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802556c:	4b19      	ldr	r3, [pc, #100]	@ (80255d4 <xTimerGenericCommand+0x98>)
 802556e:	681b      	ldr	r3, [r3, #0]
 8025570:	2b00      	cmp	r3, #0
 8025572:	d02a      	beq.n	80255ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8025574:	68bb      	ldr	r3, [r7, #8]
 8025576:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8025578:	687b      	ldr	r3, [r7, #4]
 802557a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802557c:	68fb      	ldr	r3, [r7, #12]
 802557e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8025580:	68bb      	ldr	r3, [r7, #8]
 8025582:	2b05      	cmp	r3, #5
 8025584:	dc18      	bgt.n	80255b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8025586:	f7ff fead 	bl	80252e4 <xTaskGetSchedulerState>
 802558a:	4603      	mov	r3, r0
 802558c:	2b02      	cmp	r3, #2
 802558e:	d109      	bne.n	80255a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8025590:	4b10      	ldr	r3, [pc, #64]	@ (80255d4 <xTimerGenericCommand+0x98>)
 8025592:	6818      	ldr	r0, [r3, #0]
 8025594:	f107 0110 	add.w	r1, r7, #16
 8025598:	2300      	movs	r3, #0
 802559a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802559c:	f7fe fc88 	bl	8023eb0 <xQueueGenericSend>
 80255a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80255a2:	e012      	b.n	80255ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80255a4:	4b0b      	ldr	r3, [pc, #44]	@ (80255d4 <xTimerGenericCommand+0x98>)
 80255a6:	6818      	ldr	r0, [r3, #0]
 80255a8:	f107 0110 	add.w	r1, r7, #16
 80255ac:	2300      	movs	r3, #0
 80255ae:	2200      	movs	r2, #0
 80255b0:	f7fe fc7e 	bl	8023eb0 <xQueueGenericSend>
 80255b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80255b6:	e008      	b.n	80255ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80255b8:	4b06      	ldr	r3, [pc, #24]	@ (80255d4 <xTimerGenericCommand+0x98>)
 80255ba:	6818      	ldr	r0, [r3, #0]
 80255bc:	f107 0110 	add.w	r1, r7, #16
 80255c0:	2300      	movs	r3, #0
 80255c2:	683a      	ldr	r2, [r7, #0]
 80255c4:	f7fe fd76 	bl	80240b4 <xQueueGenericSendFromISR>
 80255c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80255ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80255cc:	4618      	mov	r0, r3
 80255ce:	3728      	adds	r7, #40	@ 0x28
 80255d0:	46bd      	mov	sp, r7
 80255d2:	bd80      	pop	{r7, pc}
 80255d4:	20000d88 	.word	0x20000d88

080255d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80255d8:	b580      	push	{r7, lr}
 80255da:	b088      	sub	sp, #32
 80255dc:	af02      	add	r7, sp, #8
 80255de:	6078      	str	r0, [r7, #4]
 80255e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80255e2:	4b23      	ldr	r3, [pc, #140]	@ (8025670 <prvProcessExpiredTimer+0x98>)
 80255e4:	681b      	ldr	r3, [r3, #0]
 80255e6:	68db      	ldr	r3, [r3, #12]
 80255e8:	68db      	ldr	r3, [r3, #12]
 80255ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80255ec:	697b      	ldr	r3, [r7, #20]
 80255ee:	3304      	adds	r3, #4
 80255f0:	4618      	mov	r0, r3
 80255f2:	f7fe fb29 	bl	8023c48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80255f6:	697b      	ldr	r3, [r7, #20]
 80255f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80255fc:	f003 0304 	and.w	r3, r3, #4
 8025600:	2b00      	cmp	r3, #0
 8025602:	d023      	beq.n	802564c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8025604:	697b      	ldr	r3, [r7, #20]
 8025606:	699a      	ldr	r2, [r3, #24]
 8025608:	687b      	ldr	r3, [r7, #4]
 802560a:	18d1      	adds	r1, r2, r3
 802560c:	687b      	ldr	r3, [r7, #4]
 802560e:	683a      	ldr	r2, [r7, #0]
 8025610:	6978      	ldr	r0, [r7, #20]
 8025612:	f000 f8d5 	bl	80257c0 <prvInsertTimerInActiveList>
 8025616:	4603      	mov	r3, r0
 8025618:	2b00      	cmp	r3, #0
 802561a:	d020      	beq.n	802565e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802561c:	2300      	movs	r3, #0
 802561e:	9300      	str	r3, [sp, #0]
 8025620:	2300      	movs	r3, #0
 8025622:	687a      	ldr	r2, [r7, #4]
 8025624:	2100      	movs	r1, #0
 8025626:	6978      	ldr	r0, [r7, #20]
 8025628:	f7ff ff88 	bl	802553c <xTimerGenericCommand>
 802562c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802562e:	693b      	ldr	r3, [r7, #16]
 8025630:	2b00      	cmp	r3, #0
 8025632:	d114      	bne.n	802565e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8025634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025638:	f383 8811 	msr	BASEPRI, r3
 802563c:	f3bf 8f6f 	isb	sy
 8025640:	f3bf 8f4f 	dsb	sy
 8025644:	60fb      	str	r3, [r7, #12]
}
 8025646:	bf00      	nop
 8025648:	bf00      	nop
 802564a:	e7fd      	b.n	8025648 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802564c:	697b      	ldr	r3, [r7, #20]
 802564e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8025652:	f023 0301 	bic.w	r3, r3, #1
 8025656:	b2da      	uxtb	r2, r3
 8025658:	697b      	ldr	r3, [r7, #20]
 802565a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802565e:	697b      	ldr	r3, [r7, #20]
 8025660:	6a1b      	ldr	r3, [r3, #32]
 8025662:	6978      	ldr	r0, [r7, #20]
 8025664:	4798      	blx	r3
}
 8025666:	bf00      	nop
 8025668:	3718      	adds	r7, #24
 802566a:	46bd      	mov	sp, r7
 802566c:	bd80      	pop	{r7, pc}
 802566e:	bf00      	nop
 8025670:	20000d80 	.word	0x20000d80

08025674 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8025674:	b580      	push	{r7, lr}
 8025676:	b084      	sub	sp, #16
 8025678:	af00      	add	r7, sp, #0
 802567a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802567c:	f107 0308 	add.w	r3, r7, #8
 8025680:	4618      	mov	r0, r3
 8025682:	f000 f859 	bl	8025738 <prvGetNextExpireTime>
 8025686:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8025688:	68bb      	ldr	r3, [r7, #8]
 802568a:	4619      	mov	r1, r3
 802568c:	68f8      	ldr	r0, [r7, #12]
 802568e:	f000 f805 	bl	802569c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8025692:	f000 f8d7 	bl	8025844 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8025696:	bf00      	nop
 8025698:	e7f0      	b.n	802567c <prvTimerTask+0x8>
	...

0802569c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 802569c:	b580      	push	{r7, lr}
 802569e:	b084      	sub	sp, #16
 80256a0:	af00      	add	r7, sp, #0
 80256a2:	6078      	str	r0, [r7, #4]
 80256a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80256a6:	f7ff fa37 	bl	8024b18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80256aa:	f107 0308 	add.w	r3, r7, #8
 80256ae:	4618      	mov	r0, r3
 80256b0:	f000 f866 	bl	8025780 <prvSampleTimeNow>
 80256b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80256b6:	68bb      	ldr	r3, [r7, #8]
 80256b8:	2b00      	cmp	r3, #0
 80256ba:	d130      	bne.n	802571e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80256bc:	683b      	ldr	r3, [r7, #0]
 80256be:	2b00      	cmp	r3, #0
 80256c0:	d10a      	bne.n	80256d8 <prvProcessTimerOrBlockTask+0x3c>
 80256c2:	687a      	ldr	r2, [r7, #4]
 80256c4:	68fb      	ldr	r3, [r7, #12]
 80256c6:	429a      	cmp	r2, r3
 80256c8:	d806      	bhi.n	80256d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80256ca:	f7ff fa33 	bl	8024b34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80256ce:	68f9      	ldr	r1, [r7, #12]
 80256d0:	6878      	ldr	r0, [r7, #4]
 80256d2:	f7ff ff81 	bl	80255d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80256d6:	e024      	b.n	8025722 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80256d8:	683b      	ldr	r3, [r7, #0]
 80256da:	2b00      	cmp	r3, #0
 80256dc:	d008      	beq.n	80256f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80256de:	4b13      	ldr	r3, [pc, #76]	@ (802572c <prvProcessTimerOrBlockTask+0x90>)
 80256e0:	681b      	ldr	r3, [r3, #0]
 80256e2:	681b      	ldr	r3, [r3, #0]
 80256e4:	2b00      	cmp	r3, #0
 80256e6:	d101      	bne.n	80256ec <prvProcessTimerOrBlockTask+0x50>
 80256e8:	2301      	movs	r3, #1
 80256ea:	e000      	b.n	80256ee <prvProcessTimerOrBlockTask+0x52>
 80256ec:	2300      	movs	r3, #0
 80256ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80256f0:	4b0f      	ldr	r3, [pc, #60]	@ (8025730 <prvProcessTimerOrBlockTask+0x94>)
 80256f2:	6818      	ldr	r0, [r3, #0]
 80256f4:	687a      	ldr	r2, [r7, #4]
 80256f6:	68fb      	ldr	r3, [r7, #12]
 80256f8:	1ad3      	subs	r3, r2, r3
 80256fa:	683a      	ldr	r2, [r7, #0]
 80256fc:	4619      	mov	r1, r3
 80256fe:	f7fe ff93 	bl	8024628 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8025702:	f7ff fa17 	bl	8024b34 <xTaskResumeAll>
 8025706:	4603      	mov	r3, r0
 8025708:	2b00      	cmp	r3, #0
 802570a:	d10a      	bne.n	8025722 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 802570c:	4b09      	ldr	r3, [pc, #36]	@ (8025734 <prvProcessTimerOrBlockTask+0x98>)
 802570e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8025712:	601a      	str	r2, [r3, #0]
 8025714:	f3bf 8f4f 	dsb	sy
 8025718:	f3bf 8f6f 	isb	sy
}
 802571c:	e001      	b.n	8025722 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 802571e:	f7ff fa09 	bl	8024b34 <xTaskResumeAll>
}
 8025722:	bf00      	nop
 8025724:	3710      	adds	r7, #16
 8025726:	46bd      	mov	sp, r7
 8025728:	bd80      	pop	{r7, pc}
 802572a:	bf00      	nop
 802572c:	20000d84 	.word	0x20000d84
 8025730:	20000d88 	.word	0x20000d88
 8025734:	e000ed04 	.word	0xe000ed04

08025738 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8025738:	b480      	push	{r7}
 802573a:	b085      	sub	sp, #20
 802573c:	af00      	add	r7, sp, #0
 802573e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8025740:	4b0e      	ldr	r3, [pc, #56]	@ (802577c <prvGetNextExpireTime+0x44>)
 8025742:	681b      	ldr	r3, [r3, #0]
 8025744:	681b      	ldr	r3, [r3, #0]
 8025746:	2b00      	cmp	r3, #0
 8025748:	d101      	bne.n	802574e <prvGetNextExpireTime+0x16>
 802574a:	2201      	movs	r2, #1
 802574c:	e000      	b.n	8025750 <prvGetNextExpireTime+0x18>
 802574e:	2200      	movs	r2, #0
 8025750:	687b      	ldr	r3, [r7, #4]
 8025752:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8025754:	687b      	ldr	r3, [r7, #4]
 8025756:	681b      	ldr	r3, [r3, #0]
 8025758:	2b00      	cmp	r3, #0
 802575a:	d105      	bne.n	8025768 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802575c:	4b07      	ldr	r3, [pc, #28]	@ (802577c <prvGetNextExpireTime+0x44>)
 802575e:	681b      	ldr	r3, [r3, #0]
 8025760:	68db      	ldr	r3, [r3, #12]
 8025762:	681b      	ldr	r3, [r3, #0]
 8025764:	60fb      	str	r3, [r7, #12]
 8025766:	e001      	b.n	802576c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8025768:	2300      	movs	r3, #0
 802576a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 802576c:	68fb      	ldr	r3, [r7, #12]
}
 802576e:	4618      	mov	r0, r3
 8025770:	3714      	adds	r7, #20
 8025772:	46bd      	mov	sp, r7
 8025774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025778:	4770      	bx	lr
 802577a:	bf00      	nop
 802577c:	20000d80 	.word	0x20000d80

08025780 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8025780:	b580      	push	{r7, lr}
 8025782:	b084      	sub	sp, #16
 8025784:	af00      	add	r7, sp, #0
 8025786:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8025788:	f7ff fa72 	bl	8024c70 <xTaskGetTickCount>
 802578c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802578e:	4b0b      	ldr	r3, [pc, #44]	@ (80257bc <prvSampleTimeNow+0x3c>)
 8025790:	681b      	ldr	r3, [r3, #0]
 8025792:	68fa      	ldr	r2, [r7, #12]
 8025794:	429a      	cmp	r2, r3
 8025796:	d205      	bcs.n	80257a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8025798:	f000 f93a 	bl	8025a10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 802579c:	687b      	ldr	r3, [r7, #4]
 802579e:	2201      	movs	r2, #1
 80257a0:	601a      	str	r2, [r3, #0]
 80257a2:	e002      	b.n	80257aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80257a4:	687b      	ldr	r3, [r7, #4]
 80257a6:	2200      	movs	r2, #0
 80257a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80257aa:	4a04      	ldr	r2, [pc, #16]	@ (80257bc <prvSampleTimeNow+0x3c>)
 80257ac:	68fb      	ldr	r3, [r7, #12]
 80257ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80257b0:	68fb      	ldr	r3, [r7, #12]
}
 80257b2:	4618      	mov	r0, r3
 80257b4:	3710      	adds	r7, #16
 80257b6:	46bd      	mov	sp, r7
 80257b8:	bd80      	pop	{r7, pc}
 80257ba:	bf00      	nop
 80257bc:	20000d90 	.word	0x20000d90

080257c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80257c0:	b580      	push	{r7, lr}
 80257c2:	b086      	sub	sp, #24
 80257c4:	af00      	add	r7, sp, #0
 80257c6:	60f8      	str	r0, [r7, #12]
 80257c8:	60b9      	str	r1, [r7, #8]
 80257ca:	607a      	str	r2, [r7, #4]
 80257cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80257ce:	2300      	movs	r3, #0
 80257d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80257d2:	68fb      	ldr	r3, [r7, #12]
 80257d4:	68ba      	ldr	r2, [r7, #8]
 80257d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80257d8:	68fb      	ldr	r3, [r7, #12]
 80257da:	68fa      	ldr	r2, [r7, #12]
 80257dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80257de:	68ba      	ldr	r2, [r7, #8]
 80257e0:	687b      	ldr	r3, [r7, #4]
 80257e2:	429a      	cmp	r2, r3
 80257e4:	d812      	bhi.n	802580c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80257e6:	687a      	ldr	r2, [r7, #4]
 80257e8:	683b      	ldr	r3, [r7, #0]
 80257ea:	1ad2      	subs	r2, r2, r3
 80257ec:	68fb      	ldr	r3, [r7, #12]
 80257ee:	699b      	ldr	r3, [r3, #24]
 80257f0:	429a      	cmp	r2, r3
 80257f2:	d302      	bcc.n	80257fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80257f4:	2301      	movs	r3, #1
 80257f6:	617b      	str	r3, [r7, #20]
 80257f8:	e01b      	b.n	8025832 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80257fa:	4b10      	ldr	r3, [pc, #64]	@ (802583c <prvInsertTimerInActiveList+0x7c>)
 80257fc:	681a      	ldr	r2, [r3, #0]
 80257fe:	68fb      	ldr	r3, [r7, #12]
 8025800:	3304      	adds	r3, #4
 8025802:	4619      	mov	r1, r3
 8025804:	4610      	mov	r0, r2
 8025806:	f7fe f9e6 	bl	8023bd6 <vListInsert>
 802580a:	e012      	b.n	8025832 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 802580c:	687a      	ldr	r2, [r7, #4]
 802580e:	683b      	ldr	r3, [r7, #0]
 8025810:	429a      	cmp	r2, r3
 8025812:	d206      	bcs.n	8025822 <prvInsertTimerInActiveList+0x62>
 8025814:	68ba      	ldr	r2, [r7, #8]
 8025816:	683b      	ldr	r3, [r7, #0]
 8025818:	429a      	cmp	r2, r3
 802581a:	d302      	bcc.n	8025822 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 802581c:	2301      	movs	r3, #1
 802581e:	617b      	str	r3, [r7, #20]
 8025820:	e007      	b.n	8025832 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8025822:	4b07      	ldr	r3, [pc, #28]	@ (8025840 <prvInsertTimerInActiveList+0x80>)
 8025824:	681a      	ldr	r2, [r3, #0]
 8025826:	68fb      	ldr	r3, [r7, #12]
 8025828:	3304      	adds	r3, #4
 802582a:	4619      	mov	r1, r3
 802582c:	4610      	mov	r0, r2
 802582e:	f7fe f9d2 	bl	8023bd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8025832:	697b      	ldr	r3, [r7, #20]
}
 8025834:	4618      	mov	r0, r3
 8025836:	3718      	adds	r7, #24
 8025838:	46bd      	mov	sp, r7
 802583a:	bd80      	pop	{r7, pc}
 802583c:	20000d84 	.word	0x20000d84
 8025840:	20000d80 	.word	0x20000d80

08025844 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8025844:	b580      	push	{r7, lr}
 8025846:	b08e      	sub	sp, #56	@ 0x38
 8025848:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802584a:	e0ce      	b.n	80259ea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802584c:	687b      	ldr	r3, [r7, #4]
 802584e:	2b00      	cmp	r3, #0
 8025850:	da19      	bge.n	8025886 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8025852:	1d3b      	adds	r3, r7, #4
 8025854:	3304      	adds	r3, #4
 8025856:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8025858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802585a:	2b00      	cmp	r3, #0
 802585c:	d10b      	bne.n	8025876 <prvProcessReceivedCommands+0x32>
	__asm volatile
 802585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025862:	f383 8811 	msr	BASEPRI, r3
 8025866:	f3bf 8f6f 	isb	sy
 802586a:	f3bf 8f4f 	dsb	sy
 802586e:	61fb      	str	r3, [r7, #28]
}
 8025870:	bf00      	nop
 8025872:	bf00      	nop
 8025874:	e7fd      	b.n	8025872 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8025876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025878:	681b      	ldr	r3, [r3, #0]
 802587a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802587c:	6850      	ldr	r0, [r2, #4]
 802587e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025880:	6892      	ldr	r2, [r2, #8]
 8025882:	4611      	mov	r1, r2
 8025884:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8025886:	687b      	ldr	r3, [r7, #4]
 8025888:	2b00      	cmp	r3, #0
 802588a:	f2c0 80ae 	blt.w	80259ea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802588e:	68fb      	ldr	r3, [r7, #12]
 8025890:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8025892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025894:	695b      	ldr	r3, [r3, #20]
 8025896:	2b00      	cmp	r3, #0
 8025898:	d004      	beq.n	80258a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802589a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802589c:	3304      	adds	r3, #4
 802589e:	4618      	mov	r0, r3
 80258a0:	f7fe f9d2 	bl	8023c48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80258a4:	463b      	mov	r3, r7
 80258a6:	4618      	mov	r0, r3
 80258a8:	f7ff ff6a 	bl	8025780 <prvSampleTimeNow>
 80258ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80258ae:	687b      	ldr	r3, [r7, #4]
 80258b0:	2b09      	cmp	r3, #9
 80258b2:	f200 8097 	bhi.w	80259e4 <prvProcessReceivedCommands+0x1a0>
 80258b6:	a201      	add	r2, pc, #4	@ (adr r2, 80258bc <prvProcessReceivedCommands+0x78>)
 80258b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80258bc:	080258e5 	.word	0x080258e5
 80258c0:	080258e5 	.word	0x080258e5
 80258c4:	080258e5 	.word	0x080258e5
 80258c8:	0802595b 	.word	0x0802595b
 80258cc:	0802596f 	.word	0x0802596f
 80258d0:	080259bb 	.word	0x080259bb
 80258d4:	080258e5 	.word	0x080258e5
 80258d8:	080258e5 	.word	0x080258e5
 80258dc:	0802595b 	.word	0x0802595b
 80258e0:	0802596f 	.word	0x0802596f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80258e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80258e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80258ea:	f043 0301 	orr.w	r3, r3, #1
 80258ee:	b2da      	uxtb	r2, r3
 80258f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80258f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80258f6:	68ba      	ldr	r2, [r7, #8]
 80258f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80258fa:	699b      	ldr	r3, [r3, #24]
 80258fc:	18d1      	adds	r1, r2, r3
 80258fe:	68bb      	ldr	r3, [r7, #8]
 8025900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8025904:	f7ff ff5c 	bl	80257c0 <prvInsertTimerInActiveList>
 8025908:	4603      	mov	r3, r0
 802590a:	2b00      	cmp	r3, #0
 802590c:	d06c      	beq.n	80259e8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802590e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025910:	6a1b      	ldr	r3, [r3, #32]
 8025912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8025914:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8025916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802591c:	f003 0304 	and.w	r3, r3, #4
 8025920:	2b00      	cmp	r3, #0
 8025922:	d061      	beq.n	80259e8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8025924:	68ba      	ldr	r2, [r7, #8]
 8025926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025928:	699b      	ldr	r3, [r3, #24]
 802592a:	441a      	add	r2, r3
 802592c:	2300      	movs	r3, #0
 802592e:	9300      	str	r3, [sp, #0]
 8025930:	2300      	movs	r3, #0
 8025932:	2100      	movs	r1, #0
 8025934:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8025936:	f7ff fe01 	bl	802553c <xTimerGenericCommand>
 802593a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 802593c:	6a3b      	ldr	r3, [r7, #32]
 802593e:	2b00      	cmp	r3, #0
 8025940:	d152      	bne.n	80259e8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8025942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025946:	f383 8811 	msr	BASEPRI, r3
 802594a:	f3bf 8f6f 	isb	sy
 802594e:	f3bf 8f4f 	dsb	sy
 8025952:	61bb      	str	r3, [r7, #24]
}
 8025954:	bf00      	nop
 8025956:	bf00      	nop
 8025958:	e7fd      	b.n	8025956 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802595c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8025960:	f023 0301 	bic.w	r3, r3, #1
 8025964:	b2da      	uxtb	r2, r3
 8025966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025968:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 802596c:	e03d      	b.n	80259ea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8025974:	f043 0301 	orr.w	r3, r3, #1
 8025978:	b2da      	uxtb	r2, r3
 802597a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802597c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8025980:	68ba      	ldr	r2, [r7, #8]
 8025982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025984:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8025986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025988:	699b      	ldr	r3, [r3, #24]
 802598a:	2b00      	cmp	r3, #0
 802598c:	d10b      	bne.n	80259a6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 802598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025992:	f383 8811 	msr	BASEPRI, r3
 8025996:	f3bf 8f6f 	isb	sy
 802599a:	f3bf 8f4f 	dsb	sy
 802599e:	617b      	str	r3, [r7, #20]
}
 80259a0:	bf00      	nop
 80259a2:	bf00      	nop
 80259a4:	e7fd      	b.n	80259a2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80259a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80259a8:	699a      	ldr	r2, [r3, #24]
 80259aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80259ac:	18d1      	adds	r1, r2, r3
 80259ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80259b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80259b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80259b4:	f7ff ff04 	bl	80257c0 <prvInsertTimerInActiveList>
					break;
 80259b8:	e017      	b.n	80259ea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80259ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80259bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80259c0:	f003 0302 	and.w	r3, r3, #2
 80259c4:	2b00      	cmp	r3, #0
 80259c6:	d103      	bne.n	80259d0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80259c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80259ca:	f000 fbe5 	bl	8026198 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80259ce:	e00c      	b.n	80259ea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80259d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80259d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80259d6:	f023 0301 	bic.w	r3, r3, #1
 80259da:	b2da      	uxtb	r2, r3
 80259dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80259de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80259e2:	e002      	b.n	80259ea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80259e4:	bf00      	nop
 80259e6:	e000      	b.n	80259ea <prvProcessReceivedCommands+0x1a6>
					break;
 80259e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80259ea:	4b08      	ldr	r3, [pc, #32]	@ (8025a0c <prvProcessReceivedCommands+0x1c8>)
 80259ec:	681b      	ldr	r3, [r3, #0]
 80259ee:	1d39      	adds	r1, r7, #4
 80259f0:	2200      	movs	r2, #0
 80259f2:	4618      	mov	r0, r3
 80259f4:	f7fe fbfc 	bl	80241f0 <xQueueReceive>
 80259f8:	4603      	mov	r3, r0
 80259fa:	2b00      	cmp	r3, #0
 80259fc:	f47f af26 	bne.w	802584c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8025a00:	bf00      	nop
 8025a02:	bf00      	nop
 8025a04:	3730      	adds	r7, #48	@ 0x30
 8025a06:	46bd      	mov	sp, r7
 8025a08:	bd80      	pop	{r7, pc}
 8025a0a:	bf00      	nop
 8025a0c:	20000d88 	.word	0x20000d88

08025a10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8025a10:	b580      	push	{r7, lr}
 8025a12:	b088      	sub	sp, #32
 8025a14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8025a16:	e049      	b.n	8025aac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8025a18:	4b2e      	ldr	r3, [pc, #184]	@ (8025ad4 <prvSwitchTimerLists+0xc4>)
 8025a1a:	681b      	ldr	r3, [r3, #0]
 8025a1c:	68db      	ldr	r3, [r3, #12]
 8025a1e:	681b      	ldr	r3, [r3, #0]
 8025a20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8025a22:	4b2c      	ldr	r3, [pc, #176]	@ (8025ad4 <prvSwitchTimerLists+0xc4>)
 8025a24:	681b      	ldr	r3, [r3, #0]
 8025a26:	68db      	ldr	r3, [r3, #12]
 8025a28:	68db      	ldr	r3, [r3, #12]
 8025a2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8025a2c:	68fb      	ldr	r3, [r7, #12]
 8025a2e:	3304      	adds	r3, #4
 8025a30:	4618      	mov	r0, r3
 8025a32:	f7fe f909 	bl	8023c48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8025a36:	68fb      	ldr	r3, [r7, #12]
 8025a38:	6a1b      	ldr	r3, [r3, #32]
 8025a3a:	68f8      	ldr	r0, [r7, #12]
 8025a3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8025a3e:	68fb      	ldr	r3, [r7, #12]
 8025a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8025a44:	f003 0304 	and.w	r3, r3, #4
 8025a48:	2b00      	cmp	r3, #0
 8025a4a:	d02f      	beq.n	8025aac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8025a4c:	68fb      	ldr	r3, [r7, #12]
 8025a4e:	699b      	ldr	r3, [r3, #24]
 8025a50:	693a      	ldr	r2, [r7, #16]
 8025a52:	4413      	add	r3, r2
 8025a54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8025a56:	68ba      	ldr	r2, [r7, #8]
 8025a58:	693b      	ldr	r3, [r7, #16]
 8025a5a:	429a      	cmp	r2, r3
 8025a5c:	d90e      	bls.n	8025a7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8025a5e:	68fb      	ldr	r3, [r7, #12]
 8025a60:	68ba      	ldr	r2, [r7, #8]
 8025a62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8025a64:	68fb      	ldr	r3, [r7, #12]
 8025a66:	68fa      	ldr	r2, [r7, #12]
 8025a68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8025a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8025ad4 <prvSwitchTimerLists+0xc4>)
 8025a6c:	681a      	ldr	r2, [r3, #0]
 8025a6e:	68fb      	ldr	r3, [r7, #12]
 8025a70:	3304      	adds	r3, #4
 8025a72:	4619      	mov	r1, r3
 8025a74:	4610      	mov	r0, r2
 8025a76:	f7fe f8ae 	bl	8023bd6 <vListInsert>
 8025a7a:	e017      	b.n	8025aac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8025a7c:	2300      	movs	r3, #0
 8025a7e:	9300      	str	r3, [sp, #0]
 8025a80:	2300      	movs	r3, #0
 8025a82:	693a      	ldr	r2, [r7, #16]
 8025a84:	2100      	movs	r1, #0
 8025a86:	68f8      	ldr	r0, [r7, #12]
 8025a88:	f7ff fd58 	bl	802553c <xTimerGenericCommand>
 8025a8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8025a8e:	687b      	ldr	r3, [r7, #4]
 8025a90:	2b00      	cmp	r3, #0
 8025a92:	d10b      	bne.n	8025aac <prvSwitchTimerLists+0x9c>
	__asm volatile
 8025a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025a98:	f383 8811 	msr	BASEPRI, r3
 8025a9c:	f3bf 8f6f 	isb	sy
 8025aa0:	f3bf 8f4f 	dsb	sy
 8025aa4:	603b      	str	r3, [r7, #0]
}
 8025aa6:	bf00      	nop
 8025aa8:	bf00      	nop
 8025aaa:	e7fd      	b.n	8025aa8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8025aac:	4b09      	ldr	r3, [pc, #36]	@ (8025ad4 <prvSwitchTimerLists+0xc4>)
 8025aae:	681b      	ldr	r3, [r3, #0]
 8025ab0:	681b      	ldr	r3, [r3, #0]
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	d1b0      	bne.n	8025a18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8025ab6:	4b07      	ldr	r3, [pc, #28]	@ (8025ad4 <prvSwitchTimerLists+0xc4>)
 8025ab8:	681b      	ldr	r3, [r3, #0]
 8025aba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8025abc:	4b06      	ldr	r3, [pc, #24]	@ (8025ad8 <prvSwitchTimerLists+0xc8>)
 8025abe:	681b      	ldr	r3, [r3, #0]
 8025ac0:	4a04      	ldr	r2, [pc, #16]	@ (8025ad4 <prvSwitchTimerLists+0xc4>)
 8025ac2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8025ac4:	4a04      	ldr	r2, [pc, #16]	@ (8025ad8 <prvSwitchTimerLists+0xc8>)
 8025ac6:	697b      	ldr	r3, [r7, #20]
 8025ac8:	6013      	str	r3, [r2, #0]
}
 8025aca:	bf00      	nop
 8025acc:	3718      	adds	r7, #24
 8025ace:	46bd      	mov	sp, r7
 8025ad0:	bd80      	pop	{r7, pc}
 8025ad2:	bf00      	nop
 8025ad4:	20000d80 	.word	0x20000d80
 8025ad8:	20000d84 	.word	0x20000d84

08025adc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8025adc:	b580      	push	{r7, lr}
 8025ade:	b082      	sub	sp, #8
 8025ae0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8025ae2:	f000 f969 	bl	8025db8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8025ae6:	4b15      	ldr	r3, [pc, #84]	@ (8025b3c <prvCheckForValidListAndQueue+0x60>)
 8025ae8:	681b      	ldr	r3, [r3, #0]
 8025aea:	2b00      	cmp	r3, #0
 8025aec:	d120      	bne.n	8025b30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8025aee:	4814      	ldr	r0, [pc, #80]	@ (8025b40 <prvCheckForValidListAndQueue+0x64>)
 8025af0:	f7fe f820 	bl	8023b34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8025af4:	4813      	ldr	r0, [pc, #76]	@ (8025b44 <prvCheckForValidListAndQueue+0x68>)
 8025af6:	f7fe f81d 	bl	8023b34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8025afa:	4b13      	ldr	r3, [pc, #76]	@ (8025b48 <prvCheckForValidListAndQueue+0x6c>)
 8025afc:	4a10      	ldr	r2, [pc, #64]	@ (8025b40 <prvCheckForValidListAndQueue+0x64>)
 8025afe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8025b00:	4b12      	ldr	r3, [pc, #72]	@ (8025b4c <prvCheckForValidListAndQueue+0x70>)
 8025b02:	4a10      	ldr	r2, [pc, #64]	@ (8025b44 <prvCheckForValidListAndQueue+0x68>)
 8025b04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8025b06:	2300      	movs	r3, #0
 8025b08:	9300      	str	r3, [sp, #0]
 8025b0a:	4b11      	ldr	r3, [pc, #68]	@ (8025b50 <prvCheckForValidListAndQueue+0x74>)
 8025b0c:	4a11      	ldr	r2, [pc, #68]	@ (8025b54 <prvCheckForValidListAndQueue+0x78>)
 8025b0e:	2110      	movs	r1, #16
 8025b10:	200a      	movs	r0, #10
 8025b12:	f7fe f92d 	bl	8023d70 <xQueueGenericCreateStatic>
 8025b16:	4603      	mov	r3, r0
 8025b18:	4a08      	ldr	r2, [pc, #32]	@ (8025b3c <prvCheckForValidListAndQueue+0x60>)
 8025b1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8025b1c:	4b07      	ldr	r3, [pc, #28]	@ (8025b3c <prvCheckForValidListAndQueue+0x60>)
 8025b1e:	681b      	ldr	r3, [r3, #0]
 8025b20:	2b00      	cmp	r3, #0
 8025b22:	d005      	beq.n	8025b30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8025b24:	4b05      	ldr	r3, [pc, #20]	@ (8025b3c <prvCheckForValidListAndQueue+0x60>)
 8025b26:	681b      	ldr	r3, [r3, #0]
 8025b28:	490b      	ldr	r1, [pc, #44]	@ (8025b58 <prvCheckForValidListAndQueue+0x7c>)
 8025b2a:	4618      	mov	r0, r3
 8025b2c:	f7fe fd52 	bl	80245d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8025b30:	f000 f974 	bl	8025e1c <vPortExitCritical>
}
 8025b34:	bf00      	nop
 8025b36:	46bd      	mov	sp, r7
 8025b38:	bd80      	pop	{r7, pc}
 8025b3a:	bf00      	nop
 8025b3c:	20000d88 	.word	0x20000d88
 8025b40:	20000d58 	.word	0x20000d58
 8025b44:	20000d6c 	.word	0x20000d6c
 8025b48:	20000d80 	.word	0x20000d80
 8025b4c:	20000d84 	.word	0x20000d84
 8025b50:	20000e34 	.word	0x20000e34
 8025b54:	20000d94 	.word	0x20000d94
 8025b58:	080277b4 	.word	0x080277b4

08025b5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8025b5c:	b480      	push	{r7}
 8025b5e:	b085      	sub	sp, #20
 8025b60:	af00      	add	r7, sp, #0
 8025b62:	60f8      	str	r0, [r7, #12]
 8025b64:	60b9      	str	r1, [r7, #8]
 8025b66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8025b68:	68fb      	ldr	r3, [r7, #12]
 8025b6a:	3b04      	subs	r3, #4
 8025b6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8025b6e:	68fb      	ldr	r3, [r7, #12]
 8025b70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8025b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8025b76:	68fb      	ldr	r3, [r7, #12]
 8025b78:	3b04      	subs	r3, #4
 8025b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8025b7c:	68bb      	ldr	r3, [r7, #8]
 8025b7e:	f023 0201 	bic.w	r2, r3, #1
 8025b82:	68fb      	ldr	r3, [r7, #12]
 8025b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8025b86:	68fb      	ldr	r3, [r7, #12]
 8025b88:	3b04      	subs	r3, #4
 8025b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8025b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8025bc0 <pxPortInitialiseStack+0x64>)
 8025b8e:	68fb      	ldr	r3, [r7, #12]
 8025b90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8025b92:	68fb      	ldr	r3, [r7, #12]
 8025b94:	3b14      	subs	r3, #20
 8025b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8025b98:	687a      	ldr	r2, [r7, #4]
 8025b9a:	68fb      	ldr	r3, [r7, #12]
 8025b9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8025b9e:	68fb      	ldr	r3, [r7, #12]
 8025ba0:	3b04      	subs	r3, #4
 8025ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8025ba4:	68fb      	ldr	r3, [r7, #12]
 8025ba6:	f06f 0202 	mvn.w	r2, #2
 8025baa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8025bac:	68fb      	ldr	r3, [r7, #12]
 8025bae:	3b20      	subs	r3, #32
 8025bb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8025bb2:	68fb      	ldr	r3, [r7, #12]
}
 8025bb4:	4618      	mov	r0, r3
 8025bb6:	3714      	adds	r7, #20
 8025bb8:	46bd      	mov	sp, r7
 8025bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bbe:	4770      	bx	lr
 8025bc0:	08025bc5 	.word	0x08025bc5

08025bc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8025bc4:	b480      	push	{r7}
 8025bc6:	b085      	sub	sp, #20
 8025bc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8025bca:	2300      	movs	r3, #0
 8025bcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8025bce:	4b13      	ldr	r3, [pc, #76]	@ (8025c1c <prvTaskExitError+0x58>)
 8025bd0:	681b      	ldr	r3, [r3, #0]
 8025bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025bd6:	d00b      	beq.n	8025bf0 <prvTaskExitError+0x2c>
	__asm volatile
 8025bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025bdc:	f383 8811 	msr	BASEPRI, r3
 8025be0:	f3bf 8f6f 	isb	sy
 8025be4:	f3bf 8f4f 	dsb	sy
 8025be8:	60fb      	str	r3, [r7, #12]
}
 8025bea:	bf00      	nop
 8025bec:	bf00      	nop
 8025bee:	e7fd      	b.n	8025bec <prvTaskExitError+0x28>
	__asm volatile
 8025bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025bf4:	f383 8811 	msr	BASEPRI, r3
 8025bf8:	f3bf 8f6f 	isb	sy
 8025bfc:	f3bf 8f4f 	dsb	sy
 8025c00:	60bb      	str	r3, [r7, #8]
}
 8025c02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8025c04:	bf00      	nop
 8025c06:	687b      	ldr	r3, [r7, #4]
 8025c08:	2b00      	cmp	r3, #0
 8025c0a:	d0fc      	beq.n	8025c06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8025c0c:	bf00      	nop
 8025c0e:	bf00      	nop
 8025c10:	3714      	adds	r7, #20
 8025c12:	46bd      	mov	sp, r7
 8025c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c18:	4770      	bx	lr
 8025c1a:	bf00      	nop
 8025c1c:	2000000c 	.word	0x2000000c

08025c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8025c20:	4b07      	ldr	r3, [pc, #28]	@ (8025c40 <pxCurrentTCBConst2>)
 8025c22:	6819      	ldr	r1, [r3, #0]
 8025c24:	6808      	ldr	r0, [r1, #0]
 8025c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c2a:	f380 8809 	msr	PSP, r0
 8025c2e:	f3bf 8f6f 	isb	sy
 8025c32:	f04f 0000 	mov.w	r0, #0
 8025c36:	f380 8811 	msr	BASEPRI, r0
 8025c3a:	4770      	bx	lr
 8025c3c:	f3af 8000 	nop.w

08025c40 <pxCurrentTCBConst2>:
 8025c40:	20000858 	.word	0x20000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8025c44:	bf00      	nop
 8025c46:	bf00      	nop

08025c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8025c48:	4808      	ldr	r0, [pc, #32]	@ (8025c6c <prvPortStartFirstTask+0x24>)
 8025c4a:	6800      	ldr	r0, [r0, #0]
 8025c4c:	6800      	ldr	r0, [r0, #0]
 8025c4e:	f380 8808 	msr	MSP, r0
 8025c52:	f04f 0000 	mov.w	r0, #0
 8025c56:	f380 8814 	msr	CONTROL, r0
 8025c5a:	b662      	cpsie	i
 8025c5c:	b661      	cpsie	f
 8025c5e:	f3bf 8f4f 	dsb	sy
 8025c62:	f3bf 8f6f 	isb	sy
 8025c66:	df00      	svc	0
 8025c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8025c6a:	bf00      	nop
 8025c6c:	e000ed08 	.word	0xe000ed08

08025c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8025c70:	b580      	push	{r7, lr}
 8025c72:	b086      	sub	sp, #24
 8025c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8025c76:	4b47      	ldr	r3, [pc, #284]	@ (8025d94 <xPortStartScheduler+0x124>)
 8025c78:	681b      	ldr	r3, [r3, #0]
 8025c7a:	4a47      	ldr	r2, [pc, #284]	@ (8025d98 <xPortStartScheduler+0x128>)
 8025c7c:	4293      	cmp	r3, r2
 8025c7e:	d10b      	bne.n	8025c98 <xPortStartScheduler+0x28>
	__asm volatile
 8025c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025c84:	f383 8811 	msr	BASEPRI, r3
 8025c88:	f3bf 8f6f 	isb	sy
 8025c8c:	f3bf 8f4f 	dsb	sy
 8025c90:	613b      	str	r3, [r7, #16]
}
 8025c92:	bf00      	nop
 8025c94:	bf00      	nop
 8025c96:	e7fd      	b.n	8025c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8025c98:	4b3e      	ldr	r3, [pc, #248]	@ (8025d94 <xPortStartScheduler+0x124>)
 8025c9a:	681b      	ldr	r3, [r3, #0]
 8025c9c:	4a3f      	ldr	r2, [pc, #252]	@ (8025d9c <xPortStartScheduler+0x12c>)
 8025c9e:	4293      	cmp	r3, r2
 8025ca0:	d10b      	bne.n	8025cba <xPortStartScheduler+0x4a>
	__asm volatile
 8025ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025ca6:	f383 8811 	msr	BASEPRI, r3
 8025caa:	f3bf 8f6f 	isb	sy
 8025cae:	f3bf 8f4f 	dsb	sy
 8025cb2:	60fb      	str	r3, [r7, #12]
}
 8025cb4:	bf00      	nop
 8025cb6:	bf00      	nop
 8025cb8:	e7fd      	b.n	8025cb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8025cba:	4b39      	ldr	r3, [pc, #228]	@ (8025da0 <xPortStartScheduler+0x130>)
 8025cbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8025cbe:	697b      	ldr	r3, [r7, #20]
 8025cc0:	781b      	ldrb	r3, [r3, #0]
 8025cc2:	b2db      	uxtb	r3, r3
 8025cc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8025cc6:	697b      	ldr	r3, [r7, #20]
 8025cc8:	22ff      	movs	r2, #255	@ 0xff
 8025cca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8025ccc:	697b      	ldr	r3, [r7, #20]
 8025cce:	781b      	ldrb	r3, [r3, #0]
 8025cd0:	b2db      	uxtb	r3, r3
 8025cd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8025cd4:	78fb      	ldrb	r3, [r7, #3]
 8025cd6:	b2db      	uxtb	r3, r3
 8025cd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8025cdc:	b2da      	uxtb	r2, r3
 8025cde:	4b31      	ldr	r3, [pc, #196]	@ (8025da4 <xPortStartScheduler+0x134>)
 8025ce0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8025ce2:	4b31      	ldr	r3, [pc, #196]	@ (8025da8 <xPortStartScheduler+0x138>)
 8025ce4:	2207      	movs	r2, #7
 8025ce6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8025ce8:	e009      	b.n	8025cfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8025cea:	4b2f      	ldr	r3, [pc, #188]	@ (8025da8 <xPortStartScheduler+0x138>)
 8025cec:	681b      	ldr	r3, [r3, #0]
 8025cee:	3b01      	subs	r3, #1
 8025cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8025da8 <xPortStartScheduler+0x138>)
 8025cf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8025cf4:	78fb      	ldrb	r3, [r7, #3]
 8025cf6:	b2db      	uxtb	r3, r3
 8025cf8:	005b      	lsls	r3, r3, #1
 8025cfa:	b2db      	uxtb	r3, r3
 8025cfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8025cfe:	78fb      	ldrb	r3, [r7, #3]
 8025d00:	b2db      	uxtb	r3, r3
 8025d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025d06:	2b80      	cmp	r3, #128	@ 0x80
 8025d08:	d0ef      	beq.n	8025cea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8025d0a:	4b27      	ldr	r3, [pc, #156]	@ (8025da8 <xPortStartScheduler+0x138>)
 8025d0c:	681b      	ldr	r3, [r3, #0]
 8025d0e:	f1c3 0307 	rsb	r3, r3, #7
 8025d12:	2b04      	cmp	r3, #4
 8025d14:	d00b      	beq.n	8025d2e <xPortStartScheduler+0xbe>
	__asm volatile
 8025d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025d1a:	f383 8811 	msr	BASEPRI, r3
 8025d1e:	f3bf 8f6f 	isb	sy
 8025d22:	f3bf 8f4f 	dsb	sy
 8025d26:	60bb      	str	r3, [r7, #8]
}
 8025d28:	bf00      	nop
 8025d2a:	bf00      	nop
 8025d2c:	e7fd      	b.n	8025d2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8025d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8025da8 <xPortStartScheduler+0x138>)
 8025d30:	681b      	ldr	r3, [r3, #0]
 8025d32:	021b      	lsls	r3, r3, #8
 8025d34:	4a1c      	ldr	r2, [pc, #112]	@ (8025da8 <xPortStartScheduler+0x138>)
 8025d36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8025d38:	4b1b      	ldr	r3, [pc, #108]	@ (8025da8 <xPortStartScheduler+0x138>)
 8025d3a:	681b      	ldr	r3, [r3, #0]
 8025d3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8025d40:	4a19      	ldr	r2, [pc, #100]	@ (8025da8 <xPortStartScheduler+0x138>)
 8025d42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8025d44:	687b      	ldr	r3, [r7, #4]
 8025d46:	b2da      	uxtb	r2, r3
 8025d48:	697b      	ldr	r3, [r7, #20]
 8025d4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8025d4c:	4b17      	ldr	r3, [pc, #92]	@ (8025dac <xPortStartScheduler+0x13c>)
 8025d4e:	681b      	ldr	r3, [r3, #0]
 8025d50:	4a16      	ldr	r2, [pc, #88]	@ (8025dac <xPortStartScheduler+0x13c>)
 8025d52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8025d56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8025d58:	4b14      	ldr	r3, [pc, #80]	@ (8025dac <xPortStartScheduler+0x13c>)
 8025d5a:	681b      	ldr	r3, [r3, #0]
 8025d5c:	4a13      	ldr	r2, [pc, #76]	@ (8025dac <xPortStartScheduler+0x13c>)
 8025d5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8025d62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8025d64:	f000 f8da 	bl	8025f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8025d68:	4b11      	ldr	r3, [pc, #68]	@ (8025db0 <xPortStartScheduler+0x140>)
 8025d6a:	2200      	movs	r2, #0
 8025d6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8025d6e:	f000 f8f9 	bl	8025f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8025d72:	4b10      	ldr	r3, [pc, #64]	@ (8025db4 <xPortStartScheduler+0x144>)
 8025d74:	681b      	ldr	r3, [r3, #0]
 8025d76:	4a0f      	ldr	r2, [pc, #60]	@ (8025db4 <xPortStartScheduler+0x144>)
 8025d78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8025d7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8025d7e:	f7ff ff63 	bl	8025c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8025d82:	f7ff f83f 	bl	8024e04 <vTaskSwitchContext>
	prvTaskExitError();
 8025d86:	f7ff ff1d 	bl	8025bc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8025d8a:	2300      	movs	r3, #0
}
 8025d8c:	4618      	mov	r0, r3
 8025d8e:	3718      	adds	r7, #24
 8025d90:	46bd      	mov	sp, r7
 8025d92:	bd80      	pop	{r7, pc}
 8025d94:	e000ed00 	.word	0xe000ed00
 8025d98:	410fc271 	.word	0x410fc271
 8025d9c:	410fc270 	.word	0x410fc270
 8025da0:	e000e400 	.word	0xe000e400
 8025da4:	20000e84 	.word	0x20000e84
 8025da8:	20000e88 	.word	0x20000e88
 8025dac:	e000ed20 	.word	0xe000ed20
 8025db0:	2000000c 	.word	0x2000000c
 8025db4:	e000ef34 	.word	0xe000ef34

08025db8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8025db8:	b480      	push	{r7}
 8025dba:	b083      	sub	sp, #12
 8025dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8025dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025dc2:	f383 8811 	msr	BASEPRI, r3
 8025dc6:	f3bf 8f6f 	isb	sy
 8025dca:	f3bf 8f4f 	dsb	sy
 8025dce:	607b      	str	r3, [r7, #4]
}
 8025dd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8025dd2:	4b10      	ldr	r3, [pc, #64]	@ (8025e14 <vPortEnterCritical+0x5c>)
 8025dd4:	681b      	ldr	r3, [r3, #0]
 8025dd6:	3301      	adds	r3, #1
 8025dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8025e14 <vPortEnterCritical+0x5c>)
 8025dda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8025ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8025e14 <vPortEnterCritical+0x5c>)
 8025dde:	681b      	ldr	r3, [r3, #0]
 8025de0:	2b01      	cmp	r3, #1
 8025de2:	d110      	bne.n	8025e06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8025de4:	4b0c      	ldr	r3, [pc, #48]	@ (8025e18 <vPortEnterCritical+0x60>)
 8025de6:	681b      	ldr	r3, [r3, #0]
 8025de8:	b2db      	uxtb	r3, r3
 8025dea:	2b00      	cmp	r3, #0
 8025dec:	d00b      	beq.n	8025e06 <vPortEnterCritical+0x4e>
	__asm volatile
 8025dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025df2:	f383 8811 	msr	BASEPRI, r3
 8025df6:	f3bf 8f6f 	isb	sy
 8025dfa:	f3bf 8f4f 	dsb	sy
 8025dfe:	603b      	str	r3, [r7, #0]
}
 8025e00:	bf00      	nop
 8025e02:	bf00      	nop
 8025e04:	e7fd      	b.n	8025e02 <vPortEnterCritical+0x4a>
	}
}
 8025e06:	bf00      	nop
 8025e08:	370c      	adds	r7, #12
 8025e0a:	46bd      	mov	sp, r7
 8025e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e10:	4770      	bx	lr
 8025e12:	bf00      	nop
 8025e14:	2000000c 	.word	0x2000000c
 8025e18:	e000ed04 	.word	0xe000ed04

08025e1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8025e1c:	b480      	push	{r7}
 8025e1e:	b083      	sub	sp, #12
 8025e20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8025e22:	4b12      	ldr	r3, [pc, #72]	@ (8025e6c <vPortExitCritical+0x50>)
 8025e24:	681b      	ldr	r3, [r3, #0]
 8025e26:	2b00      	cmp	r3, #0
 8025e28:	d10b      	bne.n	8025e42 <vPortExitCritical+0x26>
	__asm volatile
 8025e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025e2e:	f383 8811 	msr	BASEPRI, r3
 8025e32:	f3bf 8f6f 	isb	sy
 8025e36:	f3bf 8f4f 	dsb	sy
 8025e3a:	607b      	str	r3, [r7, #4]
}
 8025e3c:	bf00      	nop
 8025e3e:	bf00      	nop
 8025e40:	e7fd      	b.n	8025e3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8025e42:	4b0a      	ldr	r3, [pc, #40]	@ (8025e6c <vPortExitCritical+0x50>)
 8025e44:	681b      	ldr	r3, [r3, #0]
 8025e46:	3b01      	subs	r3, #1
 8025e48:	4a08      	ldr	r2, [pc, #32]	@ (8025e6c <vPortExitCritical+0x50>)
 8025e4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8025e4c:	4b07      	ldr	r3, [pc, #28]	@ (8025e6c <vPortExitCritical+0x50>)
 8025e4e:	681b      	ldr	r3, [r3, #0]
 8025e50:	2b00      	cmp	r3, #0
 8025e52:	d105      	bne.n	8025e60 <vPortExitCritical+0x44>
 8025e54:	2300      	movs	r3, #0
 8025e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8025e58:	683b      	ldr	r3, [r7, #0]
 8025e5a:	f383 8811 	msr	BASEPRI, r3
}
 8025e5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8025e60:	bf00      	nop
 8025e62:	370c      	adds	r7, #12
 8025e64:	46bd      	mov	sp, r7
 8025e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e6a:	4770      	bx	lr
 8025e6c:	2000000c 	.word	0x2000000c

08025e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8025e70:	f3ef 8009 	mrs	r0, PSP
 8025e74:	f3bf 8f6f 	isb	sy
 8025e78:	4b15      	ldr	r3, [pc, #84]	@ (8025ed0 <pxCurrentTCBConst>)
 8025e7a:	681a      	ldr	r2, [r3, #0]
 8025e7c:	f01e 0f10 	tst.w	lr, #16
 8025e80:	bf08      	it	eq
 8025e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8025e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e8a:	6010      	str	r0, [r2, #0]
 8025e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8025e90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8025e94:	f380 8811 	msr	BASEPRI, r0
 8025e98:	f3bf 8f4f 	dsb	sy
 8025e9c:	f3bf 8f6f 	isb	sy
 8025ea0:	f7fe ffb0 	bl	8024e04 <vTaskSwitchContext>
 8025ea4:	f04f 0000 	mov.w	r0, #0
 8025ea8:	f380 8811 	msr	BASEPRI, r0
 8025eac:	bc09      	pop	{r0, r3}
 8025eae:	6819      	ldr	r1, [r3, #0]
 8025eb0:	6808      	ldr	r0, [r1, #0]
 8025eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025eb6:	f01e 0f10 	tst.w	lr, #16
 8025eba:	bf08      	it	eq
 8025ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8025ec0:	f380 8809 	msr	PSP, r0
 8025ec4:	f3bf 8f6f 	isb	sy
 8025ec8:	4770      	bx	lr
 8025eca:	bf00      	nop
 8025ecc:	f3af 8000 	nop.w

08025ed0 <pxCurrentTCBConst>:
 8025ed0:	20000858 	.word	0x20000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8025ed4:	bf00      	nop
 8025ed6:	bf00      	nop

08025ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8025ed8:	b580      	push	{r7, lr}
 8025eda:	b082      	sub	sp, #8
 8025edc:	af00      	add	r7, sp, #0
	__asm volatile
 8025ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025ee2:	f383 8811 	msr	BASEPRI, r3
 8025ee6:	f3bf 8f6f 	isb	sy
 8025eea:	f3bf 8f4f 	dsb	sy
 8025eee:	607b      	str	r3, [r7, #4]
}
 8025ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8025ef2:	f7fe fecd 	bl	8024c90 <xTaskIncrementTick>
 8025ef6:	4603      	mov	r3, r0
 8025ef8:	2b00      	cmp	r3, #0
 8025efa:	d003      	beq.n	8025f04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8025efc:	4b06      	ldr	r3, [pc, #24]	@ (8025f18 <xPortSysTickHandler+0x40>)
 8025efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8025f02:	601a      	str	r2, [r3, #0]
 8025f04:	2300      	movs	r3, #0
 8025f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8025f08:	683b      	ldr	r3, [r7, #0]
 8025f0a:	f383 8811 	msr	BASEPRI, r3
}
 8025f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8025f10:	bf00      	nop
 8025f12:	3708      	adds	r7, #8
 8025f14:	46bd      	mov	sp, r7
 8025f16:	bd80      	pop	{r7, pc}
 8025f18:	e000ed04 	.word	0xe000ed04

08025f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8025f1c:	b480      	push	{r7}
 8025f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8025f20:	4b0b      	ldr	r3, [pc, #44]	@ (8025f50 <vPortSetupTimerInterrupt+0x34>)
 8025f22:	2200      	movs	r2, #0
 8025f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8025f26:	4b0b      	ldr	r3, [pc, #44]	@ (8025f54 <vPortSetupTimerInterrupt+0x38>)
 8025f28:	2200      	movs	r2, #0
 8025f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8025f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8025f58 <vPortSetupTimerInterrupt+0x3c>)
 8025f2e:	681b      	ldr	r3, [r3, #0]
 8025f30:	4a0a      	ldr	r2, [pc, #40]	@ (8025f5c <vPortSetupTimerInterrupt+0x40>)
 8025f32:	fba2 2303 	umull	r2, r3, r2, r3
 8025f36:	099b      	lsrs	r3, r3, #6
 8025f38:	4a09      	ldr	r2, [pc, #36]	@ (8025f60 <vPortSetupTimerInterrupt+0x44>)
 8025f3a:	3b01      	subs	r3, #1
 8025f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8025f3e:	4b04      	ldr	r3, [pc, #16]	@ (8025f50 <vPortSetupTimerInterrupt+0x34>)
 8025f40:	2207      	movs	r2, #7
 8025f42:	601a      	str	r2, [r3, #0]
}
 8025f44:	bf00      	nop
 8025f46:	46bd      	mov	sp, r7
 8025f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f4c:	4770      	bx	lr
 8025f4e:	bf00      	nop
 8025f50:	e000e010 	.word	0xe000e010
 8025f54:	e000e018 	.word	0xe000e018
 8025f58:	20000000 	.word	0x20000000
 8025f5c:	10624dd3 	.word	0x10624dd3
 8025f60:	e000e014 	.word	0xe000e014

08025f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8025f64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8025f74 <vPortEnableVFP+0x10>
 8025f68:	6801      	ldr	r1, [r0, #0]
 8025f6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8025f6e:	6001      	str	r1, [r0, #0]
 8025f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8025f72:	bf00      	nop
 8025f74:	e000ed88 	.word	0xe000ed88

08025f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8025f78:	b480      	push	{r7}
 8025f7a:	b085      	sub	sp, #20
 8025f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8025f7e:	f3ef 8305 	mrs	r3, IPSR
 8025f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8025f84:	68fb      	ldr	r3, [r7, #12]
 8025f86:	2b0f      	cmp	r3, #15
 8025f88:	d915      	bls.n	8025fb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8025f8a:	4a18      	ldr	r2, [pc, #96]	@ (8025fec <vPortValidateInterruptPriority+0x74>)
 8025f8c:	68fb      	ldr	r3, [r7, #12]
 8025f8e:	4413      	add	r3, r2
 8025f90:	781b      	ldrb	r3, [r3, #0]
 8025f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8025f94:	4b16      	ldr	r3, [pc, #88]	@ (8025ff0 <vPortValidateInterruptPriority+0x78>)
 8025f96:	781b      	ldrb	r3, [r3, #0]
 8025f98:	7afa      	ldrb	r2, [r7, #11]
 8025f9a:	429a      	cmp	r2, r3
 8025f9c:	d20b      	bcs.n	8025fb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8025f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025fa2:	f383 8811 	msr	BASEPRI, r3
 8025fa6:	f3bf 8f6f 	isb	sy
 8025faa:	f3bf 8f4f 	dsb	sy
 8025fae:	607b      	str	r3, [r7, #4]
}
 8025fb0:	bf00      	nop
 8025fb2:	bf00      	nop
 8025fb4:	e7fd      	b.n	8025fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8025fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8025ff4 <vPortValidateInterruptPriority+0x7c>)
 8025fb8:	681b      	ldr	r3, [r3, #0]
 8025fba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8025fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8025ff8 <vPortValidateInterruptPriority+0x80>)
 8025fc0:	681b      	ldr	r3, [r3, #0]
 8025fc2:	429a      	cmp	r2, r3
 8025fc4:	d90b      	bls.n	8025fde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8025fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8025fca:	f383 8811 	msr	BASEPRI, r3
 8025fce:	f3bf 8f6f 	isb	sy
 8025fd2:	f3bf 8f4f 	dsb	sy
 8025fd6:	603b      	str	r3, [r7, #0]
}
 8025fd8:	bf00      	nop
 8025fda:	bf00      	nop
 8025fdc:	e7fd      	b.n	8025fda <vPortValidateInterruptPriority+0x62>
	}
 8025fde:	bf00      	nop
 8025fe0:	3714      	adds	r7, #20
 8025fe2:	46bd      	mov	sp, r7
 8025fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fe8:	4770      	bx	lr
 8025fea:	bf00      	nop
 8025fec:	e000e3f0 	.word	0xe000e3f0
 8025ff0:	20000e84 	.word	0x20000e84
 8025ff4:	e000ed0c 	.word	0xe000ed0c
 8025ff8:	20000e88 	.word	0x20000e88

08025ffc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8025ffc:	b580      	push	{r7, lr}
 8025ffe:	b08a      	sub	sp, #40	@ 0x28
 8026000:	af00      	add	r7, sp, #0
 8026002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8026004:	2300      	movs	r3, #0
 8026006:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8026008:	f7fe fd86 	bl	8024b18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 802600c:	4b5c      	ldr	r3, [pc, #368]	@ (8026180 <pvPortMalloc+0x184>)
 802600e:	681b      	ldr	r3, [r3, #0]
 8026010:	2b00      	cmp	r3, #0
 8026012:	d101      	bne.n	8026018 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8026014:	f000 f924 	bl	8026260 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8026018:	4b5a      	ldr	r3, [pc, #360]	@ (8026184 <pvPortMalloc+0x188>)
 802601a:	681a      	ldr	r2, [r3, #0]
 802601c:	687b      	ldr	r3, [r7, #4]
 802601e:	4013      	ands	r3, r2
 8026020:	2b00      	cmp	r3, #0
 8026022:	f040 8095 	bne.w	8026150 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8026026:	687b      	ldr	r3, [r7, #4]
 8026028:	2b00      	cmp	r3, #0
 802602a:	d01e      	beq.n	802606a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 802602c:	2208      	movs	r2, #8
 802602e:	687b      	ldr	r3, [r7, #4]
 8026030:	4413      	add	r3, r2
 8026032:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8026034:	687b      	ldr	r3, [r7, #4]
 8026036:	f003 0307 	and.w	r3, r3, #7
 802603a:	2b00      	cmp	r3, #0
 802603c:	d015      	beq.n	802606a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802603e:	687b      	ldr	r3, [r7, #4]
 8026040:	f023 0307 	bic.w	r3, r3, #7
 8026044:	3308      	adds	r3, #8
 8026046:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8026048:	687b      	ldr	r3, [r7, #4]
 802604a:	f003 0307 	and.w	r3, r3, #7
 802604e:	2b00      	cmp	r3, #0
 8026050:	d00b      	beq.n	802606a <pvPortMalloc+0x6e>
	__asm volatile
 8026052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026056:	f383 8811 	msr	BASEPRI, r3
 802605a:	f3bf 8f6f 	isb	sy
 802605e:	f3bf 8f4f 	dsb	sy
 8026062:	617b      	str	r3, [r7, #20]
}
 8026064:	bf00      	nop
 8026066:	bf00      	nop
 8026068:	e7fd      	b.n	8026066 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 802606a:	687b      	ldr	r3, [r7, #4]
 802606c:	2b00      	cmp	r3, #0
 802606e:	d06f      	beq.n	8026150 <pvPortMalloc+0x154>
 8026070:	4b45      	ldr	r3, [pc, #276]	@ (8026188 <pvPortMalloc+0x18c>)
 8026072:	681b      	ldr	r3, [r3, #0]
 8026074:	687a      	ldr	r2, [r7, #4]
 8026076:	429a      	cmp	r2, r3
 8026078:	d86a      	bhi.n	8026150 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 802607a:	4b44      	ldr	r3, [pc, #272]	@ (802618c <pvPortMalloc+0x190>)
 802607c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802607e:	4b43      	ldr	r3, [pc, #268]	@ (802618c <pvPortMalloc+0x190>)
 8026080:	681b      	ldr	r3, [r3, #0]
 8026082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8026084:	e004      	b.n	8026090 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8026086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026088:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 802608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802608c:	681b      	ldr	r3, [r3, #0]
 802608e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8026090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026092:	685b      	ldr	r3, [r3, #4]
 8026094:	687a      	ldr	r2, [r7, #4]
 8026096:	429a      	cmp	r2, r3
 8026098:	d903      	bls.n	80260a2 <pvPortMalloc+0xa6>
 802609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802609c:	681b      	ldr	r3, [r3, #0]
 802609e:	2b00      	cmp	r3, #0
 80260a0:	d1f1      	bne.n	8026086 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80260a2:	4b37      	ldr	r3, [pc, #220]	@ (8026180 <pvPortMalloc+0x184>)
 80260a4:	681b      	ldr	r3, [r3, #0]
 80260a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80260a8:	429a      	cmp	r2, r3
 80260aa:	d051      	beq.n	8026150 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80260ac:	6a3b      	ldr	r3, [r7, #32]
 80260ae:	681b      	ldr	r3, [r3, #0]
 80260b0:	2208      	movs	r2, #8
 80260b2:	4413      	add	r3, r2
 80260b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80260b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80260b8:	681a      	ldr	r2, [r3, #0]
 80260ba:	6a3b      	ldr	r3, [r7, #32]
 80260bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80260be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80260c0:	685a      	ldr	r2, [r3, #4]
 80260c2:	687b      	ldr	r3, [r7, #4]
 80260c4:	1ad2      	subs	r2, r2, r3
 80260c6:	2308      	movs	r3, #8
 80260c8:	005b      	lsls	r3, r3, #1
 80260ca:	429a      	cmp	r2, r3
 80260cc:	d920      	bls.n	8026110 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80260ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80260d0:	687b      	ldr	r3, [r7, #4]
 80260d2:	4413      	add	r3, r2
 80260d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80260d6:	69bb      	ldr	r3, [r7, #24]
 80260d8:	f003 0307 	and.w	r3, r3, #7
 80260dc:	2b00      	cmp	r3, #0
 80260de:	d00b      	beq.n	80260f8 <pvPortMalloc+0xfc>
	__asm volatile
 80260e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80260e4:	f383 8811 	msr	BASEPRI, r3
 80260e8:	f3bf 8f6f 	isb	sy
 80260ec:	f3bf 8f4f 	dsb	sy
 80260f0:	613b      	str	r3, [r7, #16]
}
 80260f2:	bf00      	nop
 80260f4:	bf00      	nop
 80260f6:	e7fd      	b.n	80260f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80260f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80260fa:	685a      	ldr	r2, [r3, #4]
 80260fc:	687b      	ldr	r3, [r7, #4]
 80260fe:	1ad2      	subs	r2, r2, r3
 8026100:	69bb      	ldr	r3, [r7, #24]
 8026102:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8026104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026106:	687a      	ldr	r2, [r7, #4]
 8026108:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 802610a:	69b8      	ldr	r0, [r7, #24]
 802610c:	f000 f90a 	bl	8026324 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8026110:	4b1d      	ldr	r3, [pc, #116]	@ (8026188 <pvPortMalloc+0x18c>)
 8026112:	681a      	ldr	r2, [r3, #0]
 8026114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026116:	685b      	ldr	r3, [r3, #4]
 8026118:	1ad3      	subs	r3, r2, r3
 802611a:	4a1b      	ldr	r2, [pc, #108]	@ (8026188 <pvPortMalloc+0x18c>)
 802611c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802611e:	4b1a      	ldr	r3, [pc, #104]	@ (8026188 <pvPortMalloc+0x18c>)
 8026120:	681a      	ldr	r2, [r3, #0]
 8026122:	4b1b      	ldr	r3, [pc, #108]	@ (8026190 <pvPortMalloc+0x194>)
 8026124:	681b      	ldr	r3, [r3, #0]
 8026126:	429a      	cmp	r2, r3
 8026128:	d203      	bcs.n	8026132 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 802612a:	4b17      	ldr	r3, [pc, #92]	@ (8026188 <pvPortMalloc+0x18c>)
 802612c:	681b      	ldr	r3, [r3, #0]
 802612e:	4a18      	ldr	r2, [pc, #96]	@ (8026190 <pvPortMalloc+0x194>)
 8026130:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8026132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026134:	685a      	ldr	r2, [r3, #4]
 8026136:	4b13      	ldr	r3, [pc, #76]	@ (8026184 <pvPortMalloc+0x188>)
 8026138:	681b      	ldr	r3, [r3, #0]
 802613a:	431a      	orrs	r2, r3
 802613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802613e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8026140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026142:	2200      	movs	r2, #0
 8026144:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8026146:	4b13      	ldr	r3, [pc, #76]	@ (8026194 <pvPortMalloc+0x198>)
 8026148:	681b      	ldr	r3, [r3, #0]
 802614a:	3301      	adds	r3, #1
 802614c:	4a11      	ldr	r2, [pc, #68]	@ (8026194 <pvPortMalloc+0x198>)
 802614e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8026150:	f7fe fcf0 	bl	8024b34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8026154:	69fb      	ldr	r3, [r7, #28]
 8026156:	f003 0307 	and.w	r3, r3, #7
 802615a:	2b00      	cmp	r3, #0
 802615c:	d00b      	beq.n	8026176 <pvPortMalloc+0x17a>
	__asm volatile
 802615e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8026162:	f383 8811 	msr	BASEPRI, r3
 8026166:	f3bf 8f6f 	isb	sy
 802616a:	f3bf 8f4f 	dsb	sy
 802616e:	60fb      	str	r3, [r7, #12]
}
 8026170:	bf00      	nop
 8026172:	bf00      	nop
 8026174:	e7fd      	b.n	8026172 <pvPortMalloc+0x176>
	return pvReturn;
 8026176:	69fb      	ldr	r3, [r7, #28]
}
 8026178:	4618      	mov	r0, r3
 802617a:	3728      	adds	r7, #40	@ 0x28
 802617c:	46bd      	mov	sp, r7
 802617e:	bd80      	pop	{r7, pc}
 8026180:	20004a94 	.word	0x20004a94
 8026184:	20004aa8 	.word	0x20004aa8
 8026188:	20004a98 	.word	0x20004a98
 802618c:	20004a8c 	.word	0x20004a8c
 8026190:	20004a9c 	.word	0x20004a9c
 8026194:	20004aa0 	.word	0x20004aa0

08026198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8026198:	b580      	push	{r7, lr}
 802619a:	b086      	sub	sp, #24
 802619c:	af00      	add	r7, sp, #0
 802619e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80261a0:	687b      	ldr	r3, [r7, #4]
 80261a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80261a4:	687b      	ldr	r3, [r7, #4]
 80261a6:	2b00      	cmp	r3, #0
 80261a8:	d04f      	beq.n	802624a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80261aa:	2308      	movs	r3, #8
 80261ac:	425b      	negs	r3, r3
 80261ae:	697a      	ldr	r2, [r7, #20]
 80261b0:	4413      	add	r3, r2
 80261b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80261b4:	697b      	ldr	r3, [r7, #20]
 80261b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80261b8:	693b      	ldr	r3, [r7, #16]
 80261ba:	685a      	ldr	r2, [r3, #4]
 80261bc:	4b25      	ldr	r3, [pc, #148]	@ (8026254 <vPortFree+0xbc>)
 80261be:	681b      	ldr	r3, [r3, #0]
 80261c0:	4013      	ands	r3, r2
 80261c2:	2b00      	cmp	r3, #0
 80261c4:	d10b      	bne.n	80261de <vPortFree+0x46>
	__asm volatile
 80261c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80261ca:	f383 8811 	msr	BASEPRI, r3
 80261ce:	f3bf 8f6f 	isb	sy
 80261d2:	f3bf 8f4f 	dsb	sy
 80261d6:	60fb      	str	r3, [r7, #12]
}
 80261d8:	bf00      	nop
 80261da:	bf00      	nop
 80261dc:	e7fd      	b.n	80261da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80261de:	693b      	ldr	r3, [r7, #16]
 80261e0:	681b      	ldr	r3, [r3, #0]
 80261e2:	2b00      	cmp	r3, #0
 80261e4:	d00b      	beq.n	80261fe <vPortFree+0x66>
	__asm volatile
 80261e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80261ea:	f383 8811 	msr	BASEPRI, r3
 80261ee:	f3bf 8f6f 	isb	sy
 80261f2:	f3bf 8f4f 	dsb	sy
 80261f6:	60bb      	str	r3, [r7, #8]
}
 80261f8:	bf00      	nop
 80261fa:	bf00      	nop
 80261fc:	e7fd      	b.n	80261fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80261fe:	693b      	ldr	r3, [r7, #16]
 8026200:	685a      	ldr	r2, [r3, #4]
 8026202:	4b14      	ldr	r3, [pc, #80]	@ (8026254 <vPortFree+0xbc>)
 8026204:	681b      	ldr	r3, [r3, #0]
 8026206:	4013      	ands	r3, r2
 8026208:	2b00      	cmp	r3, #0
 802620a:	d01e      	beq.n	802624a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 802620c:	693b      	ldr	r3, [r7, #16]
 802620e:	681b      	ldr	r3, [r3, #0]
 8026210:	2b00      	cmp	r3, #0
 8026212:	d11a      	bne.n	802624a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8026214:	693b      	ldr	r3, [r7, #16]
 8026216:	685a      	ldr	r2, [r3, #4]
 8026218:	4b0e      	ldr	r3, [pc, #56]	@ (8026254 <vPortFree+0xbc>)
 802621a:	681b      	ldr	r3, [r3, #0]
 802621c:	43db      	mvns	r3, r3
 802621e:	401a      	ands	r2, r3
 8026220:	693b      	ldr	r3, [r7, #16]
 8026222:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8026224:	f7fe fc78 	bl	8024b18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8026228:	693b      	ldr	r3, [r7, #16]
 802622a:	685a      	ldr	r2, [r3, #4]
 802622c:	4b0a      	ldr	r3, [pc, #40]	@ (8026258 <vPortFree+0xc0>)
 802622e:	681b      	ldr	r3, [r3, #0]
 8026230:	4413      	add	r3, r2
 8026232:	4a09      	ldr	r2, [pc, #36]	@ (8026258 <vPortFree+0xc0>)
 8026234:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8026236:	6938      	ldr	r0, [r7, #16]
 8026238:	f000 f874 	bl	8026324 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 802623c:	4b07      	ldr	r3, [pc, #28]	@ (802625c <vPortFree+0xc4>)
 802623e:	681b      	ldr	r3, [r3, #0]
 8026240:	3301      	adds	r3, #1
 8026242:	4a06      	ldr	r2, [pc, #24]	@ (802625c <vPortFree+0xc4>)
 8026244:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8026246:	f7fe fc75 	bl	8024b34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802624a:	bf00      	nop
 802624c:	3718      	adds	r7, #24
 802624e:	46bd      	mov	sp, r7
 8026250:	bd80      	pop	{r7, pc}
 8026252:	bf00      	nop
 8026254:	20004aa8 	.word	0x20004aa8
 8026258:	20004a98 	.word	0x20004a98
 802625c:	20004aa4 	.word	0x20004aa4

08026260 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8026260:	b480      	push	{r7}
 8026262:	b085      	sub	sp, #20
 8026264:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8026266:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 802626a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 802626c:	4b27      	ldr	r3, [pc, #156]	@ (802630c <prvHeapInit+0xac>)
 802626e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8026270:	68fb      	ldr	r3, [r7, #12]
 8026272:	f003 0307 	and.w	r3, r3, #7
 8026276:	2b00      	cmp	r3, #0
 8026278:	d00c      	beq.n	8026294 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802627a:	68fb      	ldr	r3, [r7, #12]
 802627c:	3307      	adds	r3, #7
 802627e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8026280:	68fb      	ldr	r3, [r7, #12]
 8026282:	f023 0307 	bic.w	r3, r3, #7
 8026286:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8026288:	68ba      	ldr	r2, [r7, #8]
 802628a:	68fb      	ldr	r3, [r7, #12]
 802628c:	1ad3      	subs	r3, r2, r3
 802628e:	4a1f      	ldr	r2, [pc, #124]	@ (802630c <prvHeapInit+0xac>)
 8026290:	4413      	add	r3, r2
 8026292:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8026294:	68fb      	ldr	r3, [r7, #12]
 8026296:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8026298:	4a1d      	ldr	r2, [pc, #116]	@ (8026310 <prvHeapInit+0xb0>)
 802629a:	687b      	ldr	r3, [r7, #4]
 802629c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 802629e:	4b1c      	ldr	r3, [pc, #112]	@ (8026310 <prvHeapInit+0xb0>)
 80262a0:	2200      	movs	r2, #0
 80262a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80262a4:	687b      	ldr	r3, [r7, #4]
 80262a6:	68ba      	ldr	r2, [r7, #8]
 80262a8:	4413      	add	r3, r2
 80262aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80262ac:	2208      	movs	r2, #8
 80262ae:	68fb      	ldr	r3, [r7, #12]
 80262b0:	1a9b      	subs	r3, r3, r2
 80262b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80262b4:	68fb      	ldr	r3, [r7, #12]
 80262b6:	f023 0307 	bic.w	r3, r3, #7
 80262ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80262bc:	68fb      	ldr	r3, [r7, #12]
 80262be:	4a15      	ldr	r2, [pc, #84]	@ (8026314 <prvHeapInit+0xb4>)
 80262c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80262c2:	4b14      	ldr	r3, [pc, #80]	@ (8026314 <prvHeapInit+0xb4>)
 80262c4:	681b      	ldr	r3, [r3, #0]
 80262c6:	2200      	movs	r2, #0
 80262c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80262ca:	4b12      	ldr	r3, [pc, #72]	@ (8026314 <prvHeapInit+0xb4>)
 80262cc:	681b      	ldr	r3, [r3, #0]
 80262ce:	2200      	movs	r2, #0
 80262d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80262d2:	687b      	ldr	r3, [r7, #4]
 80262d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80262d6:	683b      	ldr	r3, [r7, #0]
 80262d8:	68fa      	ldr	r2, [r7, #12]
 80262da:	1ad2      	subs	r2, r2, r3
 80262dc:	683b      	ldr	r3, [r7, #0]
 80262de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80262e0:	4b0c      	ldr	r3, [pc, #48]	@ (8026314 <prvHeapInit+0xb4>)
 80262e2:	681a      	ldr	r2, [r3, #0]
 80262e4:	683b      	ldr	r3, [r7, #0]
 80262e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80262e8:	683b      	ldr	r3, [r7, #0]
 80262ea:	685b      	ldr	r3, [r3, #4]
 80262ec:	4a0a      	ldr	r2, [pc, #40]	@ (8026318 <prvHeapInit+0xb8>)
 80262ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80262f0:	683b      	ldr	r3, [r7, #0]
 80262f2:	685b      	ldr	r3, [r3, #4]
 80262f4:	4a09      	ldr	r2, [pc, #36]	@ (802631c <prvHeapInit+0xbc>)
 80262f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80262f8:	4b09      	ldr	r3, [pc, #36]	@ (8026320 <prvHeapInit+0xc0>)
 80262fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80262fe:	601a      	str	r2, [r3, #0]
}
 8026300:	bf00      	nop
 8026302:	3714      	adds	r7, #20
 8026304:	46bd      	mov	sp, r7
 8026306:	f85d 7b04 	ldr.w	r7, [sp], #4
 802630a:	4770      	bx	lr
 802630c:	20000e8c 	.word	0x20000e8c
 8026310:	20004a8c 	.word	0x20004a8c
 8026314:	20004a94 	.word	0x20004a94
 8026318:	20004a9c 	.word	0x20004a9c
 802631c:	20004a98 	.word	0x20004a98
 8026320:	20004aa8 	.word	0x20004aa8

08026324 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8026324:	b480      	push	{r7}
 8026326:	b085      	sub	sp, #20
 8026328:	af00      	add	r7, sp, #0
 802632a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 802632c:	4b28      	ldr	r3, [pc, #160]	@ (80263d0 <prvInsertBlockIntoFreeList+0xac>)
 802632e:	60fb      	str	r3, [r7, #12]
 8026330:	e002      	b.n	8026338 <prvInsertBlockIntoFreeList+0x14>
 8026332:	68fb      	ldr	r3, [r7, #12]
 8026334:	681b      	ldr	r3, [r3, #0]
 8026336:	60fb      	str	r3, [r7, #12]
 8026338:	68fb      	ldr	r3, [r7, #12]
 802633a:	681b      	ldr	r3, [r3, #0]
 802633c:	687a      	ldr	r2, [r7, #4]
 802633e:	429a      	cmp	r2, r3
 8026340:	d8f7      	bhi.n	8026332 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8026342:	68fb      	ldr	r3, [r7, #12]
 8026344:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8026346:	68fb      	ldr	r3, [r7, #12]
 8026348:	685b      	ldr	r3, [r3, #4]
 802634a:	68ba      	ldr	r2, [r7, #8]
 802634c:	4413      	add	r3, r2
 802634e:	687a      	ldr	r2, [r7, #4]
 8026350:	429a      	cmp	r2, r3
 8026352:	d108      	bne.n	8026366 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8026354:	68fb      	ldr	r3, [r7, #12]
 8026356:	685a      	ldr	r2, [r3, #4]
 8026358:	687b      	ldr	r3, [r7, #4]
 802635a:	685b      	ldr	r3, [r3, #4]
 802635c:	441a      	add	r2, r3
 802635e:	68fb      	ldr	r3, [r7, #12]
 8026360:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8026362:	68fb      	ldr	r3, [r7, #12]
 8026364:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8026366:	687b      	ldr	r3, [r7, #4]
 8026368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802636a:	687b      	ldr	r3, [r7, #4]
 802636c:	685b      	ldr	r3, [r3, #4]
 802636e:	68ba      	ldr	r2, [r7, #8]
 8026370:	441a      	add	r2, r3
 8026372:	68fb      	ldr	r3, [r7, #12]
 8026374:	681b      	ldr	r3, [r3, #0]
 8026376:	429a      	cmp	r2, r3
 8026378:	d118      	bne.n	80263ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802637a:	68fb      	ldr	r3, [r7, #12]
 802637c:	681a      	ldr	r2, [r3, #0]
 802637e:	4b15      	ldr	r3, [pc, #84]	@ (80263d4 <prvInsertBlockIntoFreeList+0xb0>)
 8026380:	681b      	ldr	r3, [r3, #0]
 8026382:	429a      	cmp	r2, r3
 8026384:	d00d      	beq.n	80263a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8026386:	687b      	ldr	r3, [r7, #4]
 8026388:	685a      	ldr	r2, [r3, #4]
 802638a:	68fb      	ldr	r3, [r7, #12]
 802638c:	681b      	ldr	r3, [r3, #0]
 802638e:	685b      	ldr	r3, [r3, #4]
 8026390:	441a      	add	r2, r3
 8026392:	687b      	ldr	r3, [r7, #4]
 8026394:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8026396:	68fb      	ldr	r3, [r7, #12]
 8026398:	681b      	ldr	r3, [r3, #0]
 802639a:	681a      	ldr	r2, [r3, #0]
 802639c:	687b      	ldr	r3, [r7, #4]
 802639e:	601a      	str	r2, [r3, #0]
 80263a0:	e008      	b.n	80263b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80263a2:	4b0c      	ldr	r3, [pc, #48]	@ (80263d4 <prvInsertBlockIntoFreeList+0xb0>)
 80263a4:	681a      	ldr	r2, [r3, #0]
 80263a6:	687b      	ldr	r3, [r7, #4]
 80263a8:	601a      	str	r2, [r3, #0]
 80263aa:	e003      	b.n	80263b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80263ac:	68fb      	ldr	r3, [r7, #12]
 80263ae:	681a      	ldr	r2, [r3, #0]
 80263b0:	687b      	ldr	r3, [r7, #4]
 80263b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80263b4:	68fa      	ldr	r2, [r7, #12]
 80263b6:	687b      	ldr	r3, [r7, #4]
 80263b8:	429a      	cmp	r2, r3
 80263ba:	d002      	beq.n	80263c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80263bc:	68fb      	ldr	r3, [r7, #12]
 80263be:	687a      	ldr	r2, [r7, #4]
 80263c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80263c2:	bf00      	nop
 80263c4:	3714      	adds	r7, #20
 80263c6:	46bd      	mov	sp, r7
 80263c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263cc:	4770      	bx	lr
 80263ce:	bf00      	nop
 80263d0:	20004a8c 	.word	0x20004a8c
 80263d4:	20004a94 	.word	0x20004a94

080263d8 <malloc>:
 80263d8:	4b02      	ldr	r3, [pc, #8]	@ (80263e4 <malloc+0xc>)
 80263da:	4601      	mov	r1, r0
 80263dc:	6818      	ldr	r0, [r3, #0]
 80263de:	f000 b825 	b.w	802642c <_malloc_r>
 80263e2:	bf00      	nop
 80263e4:	20000010 	.word	0x20000010

080263e8 <sbrk_aligned>:
 80263e8:	b570      	push	{r4, r5, r6, lr}
 80263ea:	4e0f      	ldr	r6, [pc, #60]	@ (8026428 <sbrk_aligned+0x40>)
 80263ec:	460c      	mov	r4, r1
 80263ee:	6831      	ldr	r1, [r6, #0]
 80263f0:	4605      	mov	r5, r0
 80263f2:	b911      	cbnz	r1, 80263fa <sbrk_aligned+0x12>
 80263f4:	f000 f910 	bl	8026618 <_sbrk_r>
 80263f8:	6030      	str	r0, [r6, #0]
 80263fa:	4621      	mov	r1, r4
 80263fc:	4628      	mov	r0, r5
 80263fe:	f000 f90b 	bl	8026618 <_sbrk_r>
 8026402:	1c43      	adds	r3, r0, #1
 8026404:	d103      	bne.n	802640e <sbrk_aligned+0x26>
 8026406:	f04f 34ff 	mov.w	r4, #4294967295
 802640a:	4620      	mov	r0, r4
 802640c:	bd70      	pop	{r4, r5, r6, pc}
 802640e:	1cc4      	adds	r4, r0, #3
 8026410:	f024 0403 	bic.w	r4, r4, #3
 8026414:	42a0      	cmp	r0, r4
 8026416:	d0f8      	beq.n	802640a <sbrk_aligned+0x22>
 8026418:	1a21      	subs	r1, r4, r0
 802641a:	4628      	mov	r0, r5
 802641c:	f000 f8fc 	bl	8026618 <_sbrk_r>
 8026420:	3001      	adds	r0, #1
 8026422:	d1f2      	bne.n	802640a <sbrk_aligned+0x22>
 8026424:	e7ef      	b.n	8026406 <sbrk_aligned+0x1e>
 8026426:	bf00      	nop
 8026428:	20004aac 	.word	0x20004aac

0802642c <_malloc_r>:
 802642c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026430:	1ccd      	adds	r5, r1, #3
 8026432:	f025 0503 	bic.w	r5, r5, #3
 8026436:	3508      	adds	r5, #8
 8026438:	2d0c      	cmp	r5, #12
 802643a:	bf38      	it	cc
 802643c:	250c      	movcc	r5, #12
 802643e:	2d00      	cmp	r5, #0
 8026440:	4606      	mov	r6, r0
 8026442:	db01      	blt.n	8026448 <_malloc_r+0x1c>
 8026444:	42a9      	cmp	r1, r5
 8026446:	d904      	bls.n	8026452 <_malloc_r+0x26>
 8026448:	230c      	movs	r3, #12
 802644a:	6033      	str	r3, [r6, #0]
 802644c:	2000      	movs	r0, #0
 802644e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026452:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8026528 <_malloc_r+0xfc>
 8026456:	f000 f869 	bl	802652c <__malloc_lock>
 802645a:	f8d8 3000 	ldr.w	r3, [r8]
 802645e:	461c      	mov	r4, r3
 8026460:	bb44      	cbnz	r4, 80264b4 <_malloc_r+0x88>
 8026462:	4629      	mov	r1, r5
 8026464:	4630      	mov	r0, r6
 8026466:	f7ff ffbf 	bl	80263e8 <sbrk_aligned>
 802646a:	1c43      	adds	r3, r0, #1
 802646c:	4604      	mov	r4, r0
 802646e:	d158      	bne.n	8026522 <_malloc_r+0xf6>
 8026470:	f8d8 4000 	ldr.w	r4, [r8]
 8026474:	4627      	mov	r7, r4
 8026476:	2f00      	cmp	r7, #0
 8026478:	d143      	bne.n	8026502 <_malloc_r+0xd6>
 802647a:	2c00      	cmp	r4, #0
 802647c:	d04b      	beq.n	8026516 <_malloc_r+0xea>
 802647e:	6823      	ldr	r3, [r4, #0]
 8026480:	4639      	mov	r1, r7
 8026482:	4630      	mov	r0, r6
 8026484:	eb04 0903 	add.w	r9, r4, r3
 8026488:	f000 f8c6 	bl	8026618 <_sbrk_r>
 802648c:	4581      	cmp	r9, r0
 802648e:	d142      	bne.n	8026516 <_malloc_r+0xea>
 8026490:	6821      	ldr	r1, [r4, #0]
 8026492:	1a6d      	subs	r5, r5, r1
 8026494:	4629      	mov	r1, r5
 8026496:	4630      	mov	r0, r6
 8026498:	f7ff ffa6 	bl	80263e8 <sbrk_aligned>
 802649c:	3001      	adds	r0, #1
 802649e:	d03a      	beq.n	8026516 <_malloc_r+0xea>
 80264a0:	6823      	ldr	r3, [r4, #0]
 80264a2:	442b      	add	r3, r5
 80264a4:	6023      	str	r3, [r4, #0]
 80264a6:	f8d8 3000 	ldr.w	r3, [r8]
 80264aa:	685a      	ldr	r2, [r3, #4]
 80264ac:	bb62      	cbnz	r2, 8026508 <_malloc_r+0xdc>
 80264ae:	f8c8 7000 	str.w	r7, [r8]
 80264b2:	e00f      	b.n	80264d4 <_malloc_r+0xa8>
 80264b4:	6822      	ldr	r2, [r4, #0]
 80264b6:	1b52      	subs	r2, r2, r5
 80264b8:	d420      	bmi.n	80264fc <_malloc_r+0xd0>
 80264ba:	2a0b      	cmp	r2, #11
 80264bc:	d917      	bls.n	80264ee <_malloc_r+0xc2>
 80264be:	1961      	adds	r1, r4, r5
 80264c0:	42a3      	cmp	r3, r4
 80264c2:	6025      	str	r5, [r4, #0]
 80264c4:	bf18      	it	ne
 80264c6:	6059      	strne	r1, [r3, #4]
 80264c8:	6863      	ldr	r3, [r4, #4]
 80264ca:	bf08      	it	eq
 80264cc:	f8c8 1000 	streq.w	r1, [r8]
 80264d0:	5162      	str	r2, [r4, r5]
 80264d2:	604b      	str	r3, [r1, #4]
 80264d4:	4630      	mov	r0, r6
 80264d6:	f000 f82f 	bl	8026538 <__malloc_unlock>
 80264da:	f104 000b 	add.w	r0, r4, #11
 80264de:	1d23      	adds	r3, r4, #4
 80264e0:	f020 0007 	bic.w	r0, r0, #7
 80264e4:	1ac2      	subs	r2, r0, r3
 80264e6:	bf1c      	itt	ne
 80264e8:	1a1b      	subne	r3, r3, r0
 80264ea:	50a3      	strne	r3, [r4, r2]
 80264ec:	e7af      	b.n	802644e <_malloc_r+0x22>
 80264ee:	6862      	ldr	r2, [r4, #4]
 80264f0:	42a3      	cmp	r3, r4
 80264f2:	bf0c      	ite	eq
 80264f4:	f8c8 2000 	streq.w	r2, [r8]
 80264f8:	605a      	strne	r2, [r3, #4]
 80264fa:	e7eb      	b.n	80264d4 <_malloc_r+0xa8>
 80264fc:	4623      	mov	r3, r4
 80264fe:	6864      	ldr	r4, [r4, #4]
 8026500:	e7ae      	b.n	8026460 <_malloc_r+0x34>
 8026502:	463c      	mov	r4, r7
 8026504:	687f      	ldr	r7, [r7, #4]
 8026506:	e7b6      	b.n	8026476 <_malloc_r+0x4a>
 8026508:	461a      	mov	r2, r3
 802650a:	685b      	ldr	r3, [r3, #4]
 802650c:	42a3      	cmp	r3, r4
 802650e:	d1fb      	bne.n	8026508 <_malloc_r+0xdc>
 8026510:	2300      	movs	r3, #0
 8026512:	6053      	str	r3, [r2, #4]
 8026514:	e7de      	b.n	80264d4 <_malloc_r+0xa8>
 8026516:	230c      	movs	r3, #12
 8026518:	6033      	str	r3, [r6, #0]
 802651a:	4630      	mov	r0, r6
 802651c:	f000 f80c 	bl	8026538 <__malloc_unlock>
 8026520:	e794      	b.n	802644c <_malloc_r+0x20>
 8026522:	6005      	str	r5, [r0, #0]
 8026524:	e7d6      	b.n	80264d4 <_malloc_r+0xa8>
 8026526:	bf00      	nop
 8026528:	20004ab0 	.word	0x20004ab0

0802652c <__malloc_lock>:
 802652c:	4801      	ldr	r0, [pc, #4]	@ (8026534 <__malloc_lock+0x8>)
 802652e:	f000 b8ad 	b.w	802668c <__retarget_lock_acquire_recursive>
 8026532:	bf00      	nop
 8026534:	20004bf0 	.word	0x20004bf0

08026538 <__malloc_unlock>:
 8026538:	4801      	ldr	r0, [pc, #4]	@ (8026540 <__malloc_unlock+0x8>)
 802653a:	f000 b8a8 	b.w	802668e <__retarget_lock_release_recursive>
 802653e:	bf00      	nop
 8026540:	20004bf0 	.word	0x20004bf0

08026544 <siprintf>:
 8026544:	b40e      	push	{r1, r2, r3}
 8026546:	b500      	push	{lr}
 8026548:	b09c      	sub	sp, #112	@ 0x70
 802654a:	ab1d      	add	r3, sp, #116	@ 0x74
 802654c:	9002      	str	r0, [sp, #8]
 802654e:	9006      	str	r0, [sp, #24]
 8026550:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8026554:	4809      	ldr	r0, [pc, #36]	@ (802657c <siprintf+0x38>)
 8026556:	9107      	str	r1, [sp, #28]
 8026558:	9104      	str	r1, [sp, #16]
 802655a:	4909      	ldr	r1, [pc, #36]	@ (8026580 <siprintf+0x3c>)
 802655c:	f853 2b04 	ldr.w	r2, [r3], #4
 8026560:	9105      	str	r1, [sp, #20]
 8026562:	6800      	ldr	r0, [r0, #0]
 8026564:	9301      	str	r3, [sp, #4]
 8026566:	a902      	add	r1, sp, #8
 8026568:	f000 f946 	bl	80267f8 <_svfiprintf_r>
 802656c:	9b02      	ldr	r3, [sp, #8]
 802656e:	2200      	movs	r2, #0
 8026570:	701a      	strb	r2, [r3, #0]
 8026572:	b01c      	add	sp, #112	@ 0x70
 8026574:	f85d eb04 	ldr.w	lr, [sp], #4
 8026578:	b003      	add	sp, #12
 802657a:	4770      	bx	lr
 802657c:	20000010 	.word	0x20000010
 8026580:	ffff0208 	.word	0xffff0208

08026584 <siscanf>:
 8026584:	b40e      	push	{r1, r2, r3}
 8026586:	b530      	push	{r4, r5, lr}
 8026588:	b09c      	sub	sp, #112	@ 0x70
 802658a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802658c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8026590:	f854 5b04 	ldr.w	r5, [r4], #4
 8026594:	f8ad 2014 	strh.w	r2, [sp, #20]
 8026598:	9002      	str	r0, [sp, #8]
 802659a:	9006      	str	r0, [sp, #24]
 802659c:	f7f9 fe20 	bl	80201e0 <strlen>
 80265a0:	4b0b      	ldr	r3, [pc, #44]	@ (80265d0 <siscanf+0x4c>)
 80265a2:	9003      	str	r0, [sp, #12]
 80265a4:	9007      	str	r0, [sp, #28]
 80265a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80265a8:	480a      	ldr	r0, [pc, #40]	@ (80265d4 <siscanf+0x50>)
 80265aa:	9401      	str	r4, [sp, #4]
 80265ac:	2300      	movs	r3, #0
 80265ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80265b0:	9314      	str	r3, [sp, #80]	@ 0x50
 80265b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80265b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80265ba:	462a      	mov	r2, r5
 80265bc:	4623      	mov	r3, r4
 80265be:	a902      	add	r1, sp, #8
 80265c0:	6800      	ldr	r0, [r0, #0]
 80265c2:	f000 fa6d 	bl	8026aa0 <__ssvfiscanf_r>
 80265c6:	b01c      	add	sp, #112	@ 0x70
 80265c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80265cc:	b003      	add	sp, #12
 80265ce:	4770      	bx	lr
 80265d0:	080265d9 	.word	0x080265d9
 80265d4:	20000010 	.word	0x20000010

080265d8 <__seofread>:
 80265d8:	2000      	movs	r0, #0
 80265da:	4770      	bx	lr

080265dc <memset>:
 80265dc:	4402      	add	r2, r0
 80265de:	4603      	mov	r3, r0
 80265e0:	4293      	cmp	r3, r2
 80265e2:	d100      	bne.n	80265e6 <memset+0xa>
 80265e4:	4770      	bx	lr
 80265e6:	f803 1b01 	strb.w	r1, [r3], #1
 80265ea:	e7f9      	b.n	80265e0 <memset+0x4>

080265ec <strstr>:
 80265ec:	780a      	ldrb	r2, [r1, #0]
 80265ee:	b570      	push	{r4, r5, r6, lr}
 80265f0:	b96a      	cbnz	r2, 802660e <strstr+0x22>
 80265f2:	bd70      	pop	{r4, r5, r6, pc}
 80265f4:	429a      	cmp	r2, r3
 80265f6:	d109      	bne.n	802660c <strstr+0x20>
 80265f8:	460c      	mov	r4, r1
 80265fa:	4605      	mov	r5, r0
 80265fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8026600:	2b00      	cmp	r3, #0
 8026602:	d0f6      	beq.n	80265f2 <strstr+0x6>
 8026604:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8026608:	429e      	cmp	r6, r3
 802660a:	d0f7      	beq.n	80265fc <strstr+0x10>
 802660c:	3001      	adds	r0, #1
 802660e:	7803      	ldrb	r3, [r0, #0]
 8026610:	2b00      	cmp	r3, #0
 8026612:	d1ef      	bne.n	80265f4 <strstr+0x8>
 8026614:	4618      	mov	r0, r3
 8026616:	e7ec      	b.n	80265f2 <strstr+0x6>

08026618 <_sbrk_r>:
 8026618:	b538      	push	{r3, r4, r5, lr}
 802661a:	4d06      	ldr	r5, [pc, #24]	@ (8026634 <_sbrk_r+0x1c>)
 802661c:	2300      	movs	r3, #0
 802661e:	4604      	mov	r4, r0
 8026620:	4608      	mov	r0, r1
 8026622:	602b      	str	r3, [r5, #0]
 8026624:	f7fa fbd8 	bl	8020dd8 <_sbrk>
 8026628:	1c43      	adds	r3, r0, #1
 802662a:	d102      	bne.n	8026632 <_sbrk_r+0x1a>
 802662c:	682b      	ldr	r3, [r5, #0]
 802662e:	b103      	cbz	r3, 8026632 <_sbrk_r+0x1a>
 8026630:	6023      	str	r3, [r4, #0]
 8026632:	bd38      	pop	{r3, r4, r5, pc}
 8026634:	20004bec 	.word	0x20004bec

08026638 <__errno>:
 8026638:	4b01      	ldr	r3, [pc, #4]	@ (8026640 <__errno+0x8>)
 802663a:	6818      	ldr	r0, [r3, #0]
 802663c:	4770      	bx	lr
 802663e:	bf00      	nop
 8026640:	20000010 	.word	0x20000010

08026644 <__libc_init_array>:
 8026644:	b570      	push	{r4, r5, r6, lr}
 8026646:	4d0d      	ldr	r5, [pc, #52]	@ (802667c <__libc_init_array+0x38>)
 8026648:	4c0d      	ldr	r4, [pc, #52]	@ (8026680 <__libc_init_array+0x3c>)
 802664a:	1b64      	subs	r4, r4, r5
 802664c:	10a4      	asrs	r4, r4, #2
 802664e:	2600      	movs	r6, #0
 8026650:	42a6      	cmp	r6, r4
 8026652:	d109      	bne.n	8026668 <__libc_init_array+0x24>
 8026654:	4d0b      	ldr	r5, [pc, #44]	@ (8026684 <__libc_init_array+0x40>)
 8026656:	4c0c      	ldr	r4, [pc, #48]	@ (8026688 <__libc_init_array+0x44>)
 8026658:	f001 f822 	bl	80276a0 <_init>
 802665c:	1b64      	subs	r4, r4, r5
 802665e:	10a4      	asrs	r4, r4, #2
 8026660:	2600      	movs	r6, #0
 8026662:	42a6      	cmp	r6, r4
 8026664:	d105      	bne.n	8026672 <__libc_init_array+0x2e>
 8026666:	bd70      	pop	{r4, r5, r6, pc}
 8026668:	f855 3b04 	ldr.w	r3, [r5], #4
 802666c:	4798      	blx	r3
 802666e:	3601      	adds	r6, #1
 8026670:	e7ee      	b.n	8026650 <__libc_init_array+0xc>
 8026672:	f855 3b04 	ldr.w	r3, [r5], #4
 8026676:	4798      	blx	r3
 8026678:	3601      	adds	r6, #1
 802667a:	e7f2      	b.n	8026662 <__libc_init_array+0x1e>
 802667c:	080279ac 	.word	0x080279ac
 8026680:	080279ac 	.word	0x080279ac
 8026684:	080279ac 	.word	0x080279ac
 8026688:	080279b0 	.word	0x080279b0

0802668c <__retarget_lock_acquire_recursive>:
 802668c:	4770      	bx	lr

0802668e <__retarget_lock_release_recursive>:
 802668e:	4770      	bx	lr

08026690 <memcpy>:
 8026690:	440a      	add	r2, r1
 8026692:	4291      	cmp	r1, r2
 8026694:	f100 33ff 	add.w	r3, r0, #4294967295
 8026698:	d100      	bne.n	802669c <memcpy+0xc>
 802669a:	4770      	bx	lr
 802669c:	b510      	push	{r4, lr}
 802669e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80266a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80266a6:	4291      	cmp	r1, r2
 80266a8:	d1f9      	bne.n	802669e <memcpy+0xe>
 80266aa:	bd10      	pop	{r4, pc}

080266ac <_free_r>:
 80266ac:	b538      	push	{r3, r4, r5, lr}
 80266ae:	4605      	mov	r5, r0
 80266b0:	2900      	cmp	r1, #0
 80266b2:	d041      	beq.n	8026738 <_free_r+0x8c>
 80266b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80266b8:	1f0c      	subs	r4, r1, #4
 80266ba:	2b00      	cmp	r3, #0
 80266bc:	bfb8      	it	lt
 80266be:	18e4      	addlt	r4, r4, r3
 80266c0:	f7ff ff34 	bl	802652c <__malloc_lock>
 80266c4:	4a1d      	ldr	r2, [pc, #116]	@ (802673c <_free_r+0x90>)
 80266c6:	6813      	ldr	r3, [r2, #0]
 80266c8:	b933      	cbnz	r3, 80266d8 <_free_r+0x2c>
 80266ca:	6063      	str	r3, [r4, #4]
 80266cc:	6014      	str	r4, [r2, #0]
 80266ce:	4628      	mov	r0, r5
 80266d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80266d4:	f7ff bf30 	b.w	8026538 <__malloc_unlock>
 80266d8:	42a3      	cmp	r3, r4
 80266da:	d908      	bls.n	80266ee <_free_r+0x42>
 80266dc:	6820      	ldr	r0, [r4, #0]
 80266de:	1821      	adds	r1, r4, r0
 80266e0:	428b      	cmp	r3, r1
 80266e2:	bf01      	itttt	eq
 80266e4:	6819      	ldreq	r1, [r3, #0]
 80266e6:	685b      	ldreq	r3, [r3, #4]
 80266e8:	1809      	addeq	r1, r1, r0
 80266ea:	6021      	streq	r1, [r4, #0]
 80266ec:	e7ed      	b.n	80266ca <_free_r+0x1e>
 80266ee:	461a      	mov	r2, r3
 80266f0:	685b      	ldr	r3, [r3, #4]
 80266f2:	b10b      	cbz	r3, 80266f8 <_free_r+0x4c>
 80266f4:	42a3      	cmp	r3, r4
 80266f6:	d9fa      	bls.n	80266ee <_free_r+0x42>
 80266f8:	6811      	ldr	r1, [r2, #0]
 80266fa:	1850      	adds	r0, r2, r1
 80266fc:	42a0      	cmp	r0, r4
 80266fe:	d10b      	bne.n	8026718 <_free_r+0x6c>
 8026700:	6820      	ldr	r0, [r4, #0]
 8026702:	4401      	add	r1, r0
 8026704:	1850      	adds	r0, r2, r1
 8026706:	4283      	cmp	r3, r0
 8026708:	6011      	str	r1, [r2, #0]
 802670a:	d1e0      	bne.n	80266ce <_free_r+0x22>
 802670c:	6818      	ldr	r0, [r3, #0]
 802670e:	685b      	ldr	r3, [r3, #4]
 8026710:	6053      	str	r3, [r2, #4]
 8026712:	4408      	add	r0, r1
 8026714:	6010      	str	r0, [r2, #0]
 8026716:	e7da      	b.n	80266ce <_free_r+0x22>
 8026718:	d902      	bls.n	8026720 <_free_r+0x74>
 802671a:	230c      	movs	r3, #12
 802671c:	602b      	str	r3, [r5, #0]
 802671e:	e7d6      	b.n	80266ce <_free_r+0x22>
 8026720:	6820      	ldr	r0, [r4, #0]
 8026722:	1821      	adds	r1, r4, r0
 8026724:	428b      	cmp	r3, r1
 8026726:	bf04      	itt	eq
 8026728:	6819      	ldreq	r1, [r3, #0]
 802672a:	685b      	ldreq	r3, [r3, #4]
 802672c:	6063      	str	r3, [r4, #4]
 802672e:	bf04      	itt	eq
 8026730:	1809      	addeq	r1, r1, r0
 8026732:	6021      	streq	r1, [r4, #0]
 8026734:	6054      	str	r4, [r2, #4]
 8026736:	e7ca      	b.n	80266ce <_free_r+0x22>
 8026738:	bd38      	pop	{r3, r4, r5, pc}
 802673a:	bf00      	nop
 802673c:	20004ab0 	.word	0x20004ab0

08026740 <__ssputs_r>:
 8026740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026744:	688e      	ldr	r6, [r1, #8]
 8026746:	461f      	mov	r7, r3
 8026748:	42be      	cmp	r6, r7
 802674a:	680b      	ldr	r3, [r1, #0]
 802674c:	4682      	mov	sl, r0
 802674e:	460c      	mov	r4, r1
 8026750:	4690      	mov	r8, r2
 8026752:	d82d      	bhi.n	80267b0 <__ssputs_r+0x70>
 8026754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026758:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802675c:	d026      	beq.n	80267ac <__ssputs_r+0x6c>
 802675e:	6965      	ldr	r5, [r4, #20]
 8026760:	6909      	ldr	r1, [r1, #16]
 8026762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026766:	eba3 0901 	sub.w	r9, r3, r1
 802676a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802676e:	1c7b      	adds	r3, r7, #1
 8026770:	444b      	add	r3, r9
 8026772:	106d      	asrs	r5, r5, #1
 8026774:	429d      	cmp	r5, r3
 8026776:	bf38      	it	cc
 8026778:	461d      	movcc	r5, r3
 802677a:	0553      	lsls	r3, r2, #21
 802677c:	d527      	bpl.n	80267ce <__ssputs_r+0x8e>
 802677e:	4629      	mov	r1, r5
 8026780:	f7ff fe54 	bl	802642c <_malloc_r>
 8026784:	4606      	mov	r6, r0
 8026786:	b360      	cbz	r0, 80267e2 <__ssputs_r+0xa2>
 8026788:	6921      	ldr	r1, [r4, #16]
 802678a:	464a      	mov	r2, r9
 802678c:	f7ff ff80 	bl	8026690 <memcpy>
 8026790:	89a3      	ldrh	r3, [r4, #12]
 8026792:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8026796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802679a:	81a3      	strh	r3, [r4, #12]
 802679c:	6126      	str	r6, [r4, #16]
 802679e:	6165      	str	r5, [r4, #20]
 80267a0:	444e      	add	r6, r9
 80267a2:	eba5 0509 	sub.w	r5, r5, r9
 80267a6:	6026      	str	r6, [r4, #0]
 80267a8:	60a5      	str	r5, [r4, #8]
 80267aa:	463e      	mov	r6, r7
 80267ac:	42be      	cmp	r6, r7
 80267ae:	d900      	bls.n	80267b2 <__ssputs_r+0x72>
 80267b0:	463e      	mov	r6, r7
 80267b2:	6820      	ldr	r0, [r4, #0]
 80267b4:	4632      	mov	r2, r6
 80267b6:	4641      	mov	r1, r8
 80267b8:	f000 fe35 	bl	8027426 <memmove>
 80267bc:	68a3      	ldr	r3, [r4, #8]
 80267be:	1b9b      	subs	r3, r3, r6
 80267c0:	60a3      	str	r3, [r4, #8]
 80267c2:	6823      	ldr	r3, [r4, #0]
 80267c4:	4433      	add	r3, r6
 80267c6:	6023      	str	r3, [r4, #0]
 80267c8:	2000      	movs	r0, #0
 80267ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80267ce:	462a      	mov	r2, r5
 80267d0:	f000 fe43 	bl	802745a <_realloc_r>
 80267d4:	4606      	mov	r6, r0
 80267d6:	2800      	cmp	r0, #0
 80267d8:	d1e0      	bne.n	802679c <__ssputs_r+0x5c>
 80267da:	6921      	ldr	r1, [r4, #16]
 80267dc:	4650      	mov	r0, sl
 80267de:	f7ff ff65 	bl	80266ac <_free_r>
 80267e2:	230c      	movs	r3, #12
 80267e4:	f8ca 3000 	str.w	r3, [sl]
 80267e8:	89a3      	ldrh	r3, [r4, #12]
 80267ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80267ee:	81a3      	strh	r3, [r4, #12]
 80267f0:	f04f 30ff 	mov.w	r0, #4294967295
 80267f4:	e7e9      	b.n	80267ca <__ssputs_r+0x8a>
	...

080267f8 <_svfiprintf_r>:
 80267f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267fc:	4698      	mov	r8, r3
 80267fe:	898b      	ldrh	r3, [r1, #12]
 8026800:	061b      	lsls	r3, r3, #24
 8026802:	b09d      	sub	sp, #116	@ 0x74
 8026804:	4607      	mov	r7, r0
 8026806:	460d      	mov	r5, r1
 8026808:	4614      	mov	r4, r2
 802680a:	d510      	bpl.n	802682e <_svfiprintf_r+0x36>
 802680c:	690b      	ldr	r3, [r1, #16]
 802680e:	b973      	cbnz	r3, 802682e <_svfiprintf_r+0x36>
 8026810:	2140      	movs	r1, #64	@ 0x40
 8026812:	f7ff fe0b 	bl	802642c <_malloc_r>
 8026816:	6028      	str	r0, [r5, #0]
 8026818:	6128      	str	r0, [r5, #16]
 802681a:	b930      	cbnz	r0, 802682a <_svfiprintf_r+0x32>
 802681c:	230c      	movs	r3, #12
 802681e:	603b      	str	r3, [r7, #0]
 8026820:	f04f 30ff 	mov.w	r0, #4294967295
 8026824:	b01d      	add	sp, #116	@ 0x74
 8026826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802682a:	2340      	movs	r3, #64	@ 0x40
 802682c:	616b      	str	r3, [r5, #20]
 802682e:	2300      	movs	r3, #0
 8026830:	9309      	str	r3, [sp, #36]	@ 0x24
 8026832:	2320      	movs	r3, #32
 8026834:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8026838:	f8cd 800c 	str.w	r8, [sp, #12]
 802683c:	2330      	movs	r3, #48	@ 0x30
 802683e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80269dc <_svfiprintf_r+0x1e4>
 8026842:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8026846:	f04f 0901 	mov.w	r9, #1
 802684a:	4623      	mov	r3, r4
 802684c:	469a      	mov	sl, r3
 802684e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026852:	b10a      	cbz	r2, 8026858 <_svfiprintf_r+0x60>
 8026854:	2a25      	cmp	r2, #37	@ 0x25
 8026856:	d1f9      	bne.n	802684c <_svfiprintf_r+0x54>
 8026858:	ebba 0b04 	subs.w	fp, sl, r4
 802685c:	d00b      	beq.n	8026876 <_svfiprintf_r+0x7e>
 802685e:	465b      	mov	r3, fp
 8026860:	4622      	mov	r2, r4
 8026862:	4629      	mov	r1, r5
 8026864:	4638      	mov	r0, r7
 8026866:	f7ff ff6b 	bl	8026740 <__ssputs_r>
 802686a:	3001      	adds	r0, #1
 802686c:	f000 80a7 	beq.w	80269be <_svfiprintf_r+0x1c6>
 8026870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026872:	445a      	add	r2, fp
 8026874:	9209      	str	r2, [sp, #36]	@ 0x24
 8026876:	f89a 3000 	ldrb.w	r3, [sl]
 802687a:	2b00      	cmp	r3, #0
 802687c:	f000 809f 	beq.w	80269be <_svfiprintf_r+0x1c6>
 8026880:	2300      	movs	r3, #0
 8026882:	f04f 32ff 	mov.w	r2, #4294967295
 8026886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802688a:	f10a 0a01 	add.w	sl, sl, #1
 802688e:	9304      	str	r3, [sp, #16]
 8026890:	9307      	str	r3, [sp, #28]
 8026892:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8026896:	931a      	str	r3, [sp, #104]	@ 0x68
 8026898:	4654      	mov	r4, sl
 802689a:	2205      	movs	r2, #5
 802689c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80268a0:	484e      	ldr	r0, [pc, #312]	@ (80269dc <_svfiprintf_r+0x1e4>)
 80268a2:	f7f9 fca5 	bl	80201f0 <memchr>
 80268a6:	9a04      	ldr	r2, [sp, #16]
 80268a8:	b9d8      	cbnz	r0, 80268e2 <_svfiprintf_r+0xea>
 80268aa:	06d0      	lsls	r0, r2, #27
 80268ac:	bf44      	itt	mi
 80268ae:	2320      	movmi	r3, #32
 80268b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80268b4:	0711      	lsls	r1, r2, #28
 80268b6:	bf44      	itt	mi
 80268b8:	232b      	movmi	r3, #43	@ 0x2b
 80268ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80268be:	f89a 3000 	ldrb.w	r3, [sl]
 80268c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80268c4:	d015      	beq.n	80268f2 <_svfiprintf_r+0xfa>
 80268c6:	9a07      	ldr	r2, [sp, #28]
 80268c8:	4654      	mov	r4, sl
 80268ca:	2000      	movs	r0, #0
 80268cc:	f04f 0c0a 	mov.w	ip, #10
 80268d0:	4621      	mov	r1, r4
 80268d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80268d6:	3b30      	subs	r3, #48	@ 0x30
 80268d8:	2b09      	cmp	r3, #9
 80268da:	d94b      	bls.n	8026974 <_svfiprintf_r+0x17c>
 80268dc:	b1b0      	cbz	r0, 802690c <_svfiprintf_r+0x114>
 80268de:	9207      	str	r2, [sp, #28]
 80268e0:	e014      	b.n	802690c <_svfiprintf_r+0x114>
 80268e2:	eba0 0308 	sub.w	r3, r0, r8
 80268e6:	fa09 f303 	lsl.w	r3, r9, r3
 80268ea:	4313      	orrs	r3, r2
 80268ec:	9304      	str	r3, [sp, #16]
 80268ee:	46a2      	mov	sl, r4
 80268f0:	e7d2      	b.n	8026898 <_svfiprintf_r+0xa0>
 80268f2:	9b03      	ldr	r3, [sp, #12]
 80268f4:	1d19      	adds	r1, r3, #4
 80268f6:	681b      	ldr	r3, [r3, #0]
 80268f8:	9103      	str	r1, [sp, #12]
 80268fa:	2b00      	cmp	r3, #0
 80268fc:	bfbb      	ittet	lt
 80268fe:	425b      	neglt	r3, r3
 8026900:	f042 0202 	orrlt.w	r2, r2, #2
 8026904:	9307      	strge	r3, [sp, #28]
 8026906:	9307      	strlt	r3, [sp, #28]
 8026908:	bfb8      	it	lt
 802690a:	9204      	strlt	r2, [sp, #16]
 802690c:	7823      	ldrb	r3, [r4, #0]
 802690e:	2b2e      	cmp	r3, #46	@ 0x2e
 8026910:	d10a      	bne.n	8026928 <_svfiprintf_r+0x130>
 8026912:	7863      	ldrb	r3, [r4, #1]
 8026914:	2b2a      	cmp	r3, #42	@ 0x2a
 8026916:	d132      	bne.n	802697e <_svfiprintf_r+0x186>
 8026918:	9b03      	ldr	r3, [sp, #12]
 802691a:	1d1a      	adds	r2, r3, #4
 802691c:	681b      	ldr	r3, [r3, #0]
 802691e:	9203      	str	r2, [sp, #12]
 8026920:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8026924:	3402      	adds	r4, #2
 8026926:	9305      	str	r3, [sp, #20]
 8026928:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80269ec <_svfiprintf_r+0x1f4>
 802692c:	7821      	ldrb	r1, [r4, #0]
 802692e:	2203      	movs	r2, #3
 8026930:	4650      	mov	r0, sl
 8026932:	f7f9 fc5d 	bl	80201f0 <memchr>
 8026936:	b138      	cbz	r0, 8026948 <_svfiprintf_r+0x150>
 8026938:	9b04      	ldr	r3, [sp, #16]
 802693a:	eba0 000a 	sub.w	r0, r0, sl
 802693e:	2240      	movs	r2, #64	@ 0x40
 8026940:	4082      	lsls	r2, r0
 8026942:	4313      	orrs	r3, r2
 8026944:	3401      	adds	r4, #1
 8026946:	9304      	str	r3, [sp, #16]
 8026948:	f814 1b01 	ldrb.w	r1, [r4], #1
 802694c:	4824      	ldr	r0, [pc, #144]	@ (80269e0 <_svfiprintf_r+0x1e8>)
 802694e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8026952:	2206      	movs	r2, #6
 8026954:	f7f9 fc4c 	bl	80201f0 <memchr>
 8026958:	2800      	cmp	r0, #0
 802695a:	d036      	beq.n	80269ca <_svfiprintf_r+0x1d2>
 802695c:	4b21      	ldr	r3, [pc, #132]	@ (80269e4 <_svfiprintf_r+0x1ec>)
 802695e:	bb1b      	cbnz	r3, 80269a8 <_svfiprintf_r+0x1b0>
 8026960:	9b03      	ldr	r3, [sp, #12]
 8026962:	3307      	adds	r3, #7
 8026964:	f023 0307 	bic.w	r3, r3, #7
 8026968:	3308      	adds	r3, #8
 802696a:	9303      	str	r3, [sp, #12]
 802696c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802696e:	4433      	add	r3, r6
 8026970:	9309      	str	r3, [sp, #36]	@ 0x24
 8026972:	e76a      	b.n	802684a <_svfiprintf_r+0x52>
 8026974:	fb0c 3202 	mla	r2, ip, r2, r3
 8026978:	460c      	mov	r4, r1
 802697a:	2001      	movs	r0, #1
 802697c:	e7a8      	b.n	80268d0 <_svfiprintf_r+0xd8>
 802697e:	2300      	movs	r3, #0
 8026980:	3401      	adds	r4, #1
 8026982:	9305      	str	r3, [sp, #20]
 8026984:	4619      	mov	r1, r3
 8026986:	f04f 0c0a 	mov.w	ip, #10
 802698a:	4620      	mov	r0, r4
 802698c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026990:	3a30      	subs	r2, #48	@ 0x30
 8026992:	2a09      	cmp	r2, #9
 8026994:	d903      	bls.n	802699e <_svfiprintf_r+0x1a6>
 8026996:	2b00      	cmp	r3, #0
 8026998:	d0c6      	beq.n	8026928 <_svfiprintf_r+0x130>
 802699a:	9105      	str	r1, [sp, #20]
 802699c:	e7c4      	b.n	8026928 <_svfiprintf_r+0x130>
 802699e:	fb0c 2101 	mla	r1, ip, r1, r2
 80269a2:	4604      	mov	r4, r0
 80269a4:	2301      	movs	r3, #1
 80269a6:	e7f0      	b.n	802698a <_svfiprintf_r+0x192>
 80269a8:	ab03      	add	r3, sp, #12
 80269aa:	9300      	str	r3, [sp, #0]
 80269ac:	462a      	mov	r2, r5
 80269ae:	4b0e      	ldr	r3, [pc, #56]	@ (80269e8 <_svfiprintf_r+0x1f0>)
 80269b0:	a904      	add	r1, sp, #16
 80269b2:	4638      	mov	r0, r7
 80269b4:	f3af 8000 	nop.w
 80269b8:	1c42      	adds	r2, r0, #1
 80269ba:	4606      	mov	r6, r0
 80269bc:	d1d6      	bne.n	802696c <_svfiprintf_r+0x174>
 80269be:	89ab      	ldrh	r3, [r5, #12]
 80269c0:	065b      	lsls	r3, r3, #25
 80269c2:	f53f af2d 	bmi.w	8026820 <_svfiprintf_r+0x28>
 80269c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80269c8:	e72c      	b.n	8026824 <_svfiprintf_r+0x2c>
 80269ca:	ab03      	add	r3, sp, #12
 80269cc:	9300      	str	r3, [sp, #0]
 80269ce:	462a      	mov	r2, r5
 80269d0:	4b05      	ldr	r3, [pc, #20]	@ (80269e8 <_svfiprintf_r+0x1f0>)
 80269d2:	a904      	add	r1, sp, #16
 80269d4:	4638      	mov	r0, r7
 80269d6:	f000 fa45 	bl	8026e64 <_printf_i>
 80269da:	e7ed      	b.n	80269b8 <_svfiprintf_r+0x1c0>
 80269dc:	08027854 	.word	0x08027854
 80269e0:	0802785e 	.word	0x0802785e
 80269e4:	00000000 	.word	0x00000000
 80269e8:	08026741 	.word	0x08026741
 80269ec:	0802785a 	.word	0x0802785a

080269f0 <_sungetc_r>:
 80269f0:	b538      	push	{r3, r4, r5, lr}
 80269f2:	1c4b      	adds	r3, r1, #1
 80269f4:	4614      	mov	r4, r2
 80269f6:	d103      	bne.n	8026a00 <_sungetc_r+0x10>
 80269f8:	f04f 35ff 	mov.w	r5, #4294967295
 80269fc:	4628      	mov	r0, r5
 80269fe:	bd38      	pop	{r3, r4, r5, pc}
 8026a00:	8993      	ldrh	r3, [r2, #12]
 8026a02:	f023 0320 	bic.w	r3, r3, #32
 8026a06:	8193      	strh	r3, [r2, #12]
 8026a08:	6853      	ldr	r3, [r2, #4]
 8026a0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8026a0c:	b2cd      	uxtb	r5, r1
 8026a0e:	b18a      	cbz	r2, 8026a34 <_sungetc_r+0x44>
 8026a10:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8026a12:	429a      	cmp	r2, r3
 8026a14:	dd08      	ble.n	8026a28 <_sungetc_r+0x38>
 8026a16:	6823      	ldr	r3, [r4, #0]
 8026a18:	1e5a      	subs	r2, r3, #1
 8026a1a:	6022      	str	r2, [r4, #0]
 8026a1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8026a20:	6863      	ldr	r3, [r4, #4]
 8026a22:	3301      	adds	r3, #1
 8026a24:	6063      	str	r3, [r4, #4]
 8026a26:	e7e9      	b.n	80269fc <_sungetc_r+0xc>
 8026a28:	4621      	mov	r1, r4
 8026a2a:	f000 fcc2 	bl	80273b2 <__submore>
 8026a2e:	2800      	cmp	r0, #0
 8026a30:	d0f1      	beq.n	8026a16 <_sungetc_r+0x26>
 8026a32:	e7e1      	b.n	80269f8 <_sungetc_r+0x8>
 8026a34:	6921      	ldr	r1, [r4, #16]
 8026a36:	6822      	ldr	r2, [r4, #0]
 8026a38:	b141      	cbz	r1, 8026a4c <_sungetc_r+0x5c>
 8026a3a:	4291      	cmp	r1, r2
 8026a3c:	d206      	bcs.n	8026a4c <_sungetc_r+0x5c>
 8026a3e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8026a42:	42a9      	cmp	r1, r5
 8026a44:	d102      	bne.n	8026a4c <_sungetc_r+0x5c>
 8026a46:	3a01      	subs	r2, #1
 8026a48:	6022      	str	r2, [r4, #0]
 8026a4a:	e7ea      	b.n	8026a22 <_sungetc_r+0x32>
 8026a4c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8026a50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8026a56:	2303      	movs	r3, #3
 8026a58:	63a3      	str	r3, [r4, #56]	@ 0x38
 8026a5a:	4623      	mov	r3, r4
 8026a5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8026a60:	6023      	str	r3, [r4, #0]
 8026a62:	2301      	movs	r3, #1
 8026a64:	e7de      	b.n	8026a24 <_sungetc_r+0x34>

08026a66 <__ssrefill_r>:
 8026a66:	b510      	push	{r4, lr}
 8026a68:	460c      	mov	r4, r1
 8026a6a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8026a6c:	b169      	cbz	r1, 8026a8a <__ssrefill_r+0x24>
 8026a6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026a72:	4299      	cmp	r1, r3
 8026a74:	d001      	beq.n	8026a7a <__ssrefill_r+0x14>
 8026a76:	f7ff fe19 	bl	80266ac <_free_r>
 8026a7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026a7c:	6063      	str	r3, [r4, #4]
 8026a7e:	2000      	movs	r0, #0
 8026a80:	6360      	str	r0, [r4, #52]	@ 0x34
 8026a82:	b113      	cbz	r3, 8026a8a <__ssrefill_r+0x24>
 8026a84:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8026a86:	6023      	str	r3, [r4, #0]
 8026a88:	bd10      	pop	{r4, pc}
 8026a8a:	6923      	ldr	r3, [r4, #16]
 8026a8c:	6023      	str	r3, [r4, #0]
 8026a8e:	2300      	movs	r3, #0
 8026a90:	6063      	str	r3, [r4, #4]
 8026a92:	89a3      	ldrh	r3, [r4, #12]
 8026a94:	f043 0320 	orr.w	r3, r3, #32
 8026a98:	81a3      	strh	r3, [r4, #12]
 8026a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8026a9e:	e7f3      	b.n	8026a88 <__ssrefill_r+0x22>

08026aa0 <__ssvfiscanf_r>:
 8026aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026aa4:	460c      	mov	r4, r1
 8026aa6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8026aaa:	2100      	movs	r1, #0
 8026aac:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8026ab0:	49a5      	ldr	r1, [pc, #660]	@ (8026d48 <__ssvfiscanf_r+0x2a8>)
 8026ab2:	91a0      	str	r1, [sp, #640]	@ 0x280
 8026ab4:	f10d 0804 	add.w	r8, sp, #4
 8026ab8:	49a4      	ldr	r1, [pc, #656]	@ (8026d4c <__ssvfiscanf_r+0x2ac>)
 8026aba:	4fa5      	ldr	r7, [pc, #660]	@ (8026d50 <__ssvfiscanf_r+0x2b0>)
 8026abc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8026ac0:	4606      	mov	r6, r0
 8026ac2:	91a1      	str	r1, [sp, #644]	@ 0x284
 8026ac4:	9300      	str	r3, [sp, #0]
 8026ac6:	7813      	ldrb	r3, [r2, #0]
 8026ac8:	2b00      	cmp	r3, #0
 8026aca:	f000 8158 	beq.w	8026d7e <__ssvfiscanf_r+0x2de>
 8026ace:	5cf9      	ldrb	r1, [r7, r3]
 8026ad0:	f011 0108 	ands.w	r1, r1, #8
 8026ad4:	f102 0501 	add.w	r5, r2, #1
 8026ad8:	d019      	beq.n	8026b0e <__ssvfiscanf_r+0x6e>
 8026ada:	6863      	ldr	r3, [r4, #4]
 8026adc:	2b00      	cmp	r3, #0
 8026ade:	dd0f      	ble.n	8026b00 <__ssvfiscanf_r+0x60>
 8026ae0:	6823      	ldr	r3, [r4, #0]
 8026ae2:	781a      	ldrb	r2, [r3, #0]
 8026ae4:	5cba      	ldrb	r2, [r7, r2]
 8026ae6:	0712      	lsls	r2, r2, #28
 8026ae8:	d401      	bmi.n	8026aee <__ssvfiscanf_r+0x4e>
 8026aea:	462a      	mov	r2, r5
 8026aec:	e7eb      	b.n	8026ac6 <__ssvfiscanf_r+0x26>
 8026aee:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8026af0:	3201      	adds	r2, #1
 8026af2:	9245      	str	r2, [sp, #276]	@ 0x114
 8026af4:	6862      	ldr	r2, [r4, #4]
 8026af6:	3301      	adds	r3, #1
 8026af8:	3a01      	subs	r2, #1
 8026afa:	6062      	str	r2, [r4, #4]
 8026afc:	6023      	str	r3, [r4, #0]
 8026afe:	e7ec      	b.n	8026ada <__ssvfiscanf_r+0x3a>
 8026b00:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8026b02:	4621      	mov	r1, r4
 8026b04:	4630      	mov	r0, r6
 8026b06:	4798      	blx	r3
 8026b08:	2800      	cmp	r0, #0
 8026b0a:	d0e9      	beq.n	8026ae0 <__ssvfiscanf_r+0x40>
 8026b0c:	e7ed      	b.n	8026aea <__ssvfiscanf_r+0x4a>
 8026b0e:	2b25      	cmp	r3, #37	@ 0x25
 8026b10:	d012      	beq.n	8026b38 <__ssvfiscanf_r+0x98>
 8026b12:	4699      	mov	r9, r3
 8026b14:	6863      	ldr	r3, [r4, #4]
 8026b16:	2b00      	cmp	r3, #0
 8026b18:	f340 8093 	ble.w	8026c42 <__ssvfiscanf_r+0x1a2>
 8026b1c:	6822      	ldr	r2, [r4, #0]
 8026b1e:	7813      	ldrb	r3, [r2, #0]
 8026b20:	454b      	cmp	r3, r9
 8026b22:	f040 812c 	bne.w	8026d7e <__ssvfiscanf_r+0x2de>
 8026b26:	6863      	ldr	r3, [r4, #4]
 8026b28:	3b01      	subs	r3, #1
 8026b2a:	6063      	str	r3, [r4, #4]
 8026b2c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8026b2e:	3201      	adds	r2, #1
 8026b30:	3301      	adds	r3, #1
 8026b32:	6022      	str	r2, [r4, #0]
 8026b34:	9345      	str	r3, [sp, #276]	@ 0x114
 8026b36:	e7d8      	b.n	8026aea <__ssvfiscanf_r+0x4a>
 8026b38:	9141      	str	r1, [sp, #260]	@ 0x104
 8026b3a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8026b3c:	7853      	ldrb	r3, [r2, #1]
 8026b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8026b40:	bf02      	ittt	eq
 8026b42:	2310      	moveq	r3, #16
 8026b44:	1c95      	addeq	r5, r2, #2
 8026b46:	9341      	streq	r3, [sp, #260]	@ 0x104
 8026b48:	220a      	movs	r2, #10
 8026b4a:	46a9      	mov	r9, r5
 8026b4c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8026b50:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8026b54:	2b09      	cmp	r3, #9
 8026b56:	d91e      	bls.n	8026b96 <__ssvfiscanf_r+0xf6>
 8026b58:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8026d54 <__ssvfiscanf_r+0x2b4>
 8026b5c:	2203      	movs	r2, #3
 8026b5e:	4650      	mov	r0, sl
 8026b60:	f7f9 fb46 	bl	80201f0 <memchr>
 8026b64:	b138      	cbz	r0, 8026b76 <__ssvfiscanf_r+0xd6>
 8026b66:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8026b68:	eba0 000a 	sub.w	r0, r0, sl
 8026b6c:	2301      	movs	r3, #1
 8026b6e:	4083      	lsls	r3, r0
 8026b70:	4313      	orrs	r3, r2
 8026b72:	9341      	str	r3, [sp, #260]	@ 0x104
 8026b74:	464d      	mov	r5, r9
 8026b76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8026b7a:	2b78      	cmp	r3, #120	@ 0x78
 8026b7c:	d806      	bhi.n	8026b8c <__ssvfiscanf_r+0xec>
 8026b7e:	2b57      	cmp	r3, #87	@ 0x57
 8026b80:	d810      	bhi.n	8026ba4 <__ssvfiscanf_r+0x104>
 8026b82:	2b25      	cmp	r3, #37	@ 0x25
 8026b84:	d0c5      	beq.n	8026b12 <__ssvfiscanf_r+0x72>
 8026b86:	d857      	bhi.n	8026c38 <__ssvfiscanf_r+0x198>
 8026b88:	2b00      	cmp	r3, #0
 8026b8a:	d065      	beq.n	8026c58 <__ssvfiscanf_r+0x1b8>
 8026b8c:	2303      	movs	r3, #3
 8026b8e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8026b90:	230a      	movs	r3, #10
 8026b92:	9342      	str	r3, [sp, #264]	@ 0x108
 8026b94:	e078      	b.n	8026c88 <__ssvfiscanf_r+0x1e8>
 8026b96:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8026b98:	fb02 1103 	mla	r1, r2, r3, r1
 8026b9c:	3930      	subs	r1, #48	@ 0x30
 8026b9e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8026ba0:	464d      	mov	r5, r9
 8026ba2:	e7d2      	b.n	8026b4a <__ssvfiscanf_r+0xaa>
 8026ba4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8026ba8:	2a20      	cmp	r2, #32
 8026baa:	d8ef      	bhi.n	8026b8c <__ssvfiscanf_r+0xec>
 8026bac:	a101      	add	r1, pc, #4	@ (adr r1, 8026bb4 <__ssvfiscanf_r+0x114>)
 8026bae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8026bb2:	bf00      	nop
 8026bb4:	08026c67 	.word	0x08026c67
 8026bb8:	08026b8d 	.word	0x08026b8d
 8026bbc:	08026b8d 	.word	0x08026b8d
 8026bc0:	08026cc1 	.word	0x08026cc1
 8026bc4:	08026b8d 	.word	0x08026b8d
 8026bc8:	08026b8d 	.word	0x08026b8d
 8026bcc:	08026b8d 	.word	0x08026b8d
 8026bd0:	08026b8d 	.word	0x08026b8d
 8026bd4:	08026b8d 	.word	0x08026b8d
 8026bd8:	08026b8d 	.word	0x08026b8d
 8026bdc:	08026b8d 	.word	0x08026b8d
 8026be0:	08026cd7 	.word	0x08026cd7
 8026be4:	08026cbd 	.word	0x08026cbd
 8026be8:	08026c3f 	.word	0x08026c3f
 8026bec:	08026c3f 	.word	0x08026c3f
 8026bf0:	08026c3f 	.word	0x08026c3f
 8026bf4:	08026b8d 	.word	0x08026b8d
 8026bf8:	08026c79 	.word	0x08026c79
 8026bfc:	08026b8d 	.word	0x08026b8d
 8026c00:	08026b8d 	.word	0x08026b8d
 8026c04:	08026b8d 	.word	0x08026b8d
 8026c08:	08026b8d 	.word	0x08026b8d
 8026c0c:	08026ce7 	.word	0x08026ce7
 8026c10:	08026c81 	.word	0x08026c81
 8026c14:	08026c5f 	.word	0x08026c5f
 8026c18:	08026b8d 	.word	0x08026b8d
 8026c1c:	08026b8d 	.word	0x08026b8d
 8026c20:	08026ce3 	.word	0x08026ce3
 8026c24:	08026b8d 	.word	0x08026b8d
 8026c28:	08026cbd 	.word	0x08026cbd
 8026c2c:	08026b8d 	.word	0x08026b8d
 8026c30:	08026b8d 	.word	0x08026b8d
 8026c34:	08026c67 	.word	0x08026c67
 8026c38:	3b45      	subs	r3, #69	@ 0x45
 8026c3a:	2b02      	cmp	r3, #2
 8026c3c:	d8a6      	bhi.n	8026b8c <__ssvfiscanf_r+0xec>
 8026c3e:	2305      	movs	r3, #5
 8026c40:	e021      	b.n	8026c86 <__ssvfiscanf_r+0x1e6>
 8026c42:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8026c44:	4621      	mov	r1, r4
 8026c46:	4630      	mov	r0, r6
 8026c48:	4798      	blx	r3
 8026c4a:	2800      	cmp	r0, #0
 8026c4c:	f43f af66 	beq.w	8026b1c <__ssvfiscanf_r+0x7c>
 8026c50:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8026c52:	2800      	cmp	r0, #0
 8026c54:	f040 808b 	bne.w	8026d6e <__ssvfiscanf_r+0x2ce>
 8026c58:	f04f 30ff 	mov.w	r0, #4294967295
 8026c5c:	e08b      	b.n	8026d76 <__ssvfiscanf_r+0x2d6>
 8026c5e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8026c60:	f042 0220 	orr.w	r2, r2, #32
 8026c64:	9241      	str	r2, [sp, #260]	@ 0x104
 8026c66:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8026c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8026c6c:	9241      	str	r2, [sp, #260]	@ 0x104
 8026c6e:	2210      	movs	r2, #16
 8026c70:	2b6e      	cmp	r3, #110	@ 0x6e
 8026c72:	9242      	str	r2, [sp, #264]	@ 0x108
 8026c74:	d902      	bls.n	8026c7c <__ssvfiscanf_r+0x1dc>
 8026c76:	e005      	b.n	8026c84 <__ssvfiscanf_r+0x1e4>
 8026c78:	2300      	movs	r3, #0
 8026c7a:	9342      	str	r3, [sp, #264]	@ 0x108
 8026c7c:	2303      	movs	r3, #3
 8026c7e:	e002      	b.n	8026c86 <__ssvfiscanf_r+0x1e6>
 8026c80:	2308      	movs	r3, #8
 8026c82:	9342      	str	r3, [sp, #264]	@ 0x108
 8026c84:	2304      	movs	r3, #4
 8026c86:	9347      	str	r3, [sp, #284]	@ 0x11c
 8026c88:	6863      	ldr	r3, [r4, #4]
 8026c8a:	2b00      	cmp	r3, #0
 8026c8c:	dd39      	ble.n	8026d02 <__ssvfiscanf_r+0x262>
 8026c8e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026c90:	0659      	lsls	r1, r3, #25
 8026c92:	d404      	bmi.n	8026c9e <__ssvfiscanf_r+0x1fe>
 8026c94:	6823      	ldr	r3, [r4, #0]
 8026c96:	781a      	ldrb	r2, [r3, #0]
 8026c98:	5cba      	ldrb	r2, [r7, r2]
 8026c9a:	0712      	lsls	r2, r2, #28
 8026c9c:	d438      	bmi.n	8026d10 <__ssvfiscanf_r+0x270>
 8026c9e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8026ca0:	2b02      	cmp	r3, #2
 8026ca2:	dc47      	bgt.n	8026d34 <__ssvfiscanf_r+0x294>
 8026ca4:	466b      	mov	r3, sp
 8026ca6:	4622      	mov	r2, r4
 8026ca8:	a941      	add	r1, sp, #260	@ 0x104
 8026caa:	4630      	mov	r0, r6
 8026cac:	f000 f9fa 	bl	80270a4 <_scanf_chars>
 8026cb0:	2801      	cmp	r0, #1
 8026cb2:	d064      	beq.n	8026d7e <__ssvfiscanf_r+0x2de>
 8026cb4:	2802      	cmp	r0, #2
 8026cb6:	f47f af18 	bne.w	8026aea <__ssvfiscanf_r+0x4a>
 8026cba:	e7c9      	b.n	8026c50 <__ssvfiscanf_r+0x1b0>
 8026cbc:	220a      	movs	r2, #10
 8026cbe:	e7d7      	b.n	8026c70 <__ssvfiscanf_r+0x1d0>
 8026cc0:	4629      	mov	r1, r5
 8026cc2:	4640      	mov	r0, r8
 8026cc4:	f000 fb3c 	bl	8027340 <__sccl>
 8026cc8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026cce:	9341      	str	r3, [sp, #260]	@ 0x104
 8026cd0:	4605      	mov	r5, r0
 8026cd2:	2301      	movs	r3, #1
 8026cd4:	e7d7      	b.n	8026c86 <__ssvfiscanf_r+0x1e6>
 8026cd6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026cdc:	9341      	str	r3, [sp, #260]	@ 0x104
 8026cde:	2300      	movs	r3, #0
 8026ce0:	e7d1      	b.n	8026c86 <__ssvfiscanf_r+0x1e6>
 8026ce2:	2302      	movs	r3, #2
 8026ce4:	e7cf      	b.n	8026c86 <__ssvfiscanf_r+0x1e6>
 8026ce6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8026ce8:	06c3      	lsls	r3, r0, #27
 8026cea:	f53f aefe 	bmi.w	8026aea <__ssvfiscanf_r+0x4a>
 8026cee:	9b00      	ldr	r3, [sp, #0]
 8026cf0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8026cf2:	1d19      	adds	r1, r3, #4
 8026cf4:	9100      	str	r1, [sp, #0]
 8026cf6:	681b      	ldr	r3, [r3, #0]
 8026cf8:	07c0      	lsls	r0, r0, #31
 8026cfa:	bf4c      	ite	mi
 8026cfc:	801a      	strhmi	r2, [r3, #0]
 8026cfe:	601a      	strpl	r2, [r3, #0]
 8026d00:	e6f3      	b.n	8026aea <__ssvfiscanf_r+0x4a>
 8026d02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8026d04:	4621      	mov	r1, r4
 8026d06:	4630      	mov	r0, r6
 8026d08:	4798      	blx	r3
 8026d0a:	2800      	cmp	r0, #0
 8026d0c:	d0bf      	beq.n	8026c8e <__ssvfiscanf_r+0x1ee>
 8026d0e:	e79f      	b.n	8026c50 <__ssvfiscanf_r+0x1b0>
 8026d10:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8026d12:	3201      	adds	r2, #1
 8026d14:	9245      	str	r2, [sp, #276]	@ 0x114
 8026d16:	6862      	ldr	r2, [r4, #4]
 8026d18:	3a01      	subs	r2, #1
 8026d1a:	2a00      	cmp	r2, #0
 8026d1c:	6062      	str	r2, [r4, #4]
 8026d1e:	dd02      	ble.n	8026d26 <__ssvfiscanf_r+0x286>
 8026d20:	3301      	adds	r3, #1
 8026d22:	6023      	str	r3, [r4, #0]
 8026d24:	e7b6      	b.n	8026c94 <__ssvfiscanf_r+0x1f4>
 8026d26:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8026d28:	4621      	mov	r1, r4
 8026d2a:	4630      	mov	r0, r6
 8026d2c:	4798      	blx	r3
 8026d2e:	2800      	cmp	r0, #0
 8026d30:	d0b0      	beq.n	8026c94 <__ssvfiscanf_r+0x1f4>
 8026d32:	e78d      	b.n	8026c50 <__ssvfiscanf_r+0x1b0>
 8026d34:	2b04      	cmp	r3, #4
 8026d36:	dc0f      	bgt.n	8026d58 <__ssvfiscanf_r+0x2b8>
 8026d38:	466b      	mov	r3, sp
 8026d3a:	4622      	mov	r2, r4
 8026d3c:	a941      	add	r1, sp, #260	@ 0x104
 8026d3e:	4630      	mov	r0, r6
 8026d40:	f000 fa0a 	bl	8027158 <_scanf_i>
 8026d44:	e7b4      	b.n	8026cb0 <__ssvfiscanf_r+0x210>
 8026d46:	bf00      	nop
 8026d48:	080269f1 	.word	0x080269f1
 8026d4c:	08026a67 	.word	0x08026a67
 8026d50:	080278a3 	.word	0x080278a3
 8026d54:	0802785a 	.word	0x0802785a
 8026d58:	4b0a      	ldr	r3, [pc, #40]	@ (8026d84 <__ssvfiscanf_r+0x2e4>)
 8026d5a:	2b00      	cmp	r3, #0
 8026d5c:	f43f aec5 	beq.w	8026aea <__ssvfiscanf_r+0x4a>
 8026d60:	466b      	mov	r3, sp
 8026d62:	4622      	mov	r2, r4
 8026d64:	a941      	add	r1, sp, #260	@ 0x104
 8026d66:	4630      	mov	r0, r6
 8026d68:	f3af 8000 	nop.w
 8026d6c:	e7a0      	b.n	8026cb0 <__ssvfiscanf_r+0x210>
 8026d6e:	89a3      	ldrh	r3, [r4, #12]
 8026d70:	065b      	lsls	r3, r3, #25
 8026d72:	f53f af71 	bmi.w	8026c58 <__ssvfiscanf_r+0x1b8>
 8026d76:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8026d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026d7e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8026d80:	e7f9      	b.n	8026d76 <__ssvfiscanf_r+0x2d6>
 8026d82:	bf00      	nop
 8026d84:	00000000 	.word	0x00000000

08026d88 <_printf_common>:
 8026d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026d8c:	4616      	mov	r6, r2
 8026d8e:	4698      	mov	r8, r3
 8026d90:	688a      	ldr	r2, [r1, #8]
 8026d92:	690b      	ldr	r3, [r1, #16]
 8026d94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8026d98:	4293      	cmp	r3, r2
 8026d9a:	bfb8      	it	lt
 8026d9c:	4613      	movlt	r3, r2
 8026d9e:	6033      	str	r3, [r6, #0]
 8026da0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8026da4:	4607      	mov	r7, r0
 8026da6:	460c      	mov	r4, r1
 8026da8:	b10a      	cbz	r2, 8026dae <_printf_common+0x26>
 8026daa:	3301      	adds	r3, #1
 8026dac:	6033      	str	r3, [r6, #0]
 8026dae:	6823      	ldr	r3, [r4, #0]
 8026db0:	0699      	lsls	r1, r3, #26
 8026db2:	bf42      	ittt	mi
 8026db4:	6833      	ldrmi	r3, [r6, #0]
 8026db6:	3302      	addmi	r3, #2
 8026db8:	6033      	strmi	r3, [r6, #0]
 8026dba:	6825      	ldr	r5, [r4, #0]
 8026dbc:	f015 0506 	ands.w	r5, r5, #6
 8026dc0:	d106      	bne.n	8026dd0 <_printf_common+0x48>
 8026dc2:	f104 0a19 	add.w	sl, r4, #25
 8026dc6:	68e3      	ldr	r3, [r4, #12]
 8026dc8:	6832      	ldr	r2, [r6, #0]
 8026dca:	1a9b      	subs	r3, r3, r2
 8026dcc:	42ab      	cmp	r3, r5
 8026dce:	dc26      	bgt.n	8026e1e <_printf_common+0x96>
 8026dd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8026dd4:	6822      	ldr	r2, [r4, #0]
 8026dd6:	3b00      	subs	r3, #0
 8026dd8:	bf18      	it	ne
 8026dda:	2301      	movne	r3, #1
 8026ddc:	0692      	lsls	r2, r2, #26
 8026dde:	d42b      	bmi.n	8026e38 <_printf_common+0xb0>
 8026de0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8026de4:	4641      	mov	r1, r8
 8026de6:	4638      	mov	r0, r7
 8026de8:	47c8      	blx	r9
 8026dea:	3001      	adds	r0, #1
 8026dec:	d01e      	beq.n	8026e2c <_printf_common+0xa4>
 8026dee:	6823      	ldr	r3, [r4, #0]
 8026df0:	6922      	ldr	r2, [r4, #16]
 8026df2:	f003 0306 	and.w	r3, r3, #6
 8026df6:	2b04      	cmp	r3, #4
 8026df8:	bf02      	ittt	eq
 8026dfa:	68e5      	ldreq	r5, [r4, #12]
 8026dfc:	6833      	ldreq	r3, [r6, #0]
 8026dfe:	1aed      	subeq	r5, r5, r3
 8026e00:	68a3      	ldr	r3, [r4, #8]
 8026e02:	bf0c      	ite	eq
 8026e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026e08:	2500      	movne	r5, #0
 8026e0a:	4293      	cmp	r3, r2
 8026e0c:	bfc4      	itt	gt
 8026e0e:	1a9b      	subgt	r3, r3, r2
 8026e10:	18ed      	addgt	r5, r5, r3
 8026e12:	2600      	movs	r6, #0
 8026e14:	341a      	adds	r4, #26
 8026e16:	42b5      	cmp	r5, r6
 8026e18:	d11a      	bne.n	8026e50 <_printf_common+0xc8>
 8026e1a:	2000      	movs	r0, #0
 8026e1c:	e008      	b.n	8026e30 <_printf_common+0xa8>
 8026e1e:	2301      	movs	r3, #1
 8026e20:	4652      	mov	r2, sl
 8026e22:	4641      	mov	r1, r8
 8026e24:	4638      	mov	r0, r7
 8026e26:	47c8      	blx	r9
 8026e28:	3001      	adds	r0, #1
 8026e2a:	d103      	bne.n	8026e34 <_printf_common+0xac>
 8026e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8026e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026e34:	3501      	adds	r5, #1
 8026e36:	e7c6      	b.n	8026dc6 <_printf_common+0x3e>
 8026e38:	18e1      	adds	r1, r4, r3
 8026e3a:	1c5a      	adds	r2, r3, #1
 8026e3c:	2030      	movs	r0, #48	@ 0x30
 8026e3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8026e42:	4422      	add	r2, r4
 8026e44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8026e48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8026e4c:	3302      	adds	r3, #2
 8026e4e:	e7c7      	b.n	8026de0 <_printf_common+0x58>
 8026e50:	2301      	movs	r3, #1
 8026e52:	4622      	mov	r2, r4
 8026e54:	4641      	mov	r1, r8
 8026e56:	4638      	mov	r0, r7
 8026e58:	47c8      	blx	r9
 8026e5a:	3001      	adds	r0, #1
 8026e5c:	d0e6      	beq.n	8026e2c <_printf_common+0xa4>
 8026e5e:	3601      	adds	r6, #1
 8026e60:	e7d9      	b.n	8026e16 <_printf_common+0x8e>
	...

08026e64 <_printf_i>:
 8026e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026e68:	7e0f      	ldrb	r7, [r1, #24]
 8026e6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8026e6c:	2f78      	cmp	r7, #120	@ 0x78
 8026e6e:	4691      	mov	r9, r2
 8026e70:	4680      	mov	r8, r0
 8026e72:	460c      	mov	r4, r1
 8026e74:	469a      	mov	sl, r3
 8026e76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8026e7a:	d807      	bhi.n	8026e8c <_printf_i+0x28>
 8026e7c:	2f62      	cmp	r7, #98	@ 0x62
 8026e7e:	d80a      	bhi.n	8026e96 <_printf_i+0x32>
 8026e80:	2f00      	cmp	r7, #0
 8026e82:	f000 80d2 	beq.w	802702a <_printf_i+0x1c6>
 8026e86:	2f58      	cmp	r7, #88	@ 0x58
 8026e88:	f000 80b9 	beq.w	8026ffe <_printf_i+0x19a>
 8026e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026e90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8026e94:	e03a      	b.n	8026f0c <_printf_i+0xa8>
 8026e96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8026e9a:	2b15      	cmp	r3, #21
 8026e9c:	d8f6      	bhi.n	8026e8c <_printf_i+0x28>
 8026e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8026ea4 <_printf_i+0x40>)
 8026ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026ea4:	08026efd 	.word	0x08026efd
 8026ea8:	08026f11 	.word	0x08026f11
 8026eac:	08026e8d 	.word	0x08026e8d
 8026eb0:	08026e8d 	.word	0x08026e8d
 8026eb4:	08026e8d 	.word	0x08026e8d
 8026eb8:	08026e8d 	.word	0x08026e8d
 8026ebc:	08026f11 	.word	0x08026f11
 8026ec0:	08026e8d 	.word	0x08026e8d
 8026ec4:	08026e8d 	.word	0x08026e8d
 8026ec8:	08026e8d 	.word	0x08026e8d
 8026ecc:	08026e8d 	.word	0x08026e8d
 8026ed0:	08027011 	.word	0x08027011
 8026ed4:	08026f3b 	.word	0x08026f3b
 8026ed8:	08026fcb 	.word	0x08026fcb
 8026edc:	08026e8d 	.word	0x08026e8d
 8026ee0:	08026e8d 	.word	0x08026e8d
 8026ee4:	08027033 	.word	0x08027033
 8026ee8:	08026e8d 	.word	0x08026e8d
 8026eec:	08026f3b 	.word	0x08026f3b
 8026ef0:	08026e8d 	.word	0x08026e8d
 8026ef4:	08026e8d 	.word	0x08026e8d
 8026ef8:	08026fd3 	.word	0x08026fd3
 8026efc:	6833      	ldr	r3, [r6, #0]
 8026efe:	1d1a      	adds	r2, r3, #4
 8026f00:	681b      	ldr	r3, [r3, #0]
 8026f02:	6032      	str	r2, [r6, #0]
 8026f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026f08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8026f0c:	2301      	movs	r3, #1
 8026f0e:	e09d      	b.n	802704c <_printf_i+0x1e8>
 8026f10:	6833      	ldr	r3, [r6, #0]
 8026f12:	6820      	ldr	r0, [r4, #0]
 8026f14:	1d19      	adds	r1, r3, #4
 8026f16:	6031      	str	r1, [r6, #0]
 8026f18:	0606      	lsls	r6, r0, #24
 8026f1a:	d501      	bpl.n	8026f20 <_printf_i+0xbc>
 8026f1c:	681d      	ldr	r5, [r3, #0]
 8026f1e:	e003      	b.n	8026f28 <_printf_i+0xc4>
 8026f20:	0645      	lsls	r5, r0, #25
 8026f22:	d5fb      	bpl.n	8026f1c <_printf_i+0xb8>
 8026f24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8026f28:	2d00      	cmp	r5, #0
 8026f2a:	da03      	bge.n	8026f34 <_printf_i+0xd0>
 8026f2c:	232d      	movs	r3, #45	@ 0x2d
 8026f2e:	426d      	negs	r5, r5
 8026f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026f34:	4859      	ldr	r0, [pc, #356]	@ (802709c <_printf_i+0x238>)
 8026f36:	230a      	movs	r3, #10
 8026f38:	e011      	b.n	8026f5e <_printf_i+0xfa>
 8026f3a:	6821      	ldr	r1, [r4, #0]
 8026f3c:	6833      	ldr	r3, [r6, #0]
 8026f3e:	0608      	lsls	r0, r1, #24
 8026f40:	f853 5b04 	ldr.w	r5, [r3], #4
 8026f44:	d402      	bmi.n	8026f4c <_printf_i+0xe8>
 8026f46:	0649      	lsls	r1, r1, #25
 8026f48:	bf48      	it	mi
 8026f4a:	b2ad      	uxthmi	r5, r5
 8026f4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8026f4e:	4853      	ldr	r0, [pc, #332]	@ (802709c <_printf_i+0x238>)
 8026f50:	6033      	str	r3, [r6, #0]
 8026f52:	bf14      	ite	ne
 8026f54:	230a      	movne	r3, #10
 8026f56:	2308      	moveq	r3, #8
 8026f58:	2100      	movs	r1, #0
 8026f5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8026f5e:	6866      	ldr	r6, [r4, #4]
 8026f60:	60a6      	str	r6, [r4, #8]
 8026f62:	2e00      	cmp	r6, #0
 8026f64:	bfa2      	ittt	ge
 8026f66:	6821      	ldrge	r1, [r4, #0]
 8026f68:	f021 0104 	bicge.w	r1, r1, #4
 8026f6c:	6021      	strge	r1, [r4, #0]
 8026f6e:	b90d      	cbnz	r5, 8026f74 <_printf_i+0x110>
 8026f70:	2e00      	cmp	r6, #0
 8026f72:	d04b      	beq.n	802700c <_printf_i+0x1a8>
 8026f74:	4616      	mov	r6, r2
 8026f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8026f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8026f7e:	5dc7      	ldrb	r7, [r0, r7]
 8026f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026f84:	462f      	mov	r7, r5
 8026f86:	42bb      	cmp	r3, r7
 8026f88:	460d      	mov	r5, r1
 8026f8a:	d9f4      	bls.n	8026f76 <_printf_i+0x112>
 8026f8c:	2b08      	cmp	r3, #8
 8026f8e:	d10b      	bne.n	8026fa8 <_printf_i+0x144>
 8026f90:	6823      	ldr	r3, [r4, #0]
 8026f92:	07df      	lsls	r7, r3, #31
 8026f94:	d508      	bpl.n	8026fa8 <_printf_i+0x144>
 8026f96:	6923      	ldr	r3, [r4, #16]
 8026f98:	6861      	ldr	r1, [r4, #4]
 8026f9a:	4299      	cmp	r1, r3
 8026f9c:	bfde      	ittt	le
 8026f9e:	2330      	movle	r3, #48	@ 0x30
 8026fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026fa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026fa8:	1b92      	subs	r2, r2, r6
 8026faa:	6122      	str	r2, [r4, #16]
 8026fac:	f8cd a000 	str.w	sl, [sp]
 8026fb0:	464b      	mov	r3, r9
 8026fb2:	aa03      	add	r2, sp, #12
 8026fb4:	4621      	mov	r1, r4
 8026fb6:	4640      	mov	r0, r8
 8026fb8:	f7ff fee6 	bl	8026d88 <_printf_common>
 8026fbc:	3001      	adds	r0, #1
 8026fbe:	d14a      	bne.n	8027056 <_printf_i+0x1f2>
 8026fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8026fc4:	b004      	add	sp, #16
 8026fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026fca:	6823      	ldr	r3, [r4, #0]
 8026fcc:	f043 0320 	orr.w	r3, r3, #32
 8026fd0:	6023      	str	r3, [r4, #0]
 8026fd2:	4833      	ldr	r0, [pc, #204]	@ (80270a0 <_printf_i+0x23c>)
 8026fd4:	2778      	movs	r7, #120	@ 0x78
 8026fd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8026fda:	6823      	ldr	r3, [r4, #0]
 8026fdc:	6831      	ldr	r1, [r6, #0]
 8026fde:	061f      	lsls	r7, r3, #24
 8026fe0:	f851 5b04 	ldr.w	r5, [r1], #4
 8026fe4:	d402      	bmi.n	8026fec <_printf_i+0x188>
 8026fe6:	065f      	lsls	r7, r3, #25
 8026fe8:	bf48      	it	mi
 8026fea:	b2ad      	uxthmi	r5, r5
 8026fec:	6031      	str	r1, [r6, #0]
 8026fee:	07d9      	lsls	r1, r3, #31
 8026ff0:	bf44      	itt	mi
 8026ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8026ff6:	6023      	strmi	r3, [r4, #0]
 8026ff8:	b11d      	cbz	r5, 8027002 <_printf_i+0x19e>
 8026ffa:	2310      	movs	r3, #16
 8026ffc:	e7ac      	b.n	8026f58 <_printf_i+0xf4>
 8026ffe:	4827      	ldr	r0, [pc, #156]	@ (802709c <_printf_i+0x238>)
 8027000:	e7e9      	b.n	8026fd6 <_printf_i+0x172>
 8027002:	6823      	ldr	r3, [r4, #0]
 8027004:	f023 0320 	bic.w	r3, r3, #32
 8027008:	6023      	str	r3, [r4, #0]
 802700a:	e7f6      	b.n	8026ffa <_printf_i+0x196>
 802700c:	4616      	mov	r6, r2
 802700e:	e7bd      	b.n	8026f8c <_printf_i+0x128>
 8027010:	6833      	ldr	r3, [r6, #0]
 8027012:	6825      	ldr	r5, [r4, #0]
 8027014:	6961      	ldr	r1, [r4, #20]
 8027016:	1d18      	adds	r0, r3, #4
 8027018:	6030      	str	r0, [r6, #0]
 802701a:	062e      	lsls	r6, r5, #24
 802701c:	681b      	ldr	r3, [r3, #0]
 802701e:	d501      	bpl.n	8027024 <_printf_i+0x1c0>
 8027020:	6019      	str	r1, [r3, #0]
 8027022:	e002      	b.n	802702a <_printf_i+0x1c6>
 8027024:	0668      	lsls	r0, r5, #25
 8027026:	d5fb      	bpl.n	8027020 <_printf_i+0x1bc>
 8027028:	8019      	strh	r1, [r3, #0]
 802702a:	2300      	movs	r3, #0
 802702c:	6123      	str	r3, [r4, #16]
 802702e:	4616      	mov	r6, r2
 8027030:	e7bc      	b.n	8026fac <_printf_i+0x148>
 8027032:	6833      	ldr	r3, [r6, #0]
 8027034:	1d1a      	adds	r2, r3, #4
 8027036:	6032      	str	r2, [r6, #0]
 8027038:	681e      	ldr	r6, [r3, #0]
 802703a:	6862      	ldr	r2, [r4, #4]
 802703c:	2100      	movs	r1, #0
 802703e:	4630      	mov	r0, r6
 8027040:	f7f9 f8d6 	bl	80201f0 <memchr>
 8027044:	b108      	cbz	r0, 802704a <_printf_i+0x1e6>
 8027046:	1b80      	subs	r0, r0, r6
 8027048:	6060      	str	r0, [r4, #4]
 802704a:	6863      	ldr	r3, [r4, #4]
 802704c:	6123      	str	r3, [r4, #16]
 802704e:	2300      	movs	r3, #0
 8027050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8027054:	e7aa      	b.n	8026fac <_printf_i+0x148>
 8027056:	6923      	ldr	r3, [r4, #16]
 8027058:	4632      	mov	r2, r6
 802705a:	4649      	mov	r1, r9
 802705c:	4640      	mov	r0, r8
 802705e:	47d0      	blx	sl
 8027060:	3001      	adds	r0, #1
 8027062:	d0ad      	beq.n	8026fc0 <_printf_i+0x15c>
 8027064:	6823      	ldr	r3, [r4, #0]
 8027066:	079b      	lsls	r3, r3, #30
 8027068:	d413      	bmi.n	8027092 <_printf_i+0x22e>
 802706a:	68e0      	ldr	r0, [r4, #12]
 802706c:	9b03      	ldr	r3, [sp, #12]
 802706e:	4298      	cmp	r0, r3
 8027070:	bfb8      	it	lt
 8027072:	4618      	movlt	r0, r3
 8027074:	e7a6      	b.n	8026fc4 <_printf_i+0x160>
 8027076:	2301      	movs	r3, #1
 8027078:	4632      	mov	r2, r6
 802707a:	4649      	mov	r1, r9
 802707c:	4640      	mov	r0, r8
 802707e:	47d0      	blx	sl
 8027080:	3001      	adds	r0, #1
 8027082:	d09d      	beq.n	8026fc0 <_printf_i+0x15c>
 8027084:	3501      	adds	r5, #1
 8027086:	68e3      	ldr	r3, [r4, #12]
 8027088:	9903      	ldr	r1, [sp, #12]
 802708a:	1a5b      	subs	r3, r3, r1
 802708c:	42ab      	cmp	r3, r5
 802708e:	dcf2      	bgt.n	8027076 <_printf_i+0x212>
 8027090:	e7eb      	b.n	802706a <_printf_i+0x206>
 8027092:	2500      	movs	r5, #0
 8027094:	f104 0619 	add.w	r6, r4, #25
 8027098:	e7f5      	b.n	8027086 <_printf_i+0x222>
 802709a:	bf00      	nop
 802709c:	08027865 	.word	0x08027865
 80270a0:	08027876 	.word	0x08027876

080270a4 <_scanf_chars>:
 80270a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80270a8:	4615      	mov	r5, r2
 80270aa:	688a      	ldr	r2, [r1, #8]
 80270ac:	4680      	mov	r8, r0
 80270ae:	460c      	mov	r4, r1
 80270b0:	b932      	cbnz	r2, 80270c0 <_scanf_chars+0x1c>
 80270b2:	698a      	ldr	r2, [r1, #24]
 80270b4:	2a00      	cmp	r2, #0
 80270b6:	bf14      	ite	ne
 80270b8:	f04f 32ff 	movne.w	r2, #4294967295
 80270bc:	2201      	moveq	r2, #1
 80270be:	608a      	str	r2, [r1, #8]
 80270c0:	6822      	ldr	r2, [r4, #0]
 80270c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8027154 <_scanf_chars+0xb0>
 80270c6:	06d1      	lsls	r1, r2, #27
 80270c8:	bf5f      	itttt	pl
 80270ca:	681a      	ldrpl	r2, [r3, #0]
 80270cc:	1d11      	addpl	r1, r2, #4
 80270ce:	6019      	strpl	r1, [r3, #0]
 80270d0:	6816      	ldrpl	r6, [r2, #0]
 80270d2:	2700      	movs	r7, #0
 80270d4:	69a0      	ldr	r0, [r4, #24]
 80270d6:	b188      	cbz	r0, 80270fc <_scanf_chars+0x58>
 80270d8:	2801      	cmp	r0, #1
 80270da:	d107      	bne.n	80270ec <_scanf_chars+0x48>
 80270dc:	682b      	ldr	r3, [r5, #0]
 80270de:	781a      	ldrb	r2, [r3, #0]
 80270e0:	6963      	ldr	r3, [r4, #20]
 80270e2:	5c9b      	ldrb	r3, [r3, r2]
 80270e4:	b953      	cbnz	r3, 80270fc <_scanf_chars+0x58>
 80270e6:	2f00      	cmp	r7, #0
 80270e8:	d031      	beq.n	802714e <_scanf_chars+0xaa>
 80270ea:	e022      	b.n	8027132 <_scanf_chars+0x8e>
 80270ec:	2802      	cmp	r0, #2
 80270ee:	d120      	bne.n	8027132 <_scanf_chars+0x8e>
 80270f0:	682b      	ldr	r3, [r5, #0]
 80270f2:	781b      	ldrb	r3, [r3, #0]
 80270f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80270f8:	071b      	lsls	r3, r3, #28
 80270fa:	d41a      	bmi.n	8027132 <_scanf_chars+0x8e>
 80270fc:	6823      	ldr	r3, [r4, #0]
 80270fe:	06da      	lsls	r2, r3, #27
 8027100:	bf5e      	ittt	pl
 8027102:	682b      	ldrpl	r3, [r5, #0]
 8027104:	781b      	ldrbpl	r3, [r3, #0]
 8027106:	f806 3b01 	strbpl.w	r3, [r6], #1
 802710a:	682a      	ldr	r2, [r5, #0]
 802710c:	686b      	ldr	r3, [r5, #4]
 802710e:	3201      	adds	r2, #1
 8027110:	602a      	str	r2, [r5, #0]
 8027112:	68a2      	ldr	r2, [r4, #8]
 8027114:	3b01      	subs	r3, #1
 8027116:	3a01      	subs	r2, #1
 8027118:	606b      	str	r3, [r5, #4]
 802711a:	3701      	adds	r7, #1
 802711c:	60a2      	str	r2, [r4, #8]
 802711e:	b142      	cbz	r2, 8027132 <_scanf_chars+0x8e>
 8027120:	2b00      	cmp	r3, #0
 8027122:	dcd7      	bgt.n	80270d4 <_scanf_chars+0x30>
 8027124:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8027128:	4629      	mov	r1, r5
 802712a:	4640      	mov	r0, r8
 802712c:	4798      	blx	r3
 802712e:	2800      	cmp	r0, #0
 8027130:	d0d0      	beq.n	80270d4 <_scanf_chars+0x30>
 8027132:	6823      	ldr	r3, [r4, #0]
 8027134:	f013 0310 	ands.w	r3, r3, #16
 8027138:	d105      	bne.n	8027146 <_scanf_chars+0xa2>
 802713a:	68e2      	ldr	r2, [r4, #12]
 802713c:	3201      	adds	r2, #1
 802713e:	60e2      	str	r2, [r4, #12]
 8027140:	69a2      	ldr	r2, [r4, #24]
 8027142:	b102      	cbz	r2, 8027146 <_scanf_chars+0xa2>
 8027144:	7033      	strb	r3, [r6, #0]
 8027146:	6923      	ldr	r3, [r4, #16]
 8027148:	443b      	add	r3, r7
 802714a:	6123      	str	r3, [r4, #16]
 802714c:	2000      	movs	r0, #0
 802714e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027152:	bf00      	nop
 8027154:	080278a3 	.word	0x080278a3

08027158 <_scanf_i>:
 8027158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802715c:	4698      	mov	r8, r3
 802715e:	4b74      	ldr	r3, [pc, #464]	@ (8027330 <_scanf_i+0x1d8>)
 8027160:	460c      	mov	r4, r1
 8027162:	4682      	mov	sl, r0
 8027164:	4616      	mov	r6, r2
 8027166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802716a:	b087      	sub	sp, #28
 802716c:	ab03      	add	r3, sp, #12
 802716e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8027172:	4b70      	ldr	r3, [pc, #448]	@ (8027334 <_scanf_i+0x1dc>)
 8027174:	69a1      	ldr	r1, [r4, #24]
 8027176:	4a70      	ldr	r2, [pc, #448]	@ (8027338 <_scanf_i+0x1e0>)
 8027178:	2903      	cmp	r1, #3
 802717a:	bf08      	it	eq
 802717c:	461a      	moveq	r2, r3
 802717e:	68a3      	ldr	r3, [r4, #8]
 8027180:	9201      	str	r2, [sp, #4]
 8027182:	1e5a      	subs	r2, r3, #1
 8027184:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8027188:	bf88      	it	hi
 802718a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 802718e:	4627      	mov	r7, r4
 8027190:	bf82      	ittt	hi
 8027192:	eb03 0905 	addhi.w	r9, r3, r5
 8027196:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802719a:	60a3      	strhi	r3, [r4, #8]
 802719c:	f857 3b1c 	ldr.w	r3, [r7], #28
 80271a0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80271a4:	bf98      	it	ls
 80271a6:	f04f 0900 	movls.w	r9, #0
 80271aa:	6023      	str	r3, [r4, #0]
 80271ac:	463d      	mov	r5, r7
 80271ae:	f04f 0b00 	mov.w	fp, #0
 80271b2:	6831      	ldr	r1, [r6, #0]
 80271b4:	ab03      	add	r3, sp, #12
 80271b6:	7809      	ldrb	r1, [r1, #0]
 80271b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80271bc:	2202      	movs	r2, #2
 80271be:	f7f9 f817 	bl	80201f0 <memchr>
 80271c2:	b328      	cbz	r0, 8027210 <_scanf_i+0xb8>
 80271c4:	f1bb 0f01 	cmp.w	fp, #1
 80271c8:	d159      	bne.n	802727e <_scanf_i+0x126>
 80271ca:	6862      	ldr	r2, [r4, #4]
 80271cc:	b92a      	cbnz	r2, 80271da <_scanf_i+0x82>
 80271ce:	6822      	ldr	r2, [r4, #0]
 80271d0:	2108      	movs	r1, #8
 80271d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80271d6:	6061      	str	r1, [r4, #4]
 80271d8:	6022      	str	r2, [r4, #0]
 80271da:	6822      	ldr	r2, [r4, #0]
 80271dc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80271e0:	6022      	str	r2, [r4, #0]
 80271e2:	68a2      	ldr	r2, [r4, #8]
 80271e4:	1e51      	subs	r1, r2, #1
 80271e6:	60a1      	str	r1, [r4, #8]
 80271e8:	b192      	cbz	r2, 8027210 <_scanf_i+0xb8>
 80271ea:	6832      	ldr	r2, [r6, #0]
 80271ec:	1c51      	adds	r1, r2, #1
 80271ee:	6031      	str	r1, [r6, #0]
 80271f0:	7812      	ldrb	r2, [r2, #0]
 80271f2:	f805 2b01 	strb.w	r2, [r5], #1
 80271f6:	6872      	ldr	r2, [r6, #4]
 80271f8:	3a01      	subs	r2, #1
 80271fa:	2a00      	cmp	r2, #0
 80271fc:	6072      	str	r2, [r6, #4]
 80271fe:	dc07      	bgt.n	8027210 <_scanf_i+0xb8>
 8027200:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8027204:	4631      	mov	r1, r6
 8027206:	4650      	mov	r0, sl
 8027208:	4790      	blx	r2
 802720a:	2800      	cmp	r0, #0
 802720c:	f040 8085 	bne.w	802731a <_scanf_i+0x1c2>
 8027210:	f10b 0b01 	add.w	fp, fp, #1
 8027214:	f1bb 0f03 	cmp.w	fp, #3
 8027218:	d1cb      	bne.n	80271b2 <_scanf_i+0x5a>
 802721a:	6863      	ldr	r3, [r4, #4]
 802721c:	b90b      	cbnz	r3, 8027222 <_scanf_i+0xca>
 802721e:	230a      	movs	r3, #10
 8027220:	6063      	str	r3, [r4, #4]
 8027222:	6863      	ldr	r3, [r4, #4]
 8027224:	4945      	ldr	r1, [pc, #276]	@ (802733c <_scanf_i+0x1e4>)
 8027226:	6960      	ldr	r0, [r4, #20]
 8027228:	1ac9      	subs	r1, r1, r3
 802722a:	f000 f889 	bl	8027340 <__sccl>
 802722e:	f04f 0b00 	mov.w	fp, #0
 8027232:	68a3      	ldr	r3, [r4, #8]
 8027234:	6822      	ldr	r2, [r4, #0]
 8027236:	2b00      	cmp	r3, #0
 8027238:	d03d      	beq.n	80272b6 <_scanf_i+0x15e>
 802723a:	6831      	ldr	r1, [r6, #0]
 802723c:	6960      	ldr	r0, [r4, #20]
 802723e:	f891 c000 	ldrb.w	ip, [r1]
 8027242:	f810 000c 	ldrb.w	r0, [r0, ip]
 8027246:	2800      	cmp	r0, #0
 8027248:	d035      	beq.n	80272b6 <_scanf_i+0x15e>
 802724a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 802724e:	d124      	bne.n	802729a <_scanf_i+0x142>
 8027250:	0510      	lsls	r0, r2, #20
 8027252:	d522      	bpl.n	802729a <_scanf_i+0x142>
 8027254:	f10b 0b01 	add.w	fp, fp, #1
 8027258:	f1b9 0f00 	cmp.w	r9, #0
 802725c:	d003      	beq.n	8027266 <_scanf_i+0x10e>
 802725e:	3301      	adds	r3, #1
 8027260:	f109 39ff 	add.w	r9, r9, #4294967295
 8027264:	60a3      	str	r3, [r4, #8]
 8027266:	6873      	ldr	r3, [r6, #4]
 8027268:	3b01      	subs	r3, #1
 802726a:	2b00      	cmp	r3, #0
 802726c:	6073      	str	r3, [r6, #4]
 802726e:	dd1b      	ble.n	80272a8 <_scanf_i+0x150>
 8027270:	6833      	ldr	r3, [r6, #0]
 8027272:	3301      	adds	r3, #1
 8027274:	6033      	str	r3, [r6, #0]
 8027276:	68a3      	ldr	r3, [r4, #8]
 8027278:	3b01      	subs	r3, #1
 802727a:	60a3      	str	r3, [r4, #8]
 802727c:	e7d9      	b.n	8027232 <_scanf_i+0xda>
 802727e:	f1bb 0f02 	cmp.w	fp, #2
 8027282:	d1ae      	bne.n	80271e2 <_scanf_i+0x8a>
 8027284:	6822      	ldr	r2, [r4, #0]
 8027286:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 802728a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802728e:	d1bf      	bne.n	8027210 <_scanf_i+0xb8>
 8027290:	2110      	movs	r1, #16
 8027292:	6061      	str	r1, [r4, #4]
 8027294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8027298:	e7a2      	b.n	80271e0 <_scanf_i+0x88>
 802729a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 802729e:	6022      	str	r2, [r4, #0]
 80272a0:	780b      	ldrb	r3, [r1, #0]
 80272a2:	f805 3b01 	strb.w	r3, [r5], #1
 80272a6:	e7de      	b.n	8027266 <_scanf_i+0x10e>
 80272a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80272ac:	4631      	mov	r1, r6
 80272ae:	4650      	mov	r0, sl
 80272b0:	4798      	blx	r3
 80272b2:	2800      	cmp	r0, #0
 80272b4:	d0df      	beq.n	8027276 <_scanf_i+0x11e>
 80272b6:	6823      	ldr	r3, [r4, #0]
 80272b8:	05d9      	lsls	r1, r3, #23
 80272ba:	d50d      	bpl.n	80272d8 <_scanf_i+0x180>
 80272bc:	42bd      	cmp	r5, r7
 80272be:	d909      	bls.n	80272d4 <_scanf_i+0x17c>
 80272c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80272c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80272c8:	4632      	mov	r2, r6
 80272ca:	4650      	mov	r0, sl
 80272cc:	4798      	blx	r3
 80272ce:	f105 39ff 	add.w	r9, r5, #4294967295
 80272d2:	464d      	mov	r5, r9
 80272d4:	42bd      	cmp	r5, r7
 80272d6:	d028      	beq.n	802732a <_scanf_i+0x1d2>
 80272d8:	6822      	ldr	r2, [r4, #0]
 80272da:	f012 0210 	ands.w	r2, r2, #16
 80272de:	d113      	bne.n	8027308 <_scanf_i+0x1b0>
 80272e0:	702a      	strb	r2, [r5, #0]
 80272e2:	6863      	ldr	r3, [r4, #4]
 80272e4:	9e01      	ldr	r6, [sp, #4]
 80272e6:	4639      	mov	r1, r7
 80272e8:	4650      	mov	r0, sl
 80272ea:	47b0      	blx	r6
 80272ec:	f8d8 3000 	ldr.w	r3, [r8]
 80272f0:	6821      	ldr	r1, [r4, #0]
 80272f2:	1d1a      	adds	r2, r3, #4
 80272f4:	f8c8 2000 	str.w	r2, [r8]
 80272f8:	f011 0f20 	tst.w	r1, #32
 80272fc:	681b      	ldr	r3, [r3, #0]
 80272fe:	d00f      	beq.n	8027320 <_scanf_i+0x1c8>
 8027300:	6018      	str	r0, [r3, #0]
 8027302:	68e3      	ldr	r3, [r4, #12]
 8027304:	3301      	adds	r3, #1
 8027306:	60e3      	str	r3, [r4, #12]
 8027308:	6923      	ldr	r3, [r4, #16]
 802730a:	1bed      	subs	r5, r5, r7
 802730c:	445d      	add	r5, fp
 802730e:	442b      	add	r3, r5
 8027310:	6123      	str	r3, [r4, #16]
 8027312:	2000      	movs	r0, #0
 8027314:	b007      	add	sp, #28
 8027316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802731a:	f04f 0b00 	mov.w	fp, #0
 802731e:	e7ca      	b.n	80272b6 <_scanf_i+0x15e>
 8027320:	07ca      	lsls	r2, r1, #31
 8027322:	bf4c      	ite	mi
 8027324:	8018      	strhmi	r0, [r3, #0]
 8027326:	6018      	strpl	r0, [r3, #0]
 8027328:	e7eb      	b.n	8027302 <_scanf_i+0x1aa>
 802732a:	2001      	movs	r0, #1
 802732c:	e7f2      	b.n	8027314 <_scanf_i+0x1bc>
 802732e:	bf00      	nop
 8027330:	080277bc 	.word	0x080277bc
 8027334:	080275ad 	.word	0x080275ad
 8027338:	0802768d 	.word	0x0802768d
 802733c:	08027897 	.word	0x08027897

08027340 <__sccl>:
 8027340:	b570      	push	{r4, r5, r6, lr}
 8027342:	780b      	ldrb	r3, [r1, #0]
 8027344:	4604      	mov	r4, r0
 8027346:	2b5e      	cmp	r3, #94	@ 0x5e
 8027348:	bf0b      	itete	eq
 802734a:	784b      	ldrbeq	r3, [r1, #1]
 802734c:	1c4a      	addne	r2, r1, #1
 802734e:	1c8a      	addeq	r2, r1, #2
 8027350:	2100      	movne	r1, #0
 8027352:	bf08      	it	eq
 8027354:	2101      	moveq	r1, #1
 8027356:	3801      	subs	r0, #1
 8027358:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 802735c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8027360:	42a8      	cmp	r0, r5
 8027362:	d1fb      	bne.n	802735c <__sccl+0x1c>
 8027364:	b90b      	cbnz	r3, 802736a <__sccl+0x2a>
 8027366:	1e50      	subs	r0, r2, #1
 8027368:	bd70      	pop	{r4, r5, r6, pc}
 802736a:	f081 0101 	eor.w	r1, r1, #1
 802736e:	54e1      	strb	r1, [r4, r3]
 8027370:	4610      	mov	r0, r2
 8027372:	4602      	mov	r2, r0
 8027374:	f812 5b01 	ldrb.w	r5, [r2], #1
 8027378:	2d2d      	cmp	r5, #45	@ 0x2d
 802737a:	d005      	beq.n	8027388 <__sccl+0x48>
 802737c:	2d5d      	cmp	r5, #93	@ 0x5d
 802737e:	d016      	beq.n	80273ae <__sccl+0x6e>
 8027380:	2d00      	cmp	r5, #0
 8027382:	d0f1      	beq.n	8027368 <__sccl+0x28>
 8027384:	462b      	mov	r3, r5
 8027386:	e7f2      	b.n	802736e <__sccl+0x2e>
 8027388:	7846      	ldrb	r6, [r0, #1]
 802738a:	2e5d      	cmp	r6, #93	@ 0x5d
 802738c:	d0fa      	beq.n	8027384 <__sccl+0x44>
 802738e:	42b3      	cmp	r3, r6
 8027390:	dcf8      	bgt.n	8027384 <__sccl+0x44>
 8027392:	3002      	adds	r0, #2
 8027394:	461a      	mov	r2, r3
 8027396:	3201      	adds	r2, #1
 8027398:	4296      	cmp	r6, r2
 802739a:	54a1      	strb	r1, [r4, r2]
 802739c:	dcfb      	bgt.n	8027396 <__sccl+0x56>
 802739e:	1af2      	subs	r2, r6, r3
 80273a0:	3a01      	subs	r2, #1
 80273a2:	1c5d      	adds	r5, r3, #1
 80273a4:	42b3      	cmp	r3, r6
 80273a6:	bfa8      	it	ge
 80273a8:	2200      	movge	r2, #0
 80273aa:	18ab      	adds	r3, r5, r2
 80273ac:	e7e1      	b.n	8027372 <__sccl+0x32>
 80273ae:	4610      	mov	r0, r2
 80273b0:	e7da      	b.n	8027368 <__sccl+0x28>

080273b2 <__submore>:
 80273b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80273b6:	460c      	mov	r4, r1
 80273b8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80273ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80273be:	4299      	cmp	r1, r3
 80273c0:	d11d      	bne.n	80273fe <__submore+0x4c>
 80273c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80273c6:	f7ff f831 	bl	802642c <_malloc_r>
 80273ca:	b918      	cbnz	r0, 80273d4 <__submore+0x22>
 80273cc:	f04f 30ff 	mov.w	r0, #4294967295
 80273d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80273d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80273d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80273da:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80273de:	6360      	str	r0, [r4, #52]	@ 0x34
 80273e0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80273e4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80273e8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80273ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80273f0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80273f4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80273f8:	6020      	str	r0, [r4, #0]
 80273fa:	2000      	movs	r0, #0
 80273fc:	e7e8      	b.n	80273d0 <__submore+0x1e>
 80273fe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8027400:	0077      	lsls	r7, r6, #1
 8027402:	463a      	mov	r2, r7
 8027404:	f000 f829 	bl	802745a <_realloc_r>
 8027408:	4605      	mov	r5, r0
 802740a:	2800      	cmp	r0, #0
 802740c:	d0de      	beq.n	80273cc <__submore+0x1a>
 802740e:	eb00 0806 	add.w	r8, r0, r6
 8027412:	4601      	mov	r1, r0
 8027414:	4632      	mov	r2, r6
 8027416:	4640      	mov	r0, r8
 8027418:	f7ff f93a 	bl	8026690 <memcpy>
 802741c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8027420:	f8c4 8000 	str.w	r8, [r4]
 8027424:	e7e9      	b.n	80273fa <__submore+0x48>

08027426 <memmove>:
 8027426:	4288      	cmp	r0, r1
 8027428:	b510      	push	{r4, lr}
 802742a:	eb01 0402 	add.w	r4, r1, r2
 802742e:	d902      	bls.n	8027436 <memmove+0x10>
 8027430:	4284      	cmp	r4, r0
 8027432:	4623      	mov	r3, r4
 8027434:	d807      	bhi.n	8027446 <memmove+0x20>
 8027436:	1e43      	subs	r3, r0, #1
 8027438:	42a1      	cmp	r1, r4
 802743a:	d008      	beq.n	802744e <memmove+0x28>
 802743c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027440:	f803 2f01 	strb.w	r2, [r3, #1]!
 8027444:	e7f8      	b.n	8027438 <memmove+0x12>
 8027446:	4402      	add	r2, r0
 8027448:	4601      	mov	r1, r0
 802744a:	428a      	cmp	r2, r1
 802744c:	d100      	bne.n	8027450 <memmove+0x2a>
 802744e:	bd10      	pop	{r4, pc}
 8027450:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8027454:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8027458:	e7f7      	b.n	802744a <memmove+0x24>

0802745a <_realloc_r>:
 802745a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802745e:	4680      	mov	r8, r0
 8027460:	4615      	mov	r5, r2
 8027462:	460c      	mov	r4, r1
 8027464:	b921      	cbnz	r1, 8027470 <_realloc_r+0x16>
 8027466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802746a:	4611      	mov	r1, r2
 802746c:	f7fe bfde 	b.w	802642c <_malloc_r>
 8027470:	b92a      	cbnz	r2, 802747e <_realloc_r+0x24>
 8027472:	f7ff f91b 	bl	80266ac <_free_r>
 8027476:	2400      	movs	r4, #0
 8027478:	4620      	mov	r0, r4
 802747a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802747e:	f000 f907 	bl	8027690 <_malloc_usable_size_r>
 8027482:	4285      	cmp	r5, r0
 8027484:	4606      	mov	r6, r0
 8027486:	d802      	bhi.n	802748e <_realloc_r+0x34>
 8027488:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802748c:	d8f4      	bhi.n	8027478 <_realloc_r+0x1e>
 802748e:	4629      	mov	r1, r5
 8027490:	4640      	mov	r0, r8
 8027492:	f7fe ffcb 	bl	802642c <_malloc_r>
 8027496:	4607      	mov	r7, r0
 8027498:	2800      	cmp	r0, #0
 802749a:	d0ec      	beq.n	8027476 <_realloc_r+0x1c>
 802749c:	42b5      	cmp	r5, r6
 802749e:	462a      	mov	r2, r5
 80274a0:	4621      	mov	r1, r4
 80274a2:	bf28      	it	cs
 80274a4:	4632      	movcs	r2, r6
 80274a6:	f7ff f8f3 	bl	8026690 <memcpy>
 80274aa:	4621      	mov	r1, r4
 80274ac:	4640      	mov	r0, r8
 80274ae:	f7ff f8fd 	bl	80266ac <_free_r>
 80274b2:	463c      	mov	r4, r7
 80274b4:	e7e0      	b.n	8027478 <_realloc_r+0x1e>
	...

080274b8 <_strtol_l.constprop.0>:
 80274b8:	2b24      	cmp	r3, #36	@ 0x24
 80274ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80274be:	4686      	mov	lr, r0
 80274c0:	4690      	mov	r8, r2
 80274c2:	d801      	bhi.n	80274c8 <_strtol_l.constprop.0+0x10>
 80274c4:	2b01      	cmp	r3, #1
 80274c6:	d106      	bne.n	80274d6 <_strtol_l.constprop.0+0x1e>
 80274c8:	f7ff f8b6 	bl	8026638 <__errno>
 80274cc:	2316      	movs	r3, #22
 80274ce:	6003      	str	r3, [r0, #0]
 80274d0:	2000      	movs	r0, #0
 80274d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80274d6:	4834      	ldr	r0, [pc, #208]	@ (80275a8 <_strtol_l.constprop.0+0xf0>)
 80274d8:	460d      	mov	r5, r1
 80274da:	462a      	mov	r2, r5
 80274dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80274e0:	5d06      	ldrb	r6, [r0, r4]
 80274e2:	f016 0608 	ands.w	r6, r6, #8
 80274e6:	d1f8      	bne.n	80274da <_strtol_l.constprop.0+0x22>
 80274e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80274ea:	d12d      	bne.n	8027548 <_strtol_l.constprop.0+0x90>
 80274ec:	782c      	ldrb	r4, [r5, #0]
 80274ee:	2601      	movs	r6, #1
 80274f0:	1c95      	adds	r5, r2, #2
 80274f2:	f033 0210 	bics.w	r2, r3, #16
 80274f6:	d109      	bne.n	802750c <_strtol_l.constprop.0+0x54>
 80274f8:	2c30      	cmp	r4, #48	@ 0x30
 80274fa:	d12a      	bne.n	8027552 <_strtol_l.constprop.0+0x9a>
 80274fc:	782a      	ldrb	r2, [r5, #0]
 80274fe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8027502:	2a58      	cmp	r2, #88	@ 0x58
 8027504:	d125      	bne.n	8027552 <_strtol_l.constprop.0+0x9a>
 8027506:	786c      	ldrb	r4, [r5, #1]
 8027508:	2310      	movs	r3, #16
 802750a:	3502      	adds	r5, #2
 802750c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8027510:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027514:	2200      	movs	r2, #0
 8027516:	fbbc f9f3 	udiv	r9, ip, r3
 802751a:	4610      	mov	r0, r2
 802751c:	fb03 ca19 	mls	sl, r3, r9, ip
 8027520:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8027524:	2f09      	cmp	r7, #9
 8027526:	d81b      	bhi.n	8027560 <_strtol_l.constprop.0+0xa8>
 8027528:	463c      	mov	r4, r7
 802752a:	42a3      	cmp	r3, r4
 802752c:	dd27      	ble.n	802757e <_strtol_l.constprop.0+0xc6>
 802752e:	1c57      	adds	r7, r2, #1
 8027530:	d007      	beq.n	8027542 <_strtol_l.constprop.0+0x8a>
 8027532:	4581      	cmp	r9, r0
 8027534:	d320      	bcc.n	8027578 <_strtol_l.constprop.0+0xc0>
 8027536:	d101      	bne.n	802753c <_strtol_l.constprop.0+0x84>
 8027538:	45a2      	cmp	sl, r4
 802753a:	db1d      	blt.n	8027578 <_strtol_l.constprop.0+0xc0>
 802753c:	fb00 4003 	mla	r0, r0, r3, r4
 8027540:	2201      	movs	r2, #1
 8027542:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027546:	e7eb      	b.n	8027520 <_strtol_l.constprop.0+0x68>
 8027548:	2c2b      	cmp	r4, #43	@ 0x2b
 802754a:	bf04      	itt	eq
 802754c:	782c      	ldrbeq	r4, [r5, #0]
 802754e:	1c95      	addeq	r5, r2, #2
 8027550:	e7cf      	b.n	80274f2 <_strtol_l.constprop.0+0x3a>
 8027552:	2b00      	cmp	r3, #0
 8027554:	d1da      	bne.n	802750c <_strtol_l.constprop.0+0x54>
 8027556:	2c30      	cmp	r4, #48	@ 0x30
 8027558:	bf0c      	ite	eq
 802755a:	2308      	moveq	r3, #8
 802755c:	230a      	movne	r3, #10
 802755e:	e7d5      	b.n	802750c <_strtol_l.constprop.0+0x54>
 8027560:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8027564:	2f19      	cmp	r7, #25
 8027566:	d801      	bhi.n	802756c <_strtol_l.constprop.0+0xb4>
 8027568:	3c37      	subs	r4, #55	@ 0x37
 802756a:	e7de      	b.n	802752a <_strtol_l.constprop.0+0x72>
 802756c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8027570:	2f19      	cmp	r7, #25
 8027572:	d804      	bhi.n	802757e <_strtol_l.constprop.0+0xc6>
 8027574:	3c57      	subs	r4, #87	@ 0x57
 8027576:	e7d8      	b.n	802752a <_strtol_l.constprop.0+0x72>
 8027578:	f04f 32ff 	mov.w	r2, #4294967295
 802757c:	e7e1      	b.n	8027542 <_strtol_l.constprop.0+0x8a>
 802757e:	1c53      	adds	r3, r2, #1
 8027580:	d108      	bne.n	8027594 <_strtol_l.constprop.0+0xdc>
 8027582:	2322      	movs	r3, #34	@ 0x22
 8027584:	f8ce 3000 	str.w	r3, [lr]
 8027588:	4660      	mov	r0, ip
 802758a:	f1b8 0f00 	cmp.w	r8, #0
 802758e:	d0a0      	beq.n	80274d2 <_strtol_l.constprop.0+0x1a>
 8027590:	1e69      	subs	r1, r5, #1
 8027592:	e006      	b.n	80275a2 <_strtol_l.constprop.0+0xea>
 8027594:	b106      	cbz	r6, 8027598 <_strtol_l.constprop.0+0xe0>
 8027596:	4240      	negs	r0, r0
 8027598:	f1b8 0f00 	cmp.w	r8, #0
 802759c:	d099      	beq.n	80274d2 <_strtol_l.constprop.0+0x1a>
 802759e:	2a00      	cmp	r2, #0
 80275a0:	d1f6      	bne.n	8027590 <_strtol_l.constprop.0+0xd8>
 80275a2:	f8c8 1000 	str.w	r1, [r8]
 80275a6:	e794      	b.n	80274d2 <_strtol_l.constprop.0+0x1a>
 80275a8:	080278a3 	.word	0x080278a3

080275ac <_strtol_r>:
 80275ac:	f7ff bf84 	b.w	80274b8 <_strtol_l.constprop.0>

080275b0 <_strtoul_l.constprop.0>:
 80275b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80275b4:	4e34      	ldr	r6, [pc, #208]	@ (8027688 <_strtoul_l.constprop.0+0xd8>)
 80275b6:	4686      	mov	lr, r0
 80275b8:	460d      	mov	r5, r1
 80275ba:	4628      	mov	r0, r5
 80275bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80275c0:	5d37      	ldrb	r7, [r6, r4]
 80275c2:	f017 0708 	ands.w	r7, r7, #8
 80275c6:	d1f8      	bne.n	80275ba <_strtoul_l.constprop.0+0xa>
 80275c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80275ca:	d12f      	bne.n	802762c <_strtoul_l.constprop.0+0x7c>
 80275cc:	782c      	ldrb	r4, [r5, #0]
 80275ce:	2701      	movs	r7, #1
 80275d0:	1c85      	adds	r5, r0, #2
 80275d2:	f033 0010 	bics.w	r0, r3, #16
 80275d6:	d109      	bne.n	80275ec <_strtoul_l.constprop.0+0x3c>
 80275d8:	2c30      	cmp	r4, #48	@ 0x30
 80275da:	d12c      	bne.n	8027636 <_strtoul_l.constprop.0+0x86>
 80275dc:	7828      	ldrb	r0, [r5, #0]
 80275de:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80275e2:	2858      	cmp	r0, #88	@ 0x58
 80275e4:	d127      	bne.n	8027636 <_strtoul_l.constprop.0+0x86>
 80275e6:	786c      	ldrb	r4, [r5, #1]
 80275e8:	2310      	movs	r3, #16
 80275ea:	3502      	adds	r5, #2
 80275ec:	f04f 38ff 	mov.w	r8, #4294967295
 80275f0:	2600      	movs	r6, #0
 80275f2:	fbb8 f8f3 	udiv	r8, r8, r3
 80275f6:	fb03 f908 	mul.w	r9, r3, r8
 80275fa:	ea6f 0909 	mvn.w	r9, r9
 80275fe:	4630      	mov	r0, r6
 8027600:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8027604:	f1bc 0f09 	cmp.w	ip, #9
 8027608:	d81c      	bhi.n	8027644 <_strtoul_l.constprop.0+0x94>
 802760a:	4664      	mov	r4, ip
 802760c:	42a3      	cmp	r3, r4
 802760e:	dd2a      	ble.n	8027666 <_strtoul_l.constprop.0+0xb6>
 8027610:	f1b6 3fff 	cmp.w	r6, #4294967295
 8027614:	d007      	beq.n	8027626 <_strtoul_l.constprop.0+0x76>
 8027616:	4580      	cmp	r8, r0
 8027618:	d322      	bcc.n	8027660 <_strtoul_l.constprop.0+0xb0>
 802761a:	d101      	bne.n	8027620 <_strtoul_l.constprop.0+0x70>
 802761c:	45a1      	cmp	r9, r4
 802761e:	db1f      	blt.n	8027660 <_strtoul_l.constprop.0+0xb0>
 8027620:	fb00 4003 	mla	r0, r0, r3, r4
 8027624:	2601      	movs	r6, #1
 8027626:	f815 4b01 	ldrb.w	r4, [r5], #1
 802762a:	e7e9      	b.n	8027600 <_strtoul_l.constprop.0+0x50>
 802762c:	2c2b      	cmp	r4, #43	@ 0x2b
 802762e:	bf04      	itt	eq
 8027630:	782c      	ldrbeq	r4, [r5, #0]
 8027632:	1c85      	addeq	r5, r0, #2
 8027634:	e7cd      	b.n	80275d2 <_strtoul_l.constprop.0+0x22>
 8027636:	2b00      	cmp	r3, #0
 8027638:	d1d8      	bne.n	80275ec <_strtoul_l.constprop.0+0x3c>
 802763a:	2c30      	cmp	r4, #48	@ 0x30
 802763c:	bf0c      	ite	eq
 802763e:	2308      	moveq	r3, #8
 8027640:	230a      	movne	r3, #10
 8027642:	e7d3      	b.n	80275ec <_strtoul_l.constprop.0+0x3c>
 8027644:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8027648:	f1bc 0f19 	cmp.w	ip, #25
 802764c:	d801      	bhi.n	8027652 <_strtoul_l.constprop.0+0xa2>
 802764e:	3c37      	subs	r4, #55	@ 0x37
 8027650:	e7dc      	b.n	802760c <_strtoul_l.constprop.0+0x5c>
 8027652:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8027656:	f1bc 0f19 	cmp.w	ip, #25
 802765a:	d804      	bhi.n	8027666 <_strtoul_l.constprop.0+0xb6>
 802765c:	3c57      	subs	r4, #87	@ 0x57
 802765e:	e7d5      	b.n	802760c <_strtoul_l.constprop.0+0x5c>
 8027660:	f04f 36ff 	mov.w	r6, #4294967295
 8027664:	e7df      	b.n	8027626 <_strtoul_l.constprop.0+0x76>
 8027666:	1c73      	adds	r3, r6, #1
 8027668:	d106      	bne.n	8027678 <_strtoul_l.constprop.0+0xc8>
 802766a:	2322      	movs	r3, #34	@ 0x22
 802766c:	f8ce 3000 	str.w	r3, [lr]
 8027670:	4630      	mov	r0, r6
 8027672:	b932      	cbnz	r2, 8027682 <_strtoul_l.constprop.0+0xd2>
 8027674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027678:	b107      	cbz	r7, 802767c <_strtoul_l.constprop.0+0xcc>
 802767a:	4240      	negs	r0, r0
 802767c:	2a00      	cmp	r2, #0
 802767e:	d0f9      	beq.n	8027674 <_strtoul_l.constprop.0+0xc4>
 8027680:	b106      	cbz	r6, 8027684 <_strtoul_l.constprop.0+0xd4>
 8027682:	1e69      	subs	r1, r5, #1
 8027684:	6011      	str	r1, [r2, #0]
 8027686:	e7f5      	b.n	8027674 <_strtoul_l.constprop.0+0xc4>
 8027688:	080278a3 	.word	0x080278a3

0802768c <_strtoul_r>:
 802768c:	f7ff bf90 	b.w	80275b0 <_strtoul_l.constprop.0>

08027690 <_malloc_usable_size_r>:
 8027690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027694:	1f18      	subs	r0, r3, #4
 8027696:	2b00      	cmp	r3, #0
 8027698:	bfbc      	itt	lt
 802769a:	580b      	ldrlt	r3, [r1, r0]
 802769c:	18c0      	addlt	r0, r0, r3
 802769e:	4770      	bx	lr

080276a0 <_init>:
 80276a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80276a2:	bf00      	nop
 80276a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80276a6:	bc08      	pop	{r3}
 80276a8:	469e      	mov	lr, r3
 80276aa:	4770      	bx	lr

080276ac <_fini>:
 80276ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80276ae:	bf00      	nop
 80276b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80276b2:	bc08      	pop	{r3}
 80276b4:	469e      	mov	lr, r3
 80276b6:	4770      	bx	lr
